
Audio.elf:     file format elf32-littlenios2
Audio.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x008001a8

Program Header:
    LOAD off    0x000000b4 vaddr 0x01080020 paddr 0x00800000 align 2**0
         filesz 0x000001a8 memsz 0x000001a8 flags r-x
    LOAD off    0x0000025c vaddr 0x008001a8 paddr 0x008001a8 align 2**0
         filesz 0x00010478 memsz 0x00010478 flags r-x
    LOAD off    0x000106d4 vaddr 0x00810620 paddr 0x00810620 align 2**0
         filesz 0x00001b00 memsz 0x000022c8 flags rw-
    LOAD off    0x000121d4 vaddr 0x01080000 paddr 0x01080000 align 2**0
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01080000  01080000  000121d4  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a8  01080020  00800000  000000b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000feac  008001a8  008001a8  0000025c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005cc  00810054  00810054  00010108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b00  00810620  00810620  000106d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000007c8  00812120  00812120  000121d4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  008128e8  008128e8  000121f4  2**0
                  CONTENTS
  7 .sram_0       00000000  010801c8  010801c8  000121f4  2**0
                  CONTENTS
  8 .comment      0000115c  00000000  00000000  000121f4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c78  00000000  00000000  00013350  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000019ea  00000000  00000000  00013fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00025649  00000000  00000000  000159b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007729  00000000  00000000  0003affb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000153d7  00000000  00000000  00042724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001bf8  00000000  00000000  00057afc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000242c  00000000  00000000  000596f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0005bb20  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000005a0  00000010  00000010  0005bb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .cpu          00000005  00000000  00000000  0005fcbd  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0005fcc2  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0005fcc3  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0005fcc7  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0005fccb  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0005fccf  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0005fcda  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0005fce5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000a  00000000  00000000  0005fcf0  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000035  00000000  00000000  0005fcfa  2**0
                  CONTENTS, READONLY
 28 .jdi          000042c3  00000000  00000000  0005fd2f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01080000 l    d  .entry	00000000 
01080020 l    d  .exceptions	00000000 
008001a8 l    d  .text	00000000 
00810054 l    d  .rodata	00000000 
00810620 l    d  .rwdata	00000000 
00812120 l    d  .bss	00000000 
008128e8 l    d  .sdram_0	00000000 
010801c8 l    d  .sram_0	00000000 
00000000 l    d  .comment	00000000 
00000000 l    d  .debug_aranges	00000000 
00000000 l    d  .debug_pubnames	00000000 
00000000 l    d  .debug_info	00000000 
00000000 l    d  .debug_abbrev	00000000 
00000000 l    d  .debug_line	00000000 
00000000 l    d  .debug_frame	00000000 
00000000 l    d  .debug_str	00000000 
00000000 l    d  .debug_alt_sim_info	00000000 
00000010 l    d  .debug_ranges	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/nios2.h
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/d/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp//
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/crt0.S
008001e0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/d/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp//
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /cygdrive/d/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp//
00000000 l    df *ABS*	00000000 d:/Docs/documents/docs/GitHub/systems-project-verilog/software/Audio_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008005d0 l     F .text	00000060 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf1.c
00800e74 l     F .text	00000058 __sprint
0081010c l     O .rodata	00000010 blanks.0
0081011c l     O .rodata	00000010 zeroes.1
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00803314 l     F .text	0000022c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00804a14 l     F .text	00000058 std
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00810a50 l     O .rwdata	0000037c impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00810340 l     O .rodata	00000030 lconv
008120a8 l     O .rwdata	00000004 charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00810488 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinf.c
00000000 l    df *ABS*	00000000 s_isnan.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00807f6c l     F .text	0000031c _fpadd_parts
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080956c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
008095b4 l     F .text	00000028 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
008096b0 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008097b8 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080987c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
008099d4 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00809be4 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008120d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00809e80 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810f80 l     O .rwdata	00001060 jtag_uart_0
00811fe0 l     O .rwdata	00000030 audio_and_video_config_0
00812010 l     O .rwdata	00000030 audio
00812040 l     O .rwdata	0000002c SDCARD
00809f5c l     F .text	00000030 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080a17c l     F .text	00000220 altera_avalon_jtag_uart_irq
0080a39c l     F .text	000000c0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_sd_card_avalon_interface.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080f368 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080f508 l     F .text	000000dc alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080f7fc l     F .text	000000e8 alt_file_locked
0080fa6c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00812130 l     O .bss	00000004 lock.0
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 alt_exit.c
00810004 l     F .text	00000030 alt_sim_halt
008120dc g     O .rwdata	00000004 aux_status_register
00806758 g     F .text	000000b0 _mprec_log10
00810370 g     O .rodata	00000028 __mprec_tinytens
00809a1c g     F .text	00000070 alt_main
00809420 g     F .text	00000050 __ashldi3
00805b90 g     F .text	00000064 _hi0bits
008126dc g     O .bss	00000100 alt_irq
00807244 g     F .text	00000064 _lseek_r
00810620 g       *ABS*	00000000 __flash_rwdata_start
008089bc g     F .text	0000008c __eqdf2
0080b59c g     F .text	0000019c Check_for_Master_Boot_Record
0080ac9c g     F .text	00000074 alt_up_audio_read_fifo_avail
008128e8 g       *ABS*	00000000 __alt_heap_start
0080ef90 g     F .text	000001bc alt_up_sd_card_fclose
00800df4 g     F .text	00000034 printf
0080ad10 g     F .text	0000006c alt_up_audio_record_r
00802bb0 g     F .text	00000064 _wcrtomb_r
00806ec0 g     F .text	00000078 __sseek
00804a90 g     F .text	0000009c __sinit
00805360 g     F .text	00000088 _setlocale_r
00809aa8 g     F .text	0000001c __malloc_unlock
00812100 g     O .rwdata	00000004 current_sector_modified
0080ac18 g     F .text	00000084 alt_up_audio_reset_audio_core
008056f8 g     F .text	00000108 memmove
00804a80 g     F .text	00000010 _cleanup
0080589c g     F .text	000000b0 _Balloc
0080dbb8 g     F .text	000000c4 alt_up_sd_card_is_Present
0080b2dc g     F .text	00000048 Save_Modified_Sector
00808ad4 g     F .text	0000008c __gtdf2
00000000  w      *UND*	00000000 __errno
01080000 g     F .entry	0000000c __reset
008120f8 g     O .rwdata	00000004 fat_partition_size_in_512_byte_sectors
00806530 g     F .text	0000017c _d2b
00805ce4 g     F .text	00000254 _multiply
00800000 g       *ABS*	00000000 __flash_exceptions_start
008071e4 g     F .text	00000060 _fstat_r
0081212c g     O .bss	00000004 errno
008066ac g     F .text	000000ac _ratio
0080abe0 g     F .text	00000038 alt_up_audio_write_interrupt_pending
008120c8 g     O .rwdata	00000004 alt_argv
0081a06c g       *ABS*	00000000 _gp
0080e100 g     F .text	00000378 alt_up_sd_card_fopen
0080dcec g     F .text	000000c8 alt_up_sd_card_find_first
00805a94 g     F .text	000000fc _s2b
00805ca8 g     F .text	0000003c _i2b
008120ec g     O .rwdata	00000004 command_argument_register
00812124 g     O .bss	00000004 buffers
00810e00 g     O .rwdata	00000180 alt_fd_list
0080d45c g     F .text	00000118 find_first_empty_record_in_root_directory
0080f460 g     F .text	00000090 alt_find_dev
0080563c g     F .text	000000bc memcpy
00812120 g     O .bss	00000004 left_buffer
00804a6c g     F .text	00000014 _cleanup_r
00808c78 g     F .text	000000d0 __floatsidf
0080f5e4 g     F .text	00000074 alt_io_redirect
00808bec g     F .text	0000008c __ltdf2
00810054 g       *ABS*	00000000 __DTOR_END__
0080d08c g     F .text	000001a0 find_first_empty_cluster
0080fc50 g     F .text	0000001c altera_nios2_irq_init
0080dafc g     F .text	000000bc alt_up_sd_card_open_dev
0080b168 g     F .text	0000005c alt_up_audio_read_fifo_head
0080a5c0 g     F .text	00000234 altera_avalon_jtag_uart_read
00800714 g     F .text	00000014 malloc
008006cc g     F .text	00000010 __udivsi3
008096f8 g     F .text	000000c0 isatty
008103c0 g     O .rodata	000000c8 __mprec_tens
008053e8 g     F .text	00000008 __locale_charset
0081208c g     O .rwdata	00000004 __malloc_top_pad
008120a4 g     O .rwdata	00000004 __mb_cur_max
008053f0 g     F .text	0000000c _localeconv_r
0080c500 g     F .text	0000009c get_dir_divider_location
00800e28 g     F .text	0000004c _sbrk_r
0080c26c g     F .text	000000a4 filename_to_upper_case
0080e478 g     F .text	00000084 alt_up_sd_card_set_attributes
00805428 g     F .text	00000148 __smakebuf
0081207c g     O .rwdata	00000004 audio_ptr
0080b738 g     F .text	0000022c Read_File_Record_At_Offset
008072a8 g     F .text	00000064 _read_r
00810dcc g     O .rwdata	0000000c __lc_ctype
008120bc g     O .rwdata	00000004 alt_max_fd
0080b1c4 g     F .text	00000064 alt_up_audio_write_fifo_head
008091e4 g     F .text	00000128 __unpack_d
0080cc98 g     F .text	000003f4 find_file_in_directory
0080492c g     F .text	000000e8 fflush
00812084 g     O .rwdata	00000004 __malloc_max_sbrked_mem
0080f658 g     F .text	000001a4 alt_irq_register
0080dc7c g     F .text	00000070 alt_up_sd_card_is_FAT16
00808288 g     F .text	0000006c __adddf3
0080791c g     F .text	00000650 __umoddi3
008098e4 g     F .text	000000f0 lseek
008004bc g     F .text	00000114 playSound
0080c7f4 g     F .text	000004a4 get_home_directory_cluster_for_file
00812070 g     O .rwdata	00000004 audio_dev_reference
00806808 g     F .text	00000550 _realloc_r
008128e8 g       *ABS*	00000000 __bss_end
0080fb50 g     F .text	00000100 alt_tick
00805bf4 g     F .text	000000b4 _lo0bits
0080732c g     F .text	000005f0 __udivdi3
00810398 g     O .rodata	00000028 __mprec_bigtens
0080619c g     F .text	00000064 __mcmp
00812104 g     O .rwdata	00000004 current_sector_index
0080aa48 g     F .text	00000038 alt_up_audio_open_dev
0080ae68 g     F .text	0000006c alt_up_audio_play_r
0080fab4 g     F .text	0000009c alt_alarm_stop
0080b4b8 g     F .text	000000e4 mark_cluster
00812108 g     O .rwdata	00000004 alt_irq_active
010800ec g     F .exceptions	000000dc alt_irq_handler
00810dd8 g     O .rwdata	00000028 alt_dev_null
0080d574 g     F .text	0000015c convert_filename_to_name_extension
0080f2a0 g     F .text	00000018 alt_dcache_flush_all
008120d8 g     O .rwdata	00000004 is_sd_card_formated_as_FAT16
00808d48 g     F .text	000000b0 __fixdfsi
00812078 g     O .rwdata	00000004 sound
0080d22c g     F .text	00000230 find_first_empty_record_in_a_subdirectory
00812120 g       *ABS*	00000000 __ram_rwdata_end
00806d58 g     F .text	00000044 isinf
008120b4 g     O .rwdata	00000008 alt_dev_list
00809d60 g     F .text	00000120 write
008120fc g     O .rwdata	00000004 device_pointer
00810620 g       *ABS*	00000000 __ram_rodata_end
008095dc g     F .text	000000d4 fstat
00808f04 g     F .text	00000050 __lshrdi3
008120a0 g     O .rwdata	00000004 __nlocale_changed
008006dc g     F .text	00000010 __umodsi3
008128e8 g       *ABS*	00000000 end
00805f38 g     F .text	0000012c _pow5mult
0080a0c4 g     F .text	000000b8 altera_avalon_jtag_uart_init
00810054 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080a7f4 g     F .text	00000254 altera_avalon_jtag_uart_write
00812134 g     O .bss	00000020 size_array
00805570 g     F .text	000000cc memchr
00800ecc g     F .text	00001c78 ___vfprintf_internal_r
00804c50 g     F .text	000002b8 _free_r
00802c38 g     F .text	00000140 _wcsrtombs_r
0081209c g     O .rwdata	00000004 __mlocale_changed
00812088 g     O .rwdata	00000004 __malloc_sbrk_base
008001a8 g     F .text	0000003c _start
00812110 g     O .rwdata	00000004 _alt_tick_rate
0080b040 g     F .text	00000128 alt_up_audio_write_fifo
00812114 g     O .rwdata	00000004 _alt_nticks
00809ac4 g     F .text	00000120 read
00809ef8 g     F .text	00000064 alt_sys_init
0080af40 g     F .text	00000100 alt_up_audio_read_fifo
0080ab5c g     F .text	0000004c alt_up_audio_disable_write_interrupt
00802d78 g     F .text	0000003c wcsrtombs
0080a45c g     F .text	0000006c altera_avalon_jtag_uart_close
008006ec g     F .text	00000028 __mulsi3
00810620 g       *ABS*	00000000 __ram_rwdata_start
00810054 g       *ABS*	00000000 __ram_rodata_start
00810620 g     O .rwdata	00000028 __malloc_current_mallinfo
00804f08 g     F .text	00000384 __sfvwrite
0080730c g     F .text	00000020 __negdi2
008120d4 g     O .rwdata	00000004 initialized
00809f8c g     F .text	00000054 altera_avalon_jtag_uart_read_fd
0080fd50 g     F .text	000000c4 alt_get_fd
00812174 g     O .bss	00000014 search_data
0080930c g     F .text	00000114 __fpcmp_parts_d
00807188 g     F .text	0000005c _close_r
0080ab14 g     F .text	00000048 alt_up_audio_enable_write_interrupt
0080ff94 g     F .text	00000070 memcmp
0080a034 g     F .text	00000044 altera_avalon_jtag_uart_close_fd
008128e8 g       *ABS*	00000000 __alt_stack_base
0081206c g     O .rwdata	00000004 device_reference
0080a078 g     F .text	0000004c altera_avalon_jtag_uart_ioctl_fd
0080876c g     F .text	00000250 __divdf3
0080aac8 g     F .text	0000004c alt_up_audio_disable_read_interrupt
00812188 g     O .bss	00000054 boot_sector_data
00810648 g     O .rwdata	00000408 __malloc_av_
0080836c g     F .text	00000400 __muldf3
00806dd0 g     F .text	00000070 __sread
0080fc6c g     F .text	000000e4 alt_find_file
0080f2b8 g     F .text	000000b0 alt_dev_llist_insert
00809a8c g     F .text	0000001c __malloc_lock
00809ca0 g     F .text	000000c0 sbrk
008070c4 g     F .text	000000c4 _calloc_r
0080e580 g     F .text	00000084 alt_up_sd_card_get_size
00812128 g     O .bss	00000004 fifospace
00812120 g       *ABS*	00000000 __bss_start
00805800 g     F .text	0000009c memset
008001e4 g     F .text	000002d8 main
0080ade8 g     F .text	00000080 alt_up_audio_write_fifo_space
008120cc g     O .rwdata	00000004 alt_envp
00812080 g     O .rwdata	00000004 __malloc_max_total_mem
00809fe0 g     F .text	00000054 altera_avalon_jtag_uart_write_fd
0080e4fc g     F .text	00000084 alt_up_sd_card_get_attributes
00806384 g     F .text	00000088 _ulp
0080b228 g     F .text	000000b4 Write_Sector_Data
0080e990 g     F .text	00000600 alt_up_sd_card_write
00806f38 g     F .text	00000014 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008127dc g     O .bss	0000010c _atexit0
00803540 g     F .text	000013ec _dtoa_r
0080073c g     F .text	000006b8 _malloc_r
008120c0 g     O .rwdata	00000004 alt_errno
0080528c g     F .text	000000d4 _fwalk
00800630 g     F .text	00000050 __divsi3
00810494 g     O .rodata	00000014 __thenan_df
00804b2c g     F .text	00000124 _malloc_trim_r
00810054 g       *ABS*	00000000 __CTOR_END__
008120e0 g     O .rwdata	00000004 status_register
00806f4c g     F .text	000000b8 strcmp
008120e8 g     O .rwdata	00000004 command_register
00810054 g       *ABS*	00000000 __flash_rodata_start
00810054 g       *ABS*	00000000 __DTOR_LIST__
00808a48 g     F .text	0000008c __nedf2
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00809ec8 g     F .text	00000030 alt_irq_init
00809c2c g     F .text	00000074 alt_release_fd
0080b408 g     F .text	000000b0 get_cluster_flag
00803208 g     F .text	0000010c __swsetup
008104a8 g     O .rodata	00000100 .hidden __clz_tab
0080b964 g     F .text	00000264 Write_File_Record_At_Offset
00812098 g     O .rwdata	00000004 _PathLocale
0080fe14 g     F .text	0000009c atexit
00807060 g     F .text	00000064 _write_r
0080640c g     F .text	00000124 _b2d
008053fc g     F .text	0000001c setlocale
0080bbc8 g     F .text	000005c4 Check_for_DOS_FAT
0080d6d0 g     F .text	000002f8 create_file
00812094 g     O .rwdata	00000004 _impure_ptr
008120e4 g     O .rwdata	00000004 CSD_register_w0
008120c4 g     O .rwdata	00000004 alt_argc
0080f408 g     F .text	00000058 _do_dtors
00806d9c g     F .text	00000034 isnan
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
01080020 g       .exceptions	00000000 alt_irq_entry
008120ac g     O .rwdata	00000008 alt_fs_list
0080c310 g     F .text	000001f0 check_file_name_for_FAT16_compliance
008120f0 g     O .rwdata	00000004 buffer_memory
0080ad7c g     F .text	0000006c alt_up_audio_record_l
01080020 g       *ABS*	00000000 __ram_exceptions_start
00805418 g     F .text	00000010 localeconv
00805970 g     F .text	00000124 _multadd
008120f4 g     O .rwdata	00000004 fat_partition_offset_in_512_byte_sectors
00812120 g       *ABS*	00000000 _edata
008128e8 g       *ABS*	00000000 _end
008121dc g     O .bss	00000500 active_files
010801c8 g       *ABS*	00000000 __ram_exceptions_end
0080d9c8 g     F .text	00000134 copy_file_record_name_to_string
0080a4c8 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
0080c18c g     F .text	000000e0 Look_for_FAT16
0080aed4 g     F .text	0000006c alt_up_audio_play_l
00806e40 g     F .text	00000080 __swrite
00812090 g     O .rwdata	00000004 __malloc_trim_threshold
0080feb0 g     F .text	000000e4 exit
0080ddb4 g     F .text	0000034c alt_up_sd_card_find_next
00806200 g     F .text	00000184 __mdiff
00800680 g     F .text	0000004c __modsi3
0080b324 g     F .text	000000e4 Read_Sector_Data
01000000 g       *ABS*	00000000 __alt_data_end
01080020 g     F .exceptions	00000000 alt_exception
00810034 g     F .text	00000020 _exit
0080f14c g     F .text	00000154 alt_alarm_start
00808df8 g     F .text	0000010c __muldi3
0080e604 g     F .text	0000038c alt_up_sd_card_read
00807004 g     F .text	0000005c strlen
0080f8e4 g     F .text	00000188 open
00808b60 g     F .text	0000008c __gedf2
0080f4f0 g     F .text	00000018 alt_icache_flush_all
0081210c g     O .rwdata	00000004 alt_priority_mask
00802b44 g     F .text	0000006c __vfprintf_internal
00802db4 g     F .text	00000454 _wctomb_r
008082f4 g     F .text	00000078 __subdf3
00812118 g     O .rwdata	00000008 alt_alarm_list
0080f3b0 g     F .text	00000058 _do_ctors
00802c14 g     F .text	00000024 wcrtomb
00809470 g     F .text	000000fc close
00809800 g     F .text	0000007c alt_load
0080aa80 g     F .text	00000048 alt_up_audio_enable_read_interrupt
00812154 g     O .bss	00000020 fileNames
00808f54 g     F .text	00000290 __pack_d
00812074 g     O .rwdata	00000004 buffer_index
0080c59c g     F .text	00000258 match_file_record_to_name_ext
00806064 g     F .text	00000138 _lshift
00800728 g     F .text	00000014 free
0080594c g     F .text	00000024 _Bfree
0080aba8 g     F .text	00000038 alt_up_audio_read_interrupt_pending


Disassembly of section .entry:

01080000 <__reset>:
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1080000:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1080004:	08406a14 	ori	at,at,424
    jmp r1
 1080008:	0800683a 	jmp	at
	...
Disassembly of section .exceptions:

01080020 <alt_exception>:
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1080020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK

        bltu  sp, et, .Lstack_overflow

#endif

#endif

        stw   ra,  0(sp)
 1080024:	dfc00015 	stw	ra,0(sp)

        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 108002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 108003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1080040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1080044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 108004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 108005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1080064:	dbc01015 	stw	r15,64(sp)

        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 108006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1080070:	dbc01215 	stw	r15,72(sp)
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 108007c:	10000326 	beq	r2,zero,108008c <__ram_exceptions_start+0x6c>
        beq   r4, zero, .Lnot_irq
 1080080:	20000226 	beq	r4,zero,108008c <__ram_exceptions_start+0x6c>
#endif /* ALT_CI_INTERRUPT_VECTOR_N */

        .section .exceptions.irqhandler, "xa"
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1080084:	10800ec0 	call	10800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1080088:	00000306 	br	1080098 <__ram_exceptions_start+0x78>

        /*
         * The interrupt testing code (.exceptions.irqtest) will be
         * linked here here. If an interrupt is active, it calls the HAL
         * IRQ handler (alt_irq_handler()) which successively calls
         * registered interrupt handler(s) until no interrupts remain
         * pending. It then jumps to .exceptions.exit. If there is no
         * interrupt then it continues to .exception.notirq, below.
         */

        .section .exceptions.notirq, "xa"

        /*
         * Prepare to service unimplemtned instructions or traps,
         * each of which is optionally inked into section .exceptions.soft,
         * which will preceed .exceptions.unknown below.
         *
         * Unlike interrupts, we want to skip the exception-causing instructon
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 108008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1080090:	e8bfff17 	ldw	r2,-4(ea)

        /*
         * Other exception handling code, if enabled, will be linked here.
         * This includes unimplemted (multiply/divide) instruction support
         * (a BSP generaton option), and a trap handler (that would typically
         * be augmented with user-specific code). These are not linked in by
         * default.
         */

        /*
         * In the context of linker sections, "unknown" are all exceptions
         * not handled by the built-in handlers above (interupt, and trap or
         * unimplemented instruction decoding, if enabled).
         *
         * Advanced exception types can be serviced by registering a handler.
         * To do so, enable the "Enable Instruction-related Exception API" HAL
         * BSP setting. If this setting is disabled, this handler code will
         * either break (if the debug core is present) or enter an infinite
         * loop because we don't how how to handle the exception.
         */
        .section .exceptions.unknown
#ifdef ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API
        /*
         * The C-based HAL routine alt_instruction_exception_entry() will
         * attempt to service the exception by calling a user-registered
         * exception handler using alt_instruction_exception_register().
         * If no handler was registered it will either break (if the
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry

        /*
         * If alt_instruction_exception_entry() returned, the exception was
         * serviced by a user-registered routine. Its return code (now in r2)
         * indicates whether to re-issue or skip the exception-causing
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
        stw   r15,  72(sp)

#else /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API disabled */

        /*
         * We got here because an instruction-related exception occured, but the
         * handler API was not compiled in. We do not presume to know how to
         * handle it. If the debugger is present, break, otherwise hang.
         *
         *  If you get here then one of the following could have happened:
         *
         *  - An instruction-generated exception occured, and the processor
         *    does not have the extra exceptions feature enabled, or you
         *    have not registered a handler using
         *    alt_instruction_exception_register()
         *
         *  Some examples of instruction-generated exceptions and why they
         *  might occur:
         *
         *  - Your program could have been compiled for a full-featured
         *    Nios II core, but it is running on a smaller core, and
         *    instruction emulation has been disabled by defining
         *    ALT_NO_INSTRUCTION_EMULATION.
         *
         *    You can work around the problem by re-enabling instruction
         *    emulation, or you can figure out why your program is being
         *    compiled for a system other than the one that it is running on.
         *
         *  - Your program has executed a trap instruction, but has not
         *    implemented a handler for this instruction.
         *
         *  - Your program has executed an illegal instruction (one which is
         *    not defined in the instruction set).
         *
         *  - Your processor includes an MMU or MPU, and you have enabled it
         *    before registering an exception handler to service exceptions it
         *    generates.
         *
         * The problem could also be hardware related:
         *  - If your hardware is broken and is generating spurious interrupts
         *    (a peripheral which negates its interrupt output before its
         *    interrupt handler has been executed will cause spurious
         *    interrupts)
         */
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1080094:	003da03a 	break	0
#else
       /*
        *  If there is no debug stub then a BREAK will probably cause a reboot.
        *  An infinate loop will probably be more useful.
        */
0:
        br   0b
#endif /* NIOS2_HAS_DEBUG_STUB */

#endif /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API */

        .section .exceptions.exit.label
.Lexception_exit:

        .section .exceptions.exit, "xa"

        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1080098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 108009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10800c0:	d9c00817 	ldw	r7,32(sp)

#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10800e0:	dbc01017 	ldw	r15,64(sp)

#ifdef ALT_EXCEPTION_STACK

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10800e4:	dec01304 	addi	sp,sp,76

#endif

        /*
         * Return to the interrupted instruction.
         */

        eret
 10800e8:	ef80083a 	eret

010800ec <alt_irq_handler>:
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10800ec:	defff904 	addi	sp,sp,-28
 10800f0:	dfc00615 	stw	ra,24(sp)
 10800f4:	df000515 	stw	fp,20(sp)
 10800f8:	df000504 	addi	fp,sp,20
 10800fc:	0005313a 	rdctl	r2,ipending
 1080100:	e0bfff15 	stw	r2,-4(fp)
 1080104:	e0bfff17 	ldw	r2,-4(fp)
 1080108:	e0bffe15 	stw	r2,-8(fp)
 108010c:	e0bffe17 	ldw	r2,-8(fp)
 1080110:	e0bffb15 	stw	r2,-20(fp)
#ifdef ALT_CI_INTERRUPT_VECTOR
  alt_32 offset;
  char*  alt_irq_base = (char*)alt_irq;
#else
  alt_u32 active;
  alt_u32 mask;
  alt_u32 i;
#endif /* ALT_CI_INTERRUPT_VECTOR */
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();

#ifdef ALT_CI_INTERRUPT_VECTOR
  /*
   * Call the interrupt vector custom instruction using the 
   * ALT_CI_INTERRUPT_VECTOR macro.
   * It returns the offset into the vector table of the lowest-valued pending
   * interrupt (corresponds to highest priority) or a negative value if none.
   * The custom instruction assumes that each table entry is eight bytes.
   */
  while ((offset = ALT_CI_INTERRUPT_VECTOR) >= 0) {
    struct ALT_IRQ_HANDLER* handler_entry = 
      (struct ALT_IRQ_HANDLER*)(alt_irq_base + offset);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    handler_entry->handler(handler_entry->context);
#else
    handler_entry->handler(handler_entry->context, offset >> 3);
#endif
  }
#else /* ALT_CI_INTERRUPT_VECTOR */
  /* 
   * Obtain from the interrupt controller a bit list of pending interrupts,
   * and then process the highest priority interrupt. This process loops, 
   * loading the active interrupt list on each pass until alt_irq_pending() 
   * return zero.
   * 
   * The maximum interrupt latency for the highest priority interrupt is
   * reduced by finding out which interrupts are pending as late as possible.
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();

  do
  {
    i = 0;
 1080114:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1080118:	00800044 	movi	r2,1
 108011c:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Test each bit in turn looking for an active interrupt. Once one is 
     * found, the interrupt handler asigned by a call to alt_irq_register() is
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1080120:	e0fffb17 	ldw	r3,-20(fp)
 1080124:	e0bffc17 	ldw	r2,-16(fp)
 1080128:	1884703a 	and	r2,r3,r2
 108012c:	1005003a 	cmpeq	r2,r2,zero
 1080130:	1000101e 	bne	r2,zero,1080174 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 1080134:	00c02074 	movhi	r3,129
 1080138:	18c9b704 	addi	r3,r3,9948
 108013c:	e0bffd17 	ldw	r2,-12(fp)
 1080140:	100490fa 	slli	r2,r2,3
 1080144:	10c9883a 	add	r4,r2,r3
 1080148:	00c02074 	movhi	r3,129
 108014c:	18c9b704 	addi	r3,r3,9948
 1080150:	e0bffd17 	ldw	r2,-12(fp)
 1080154:	100490fa 	slli	r2,r2,3
 1080158:	10c5883a 	add	r2,r2,r3
 108015c:	10800104 	addi	r2,r2,4
 1080160:	20c00017 	ldw	r3,0(r4)
 1080164:	11000017 	ldw	r4,0(r2)
 1080168:	e17ffd17 	ldw	r5,-12(fp)
 108016c:	183ee83a 	callr	r3
#endif
        break;
 1080170:	00000706 	br	1080190 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 1080174:	e0bffc17 	ldw	r2,-16(fp)
 1080178:	1085883a 	add	r2,r2,r2
 108017c:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1080180:	e0bffd17 	ldw	r2,-12(fp)
 1080184:	10800044 	addi	r2,r2,1
 1080188:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 108018c:	003fe406 	br	1080120 <alt_irq_handler+0x34>
 1080190:	0005313a 	rdctl	r2,ipending
 1080194:	e0bffe15 	stw	r2,-8(fp)
 1080198:	e0bffe17 	ldw	r2,-8(fp)
 108019c:	e0bfff15 	stw	r2,-4(fp)
 10801a0:	e0bfff17 	ldw	r2,-4(fp)
 10801a4:	e0bffb15 	stw	r2,-20(fp)

    active = alt_irq_pending ();
    
  } while (active);
 10801a8:	e0bffb17 	ldw	r2,-20(fp)
 10801ac:	1005003a 	cmpeq	r2,r2,zero
 10801b0:	1000011e 	bne	r2,zero,10801b8 <alt_irq_handler+0xcc>
 10801b4:	003fd706 	br	1080114 <alt_irq_handler+0x28>
#endif /* ALT_CI_INTERRUPT_VECTOR */

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10801b8:	dfc00617 	ldw	ra,24(sp)
 10801bc:	df000517 	ldw	fp,20(sp)
 10801c0:	dec00704 	addi	sp,sp,28
 10801c4:	f800283a 	ret
Disassembly of section .text:

008001a8 <_start>:

    .size __reset, . - __reset
#endif /* Jump to _start */

/*
 * When not using exit, provide an _exit symbol to prevent unresolved
 * references to _exit from the linker script.
 */
#ifdef ALT_NO_EXIT
    .globl _exit
_exit:
#endif

/*************************************************************************\
|                          TEXT SECTION (.text)                           |
\*************************************************************************/

/*
 * Start of the .text section, and also the code entry point when
 * the code is executed by a bootloader rather than directly from reset.
 */
    .section .text
    .align 2

    .globl _start
    .type _start, @function
_start:

/*
 * Initialize the data cache if present (i.e. size > 0) and not
 * optimizing for RTL simulation.
 * RTL simulations can ensure the data cache is already initialized
 * so skipping this loop speeds up RTL simulation.
 */

#if NIOS2_DCACHE_SIZE > 0 && !defined(ALT_SIM_OPTIMIZE)

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    bgt r2, zero, 0b
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 2, 1, 0b, 1b
    .popsection

#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)

#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001a8:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001ac:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001b0:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001b4:	d6a81b14 	ori	gp,gp,41068

#else /* NIOS2_NUM_OF_SHADOW_REG_SETS > 0 */

    /*
     * Set up the GP and SP in all shadow register sets.
     */

    /* 
     * Check current register set number, if CPU resets into a shadow register 
     * set, switch register set to 0 by writing zero to SSTATUS register and 
     * execute an ERET instruction that just jumps to the next PC address 
     * (use the NEXTPC instruction to get this).
     */
    
    rdctl r2, status
    
    /* Get the current register set number (STATUS.CRS). */
    andi r3, r2, NIOS2_STATUS_CRS_MSK
    
    /* Skip switch register set if STATUS.CRS is 0.  */
    beq r3, zero, .Lskip_switch_reg_set
    
    .set nobreak
    
    /* Current register set is non-zero, set SSTATUS to 0. */
    mov sstatus, zero
    
    /* Get next pc and store in ea. */
    nextpc ea
    
    /* Point to instruction after eret. */
    addi ea, ea, 8
    
    /* 
     * Execute ERET instruction that just jumps to the next PC address 
     */
    eret
    
.Lskip_switch_reg_set:    
    mov r2, zero
    
    /* Reset STATUS register */
    wrctl status, r2

    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS
    
    /* Set up the stack pointer in register set 0. */
    movhi sp, %hi(__alt_stack_pointer)
    ori sp, sp, %lo(__alt_stack_pointer)
    
    /* Set up the global pointer in register set 0. */
    movhi gp, %hi(_gp)
    ori gp, gp, %lo(_gp)     

.Lsetup_sp_and_gp_loop:
    /* 
     * Setup GP and SP for shadow register set 
     * from NIOS2_NUM_OF_SHADOW_REG_SETS to 0
     */

    /* Skip if number of register sets is 0. */
    beq r3, zero, .Lno_shadow_register_set


    /* Add previous register set STATUS.PRS by 1 */
    movhi r4, 1
    add r2, r2, r4

    /* Write STATUS */
    wrctl status, r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0

    /* Write the GP in previous register set */
    wrprs gp, gp

    /* Only write the SP in previous register set
     * if using the seperate exception stack. For normal case (single stack),
     * funnel code would read the SP from previous register set.
     */
#ifdef ALT_INTERRUPT_STACK

    movhi et, %hiadj(__alt_interrupt_stack_pointer)
    addi  et, et, %lo(__alt_interrupt_stack_pointer)
    wrprs sp, et

#endif /* ALT_INTERRUPT_STACK */

    /* Decrease number of register set counter by 1 */
    addi r3, r3, -1

    br .Lsetup_sp_and_gp_loop
.Lno_shadow_register_set:

#endif /* NIOS2_NUM_OF_SHADOW_REG_SETS */
/*
 * Clear the BSS if not optimizing for RTL simulation.
 *
 * This uses the symbols: __bss_start and __bss_end, which are defined
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001b8:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001bc:	10884814 	ori	r2,r2,8480

    movhi r3, %hi(__bss_end)
  8001c0:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  8001c4:	18ca3a14 	ori	r3,r3,10472

    beq r2, r3, 1f
  8001c8:	10c00326 	beq	r2,r3,8001d8 <_start+0x30>

0:
    stw zero, (r2)
  8001cc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001d0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001d4:	10fffd36 	bltu	r2,r3,8001cc <_start+0x24>

1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 3, 1, 0b, 1b
    .popsection
#endif /* ALT_SIM_OPTIMIZE */

/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD

#ifdef ALT_STACK_CHECK
    /*
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001d8:	08098000 	call	809800 <alt_load>

#endif /* CALL_ALT_LOAD */

#ifdef ALT_STACK_CHECK
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001dc:	0809a1c0 	call	809a1c <alt_main>

008001e0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001e0:	003fff06 	br	8001e0 <alt_after_alt_main>

008001e4 <main>:
volatile int * audio_ptr = (int *) AUDIO_BASE;
unsigned int fifospace;


int main() {
  8001e4:	defff604 	addi	sp,sp,-40
  8001e8:	dfc00915 	stw	ra,36(sp)
  8001ec:	df000815 	stw	fp,32(sp)
  8001f0:	dc000715 	stw	r16,28(sp)
  8001f4:	df000804 	addi	fp,sp,32

	// these are the varibles that are used in the main loop
	short int file_handle = 1;
  8001f8:	00800044 	movi	r2,1
  8001fc:	e0bff80d 	sth	r2,-32(fp)
	BYTE file_data1;
	BYTE file_data2;
	BYTE file_data3;
	unsigned int  file_data =0;
  800200:	e03ffa15 	stw	zero,-24(fp)
	volatile int * sound_id_ptr = (int *) SOUNDS_IDS_BASE;
  800204:	e03ffb15 	stw	zero,-20(fp)
	volatile int * sound_start_ptr = (int *) START_SOUND_BASE;
  800208:	00804004 	movi	r2,256
  80020c:	e0bffc15 	stw	r2,-16(fp)
	buffers = malloc(NUM_OF_FILES * sizeof(UINT16 *));
  800210:	01000804 	movi	r4,32
  800214:	08007140 	call	800714 <malloc>
  800218:	d0a02e15 	stw	r2,-32584(gp)
	int i;

	//set the file names up so that they can be referenced
	fileNames[0]="notokens.raw";
  80021c:	00c02074 	movhi	r3,129
  800220:	18c85504 	addi	r3,r3,8532
  800224:	00802074 	movhi	r2,129
  800228:	10801504 	addi	r2,r2,84
  80022c:	18800015 	stw	r2,0(r3)
	fileNames[1]="COLLECT.raw";
  800230:	00c02074 	movhi	r3,129
  800234:	18c85504 	addi	r3,r3,8532
  800238:	00802074 	movhi	r2,129
  80023c:	10801904 	addi	r2,r2,100
  800240:	18800115 	stw	r2,4(r3)
	fileNames[2]="error.raw";
  800244:	00c02074 	movhi	r3,129
  800248:	18c85504 	addi	r3,r3,8532
  80024c:	00802074 	movhi	r2,129
  800250:	10801c04 	addi	r2,r2,112
  800254:	18800215 	stw	r2,8(r3)
	fileNames[3]="insert.raw";
  800258:	00c02074 	movhi	r3,129
  80025c:	18c85504 	addi	r3,r3,8532
  800260:	00802074 	movhi	r2,129
  800264:	10801f04 	addi	r2,r2,124
  800268:	18800315 	stw	r2,12(r3)
	fileNames[4]="niceday.raw";
  80026c:	00c02074 	movhi	r3,129
  800270:	18c85504 	addi	r3,r3,8532
  800274:	00802074 	movhi	r2,129
  800278:	10802204 	addi	r2,r2,136
  80027c:	18800415 	stw	r2,16(r3)
	fileNames[5]="outofsrv.raw";
  800280:	00c02074 	movhi	r3,129
  800284:	18c85504 	addi	r3,r3,8532
  800288:	00802074 	movhi	r2,129
  80028c:	10802504 	addi	r2,r2,148
  800290:	18800515 	stw	r2,20(r3)
	fileNames[6]="thnkyou.raw";
  800294:	00c02074 	movhi	r3,129
  800298:	18c85504 	addi	r3,r3,8532
  80029c:	00802074 	movhi	r2,129
  8002a0:	10802904 	addi	r2,r2,164
  8002a4:	18800615 	stw	r2,24(r3)
	fileNames[7]="wait.raw";
  8002a8:	00c02074 	movhi	r3,129
  8002ac:	18c85504 	addi	r3,r3,8532
  8002b0:	00802074 	movhi	r2,129
  8002b4:	10802c04 	addi	r2,r2,176
  8002b8:	18800715 	stw	r2,28(r3)
	//printf("hi there sexy.\n");

	//set up the device references to the audio and the sdcard names as defined in the SOPC
	device_reference = alt_up_sd_card_open_dev("/dev/SDCARD");
  8002bc:	01002074 	movhi	r4,129
  8002c0:	21002f04 	addi	r4,r4,188
  8002c4:	080dafc0 	call	80dafc <alt_up_sd_card_open_dev>
  8002c8:	d0a00015 	stw	r2,-32768(gp)
	audio_dev_reference = alt_up_audio_open_dev("/dev/audio");
  8002cc:	01002074 	movhi	r4,129
  8002d0:	21003204 	addi	r4,r4,200
  8002d4:	080aa480 	call	80aa48 <alt_up_audio_open_dev>
  8002d8:	d0a00115 	stw	r2,-32764(gp)

	if (device_reference != NULL) {			//if the sdcard reference has not failed go into the loop
  8002dc:	d0a00017 	ldw	r2,-32768(gp)
  8002e0:	1005003a 	cmpeq	r2,r2,zero
  8002e4:	1000601e 	bne	r2,zero,800468 <main+0x284>
		if (alt_up_sd_card_is_Present()) {	//check a card is present before trying to load it
  8002e8:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  8002ec:	1005003a 	cmpeq	r2,r2,zero
  8002f0:	10005c1e 	bne	r2,zero,800464 <main+0x280>
			//printf("Card connected.\n");
			if (alt_up_sd_card_is_FAT16()) { //check the file format is fat16 as this is what we can read
  8002f4:	080dc7c0 	call	80dc7c <alt_up_sd_card_is_FAT16>
  8002f8:	1005003a 	cmpeq	r2,r2,zero
  8002fc:	10005a1e 	bne	r2,zero,800468 <main+0x284>
				//printf("FAT16 file system detected.\n");
				for (i =0; i < NUM_OF_FILES;i++)	//load the number of files as defined earlier
  800300:	e03ffd15 	stw	zero,-12(fp)
  800304:	e0bffd17 	ldw	r2,-12(fp)
  800308:	10800208 	cmpgei	r2,r2,8
  80030c:	1000561e 	bne	r2,zero,800468 <main+0x284>
				{
					file_handle = alt_up_sd_card_fopen(fileNames[i], false); //load the file as specifed depending on the iteration if not there do not create
  800310:	00c02074 	movhi	r3,129
  800314:	18c85504 	addi	r3,r3,8532
  800318:	e0bffd17 	ldw	r2,-12(fp)
  80031c:	100490ba 	slli	r2,r2,2
  800320:	10c5883a 	add	r2,r2,r3
  800324:	11000017 	ldw	r4,0(r2)
  800328:	000b883a 	mov	r5,zero
  80032c:	080e1000 	call	80e100 <alt_up_sd_card_fopen>
  800330:	e0bff80d 	sth	r2,-32(fp)
					int size = alt_up_sd_card_get_size(file_handle);		//get the size in bytes of the file
  800334:	e13ff80f 	ldh	r4,-32(fp)
  800338:	080e5800 	call	80e580 <alt_up_sd_card_get_size>
  80033c:	e0bffe15 	stw	r2,-8(fp)
					size_array[i]= (size/3);								//put the number samples needed into an array. to get sample mutiple the bytes to bits so times 8 then divide by 24 to get number of samples this simplfies to divide by 3
  800340:	00c02074 	movhi	r3,129
  800344:	18c84d04 	addi	r3,r3,8500
  800348:	e0bffd17 	ldw	r2,-12(fp)
  80034c:	100490ba 	slli	r2,r2,2
  800350:	10e1883a 	add	r16,r2,r3
  800354:	e13ffe17 	ldw	r4,-8(fp)
  800358:	014000c4 	movi	r5,3
  80035c:	08006300 	call	800630 <__divsi3>
  800360:	80800015 	stw	r2,0(r16)
					//printf("size, %d.\n", size);
					printf("file handle= %d.\n",file_handle);
  800364:	e17ff80f 	ldh	r5,-32(fp)
  800368:	01002074 	movhi	r4,129
  80036c:	21003504 	addi	r4,r4,212
  800370:	0800df40 	call	800df4 <printf>
					fifospace = *(audio_ptr + 1);	 		// read the audio port fifospace register
  800374:	d0a00417 	ldw	r2,-32752(gp)
  800378:	10800104 	addi	r2,r2,4
  80037c:	10800017 	ldw	r2,0(r2)
  800380:	d0a02f15 	stw	r2,-32580(gp)
					buffers[i] = malloc((size*2));			//set the buffer to point to memory location, doubled due to issue with malloc
  800384:	e0bffd17 	ldw	r2,-12(fp)
  800388:	100690ba 	slli	r3,r2,2
  80038c:	d0a02e17 	ldw	r2,-32584(gp)
  800390:	18a1883a 	add	r16,r3,r2
  800394:	e0fffe17 	ldw	r3,-8(fp)
  800398:	1805883a 	mov	r2,r3
  80039c:	10c9883a 	add	r4,r2,r3
  8003a0:	08007140 	call	800714 <malloc>
  8003a4:	80800015 	stw	r2,0(r16)
					left_buffer = buffers[i];				//point left buffer to this location
  8003a8:	e0bffd17 	ldw	r2,-12(fp)
  8003ac:	100690ba 	slli	r3,r2,2
  8003b0:	d0a02e17 	ldw	r2,-32584(gp)
  8003b4:	1885883a 	add	r2,r3,r2
  8003b8:	10800017 	ldw	r2,0(r2)
  8003bc:	d0a02d15 	stw	r2,-32588(gp)
					buffer_index = 0;						//reset buffer index
  8003c0:	d0200215 	stw	zero,-32760(gp)
					while ((buffer_index < size_array[i]) ) //while the number of samples in buffer is less than total number of sample load a sample
  8003c4:	00c02074 	movhi	r3,129
  8003c8:	18c84d04 	addi	r3,r3,8500
  8003cc:	e0bffd17 	ldw	r2,-12(fp)
  8003d0:	100490ba 	slli	r2,r2,2
  8003d4:	10c5883a 	add	r2,r2,r3
  8003d8:	d0e00217 	ldw	r3,-32760(gp)
  8003dc:	10800017 	ldw	r2,0(r2)
  8003e0:	18801c2e 	bgeu	r3,r2,800454 <main+0x270>
					{
						file_data1 = alt_up_sd_card_read(file_handle); //load the 3 bytes indivually
  8003e4:	e13ff80f 	ldh	r4,-32(fp)
  8003e8:	080e6040 	call	80e604 <alt_up_sd_card_read>
  8003ec:	e0bff885 	stb	r2,-30(fp)
						file_data2 = alt_up_sd_card_read(file_handle);
  8003f0:	e13ff80f 	ldh	r4,-32(fp)
  8003f4:	080e6040 	call	80e604 <alt_up_sd_card_read>
  8003f8:	e0bff8c5 	stb	r2,-29(fp)
						file_data3 = alt_up_sd_card_read(file_handle);
  8003fc:	e13ff80f 	ldh	r4,-32(fp)
  800400:	080e6040 	call	80e604 <alt_up_sd_card_read>
  800404:	e0bff905 	stb	r2,-28(fp)
						file_data = ((file_data3<<24 | file_data2<<16) | file_data1<<8);//contatiate the sample bytes back into a sigle sample
  800408:	e0bff903 	ldbu	r2,-28(fp)
  80040c:	1006963a 	slli	r3,r2,24
  800410:	e0bff8c3 	ldbu	r2,-29(fp)
  800414:	1004943a 	slli	r2,r2,16
  800418:	1886b03a 	or	r3,r3,r2
  80041c:	e0bff883 	ldbu	r2,-30(fp)
  800420:	1004923a 	slli	r2,r2,8
  800424:	1884b03a 	or	r2,r3,r2
  800428:	e0bffa15 	stw	r2,-24(fp)
						left_buffer[buffer_index] = file_data; 			//puts this data in the buffer location
  80042c:	d0a00217 	ldw	r2,-32760(gp)
  800430:	100690ba 	slli	r3,r2,2
  800434:	d0a02d17 	ldw	r2,-32588(gp)
  800438:	1887883a 	add	r3,r3,r2
  80043c:	e0bffa17 	ldw	r2,-24(fp)
  800440:	18800015 	stw	r2,0(r3)
						buffer_index++;
  800444:	d0a00217 	ldw	r2,-32760(gp)
  800448:	10800044 	addi	r2,r2,1
  80044c:	d0a00215 	stw	r2,-32760(gp)
  800450:	003fdc06 	br	8003c4 <main+0x1e0>
  800454:	e0bffd17 	ldw	r2,-12(fp)
  800458:	10800044 	addi	r2,r2,1
  80045c:	e0bffd15 	stw	r2,-12(fp)
  800460:	003fa806 	br	800304 <main+0x120>
					}
				}
			}
			else {
				//printf("Unknown file system.\n");
			}
		} else if ((alt_up_sd_card_is_Present() == false)) {
  800464:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
			//printf("Card disconnected.\n");
		}
	}
	printf("sounds buffered and ready to play");
  800468:	01002074 	movhi	r4,129
  80046c:	21003a04 	addi	r4,r4,232
  800470:	0800df40 	call	800df4 <printf>
	while (1)
	{
		//sound = (*sound_id_ptr&0x07);	//get the input from the input port and bitmask to get number
		if ((*(sound_start_ptr)&0x01) ==1)			//if the start is high play the file
  800474:	e0bffc17 	ldw	r2,-16(fp)
  800478:	10800017 	ldw	r2,0(r2)
  80047c:	1080004c 	andi	r2,r2,1
  800480:	1005003a 	cmpeq	r2,r2,zero
  800484:	103ffb1e 	bne	r2,zero,800474 <main+0x290>
		{	sound = (*sound_id_ptr&0x07);
  800488:	e0bffb17 	ldw	r2,-20(fp)
  80048c:	10800017 	ldw	r2,0(r2)
  800490:	108001cc 	andi	r2,r2,7
  800494:	d0a00315 	stw	r2,-32756(gp)
//			printf("sound is %d\n", sound);
			if (sound >=0 && sound < NUM_OF_FILES) //if the id is a valid number then you can play
  800498:	d0a00317 	ldw	r2,-32756(gp)
  80049c:	1004803a 	cmplt	r2,r2,zero
  8004a0:	103ff41e 	bne	r2,zero,800474 <main+0x290>
  8004a4:	d0a00317 	ldw	r2,-32756(gp)
  8004a8:	10800208 	cmpgei	r2,r2,8
  8004ac:	103ff11e 	bne	r2,zero,800474 <main+0x290>
			{
				playSound(sound);					//call the play functions
  8004b0:	d1200317 	ldw	r4,-32756(gp)
  8004b4:	08004bc0 	call	8004bc <playSound>
  8004b8:	003fee06 	br	800474 <main+0x290>

008004bc <playSound>:
			}
		}
	}
	return 0;
}

void playSound (int n)
{
  8004bc:	defffe04 	addi	sp,sp,-8
  8004c0:	df000115 	stw	fp,4(sp)
  8004c4:	df000104 	addi	fp,sp,4
  8004c8:	e13fff15 	stw	r4,-4(fp)
	left_buffer = buffers[n];				//set the buffer to the location of the requested sound file
  8004cc:	e0bfff17 	ldw	r2,-4(fp)
  8004d0:	100690ba 	slli	r3,r2,2
  8004d4:	d0a02e17 	ldw	r2,-32584(gp)
  8004d8:	1885883a 	add	r2,r3,r2
  8004dc:	10800017 	ldw	r2,0(r2)
  8004e0:	d0a02d15 	stw	r2,-32588(gp)
	buffer_index=0;							//reset the buffer_index
  8004e4:	d0200215 	stw	zero,-32760(gp)
	*(audio_ptr) = 0x8;						//clear the old fifo
  8004e8:	d0e00417 	ldw	r3,-32752(gp)
  8004ec:	00800204 	movi	r2,8
  8004f0:	18800015 	stw	r2,0(r3)
	*(audio_ptr) = 0x0;						//stop clearing the fifo
  8004f4:	d0a00417 	ldw	r2,-32752(gp)
  8004f8:	10000015 	stw	zero,0(r2)
	fifospace = *(audio_ptr + 1);	 		// read the audio port fifospace register
  8004fc:	d0a00417 	ldw	r2,-32752(gp)
  800500:	10800104 	addi	r2,r2,4
  800504:	10800017 	ldw	r2,0(r2)
  800508:	d0a02f15 	stw	r2,-32580(gp)
	if ( (fifospace & 0x00FF0000) > BUF_THRESHOLD ) 	// check WSRC
  80050c:	d0a02f17 	ldw	r2,-32580(gp)
  800510:	10803fec 	andhi	r2,r2,255
  800514:	10801870 	cmpltui	r2,r2,97
  800518:	1000281e 	bne	r2,zero,8005bc <playSound+0x100>
	{
		// output data until the buffer is empty or the audio-out FIFO is full
		while ( (buffer_index < size_array[n]) ){	//while the buffer index is less than size of samples
  80051c:	00c02074 	movhi	r3,129
  800520:	18c84d04 	addi	r3,r3,8500
  800524:	e0bfff17 	ldw	r2,-4(fp)
  800528:	100490ba 	slli	r2,r2,2
  80052c:	10c5883a 	add	r2,r2,r3
  800530:	d0e00217 	ldw	r3,-32760(gp)
  800534:	10800017 	ldw	r2,0(r2)
  800538:	18801c2e 	bgeu	r3,r2,8005ac <playSound+0xf0>
			fifospace = *(audio_ptr + 1);	// read the audio port fifospace register
  80053c:	d0a00417 	ldw	r2,-32752(gp)
  800540:	10800104 	addi	r2,r2,4
  800544:	10800017 	ldw	r2,0(r2)
  800548:	d0a02f15 	stw	r2,-32580(gp)
			if((fifospace & 0x00FF0000) >BUF_THRESHOLD){	//if the fifo is not over 75% full
  80054c:	d0a02f17 	ldw	r2,-32580(gp)
  800550:	10803fec 	andhi	r2,r2,255
  800554:	10801870 	cmpltui	r2,r2,97
  800558:	103ff01e 	bne	r2,zero,80051c <playSound+0x60>
				*(audio_ptr + 2) = left_buffer[buffer_index];	//put data in the output fifos
  80055c:	d0a00417 	ldw	r2,-32752(gp)
  800560:	11000204 	addi	r4,r2,8
  800564:	d0a00217 	ldw	r2,-32760(gp)
  800568:	100690ba 	slli	r3,r2,2
  80056c:	d0a02d17 	ldw	r2,-32588(gp)
  800570:	1885883a 	add	r2,r3,r2
  800574:	10800017 	ldw	r2,0(r2)
  800578:	20800015 	stw	r2,0(r4)
				*(audio_ptr + 3) = left_buffer[buffer_index];
  80057c:	d0a00417 	ldw	r2,-32752(gp)
  800580:	11000304 	addi	r4,r2,12
  800584:	d0a00217 	ldw	r2,-32760(gp)
  800588:	100690ba 	slli	r3,r2,2
  80058c:	d0a02d17 	ldw	r2,-32588(gp)
  800590:	1885883a 	add	r2,r3,r2
  800594:	10800017 	ldw	r2,0(r2)
  800598:	20800015 	stw	r2,0(r4)
				++buffer_index;								//increment the buffer index
  80059c:	d0a00217 	ldw	r2,-32760(gp)
  8005a0:	10800044 	addi	r2,r2,1
  8005a4:	d0a00215 	stw	r2,-32760(gp)
  8005a8:	003fdc06 	br	80051c <playSound+0x60>
			}
		}
		fifospace = *(audio_ptr + 1);	// read the audio port fifospace register
  8005ac:	d0a00417 	ldw	r2,-32752(gp)
  8005b0:	10800104 	addi	r2,r2,4
  8005b4:	10800017 	ldw	r2,0(r2)
  8005b8:	d0a02f15 	stw	r2,-32580(gp)
	}
	//printf("file over.\n");
	sound = -1;							//set the sound invalid to prevent a repeated play
  8005bc:	00bfffc4 	movi	r2,-1
  8005c0:	d0a00315 	stw	r2,-32756(gp)

}
  8005c4:	df000117 	ldw	fp,4(sp)
  8005c8:	dec00204 	addi	sp,sp,8
  8005cc:	f800283a 	ret

008005d0 <udivmodsi4>:
  8005d0:	00800044 	movi	r2,1
  8005d4:	000f883a 	mov	r7,zero
  8005d8:	2900082e 	bgeu	r5,r4,8005fc <udivmodsi4+0x2c>
  8005dc:	28000716 	blt	r5,zero,8005fc <udivmodsi4+0x2c>
  8005e0:	294b883a 	add	r5,r5,r5
  8005e4:	1085883a 	add	r2,r2,r2
  8005e8:	29000e2e 	bgeu	r5,r4,800624 <udivmodsi4+0x54>
  8005ec:	1007003a 	cmpeq	r3,r2,zero
  8005f0:	1800081e 	bne	r3,zero,800614 <udivmodsi4+0x44>
  8005f4:	283ffa0e 	bge	r5,zero,8005e0 <udivmodsi4+0x10>
  8005f8:	1800061e 	bne	r3,zero,800614 <udivmodsi4+0x44>
  8005fc:	21400236 	bltu	r4,r5,800608 <udivmodsi4+0x38>
  800600:	2149c83a 	sub	r4,r4,r5
  800604:	388eb03a 	or	r7,r7,r2
  800608:	1004d07a 	srli	r2,r2,1
  80060c:	280ad07a 	srli	r5,r5,1
  800610:	103ffa1e 	bne	r2,zero,8005fc <udivmodsi4+0x2c>
  800614:	3000011e 	bne	r6,zero,80061c <udivmodsi4+0x4c>
  800618:	3809883a 	mov	r4,r7
  80061c:	2005883a 	mov	r2,r4
  800620:	f800283a 	ret
  800624:	1007003a 	cmpeq	r3,r2,zero
  800628:	183ff426 	beq	r3,zero,8005fc <udivmodsi4+0x2c>
  80062c:	003ff906 	br	800614 <udivmodsi4+0x44>

00800630 <__divsi3>:
  800630:	defffe04 	addi	sp,sp,-8
  800634:	dc000015 	stw	r16,0(sp)
  800638:	dfc00115 	stw	ra,4(sp)
  80063c:	000d883a 	mov	r6,zero
  800640:	0021883a 	mov	r16,zero
  800644:	20000816 	blt	r4,zero,800668 <__divsi3+0x38>
  800648:	28000a16 	blt	r5,zero,800674 <__divsi3+0x44>
  80064c:	08005d00 	call	8005d0 <udivmodsi4>
  800650:	80000126 	beq	r16,zero,800658 <__divsi3+0x28>
  800654:	0085c83a 	sub	r2,zero,r2
  800658:	dfc00117 	ldw	ra,4(sp)
  80065c:	dc000017 	ldw	r16,0(sp)
  800660:	dec00204 	addi	sp,sp,8
  800664:	f800283a 	ret
  800668:	0109c83a 	sub	r4,zero,r4
  80066c:	0021003a 	cmpeq	r16,zero,zero
  800670:	283ff60e 	bge	r5,zero,80064c <__divsi3+0x1c>
  800674:	014bc83a 	sub	r5,zero,r5
  800678:	8021003a 	cmpeq	r16,r16,zero
  80067c:	003ff306 	br	80064c <__divsi3+0x1c>

00800680 <__modsi3>:
  800680:	defffe04 	addi	sp,sp,-8
  800684:	dc000015 	stw	r16,0(sp)
  800688:	dfc00115 	stw	ra,4(sp)
  80068c:	01800044 	movi	r6,1
  800690:	0021883a 	mov	r16,zero
  800694:	20000816 	blt	r4,zero,8006b8 <__modsi3+0x38>
  800698:	28000a16 	blt	r5,zero,8006c4 <__modsi3+0x44>
  80069c:	08005d00 	call	8005d0 <udivmodsi4>
  8006a0:	80000126 	beq	r16,zero,8006a8 <__modsi3+0x28>
  8006a4:	0085c83a 	sub	r2,zero,r2
  8006a8:	dfc00117 	ldw	ra,4(sp)
  8006ac:	dc000017 	ldw	r16,0(sp)
  8006b0:	dec00204 	addi	sp,sp,8
  8006b4:	f800283a 	ret
  8006b8:	0109c83a 	sub	r4,zero,r4
  8006bc:	3021883a 	mov	r16,r6
  8006c0:	283ff60e 	bge	r5,zero,80069c <__modsi3+0x1c>
  8006c4:	014bc83a 	sub	r5,zero,r5
  8006c8:	003ff406 	br	80069c <__modsi3+0x1c>

008006cc <__udivsi3>:
  8006cc:	000d883a 	mov	r6,zero
  8006d0:	02002034 	movhi	r8,128
  8006d4:	42017404 	addi	r8,r8,1488
  8006d8:	4000683a 	jmp	r8

008006dc <__umodsi3>:
  8006dc:	01800044 	movi	r6,1
  8006e0:	02002034 	movhi	r8,128
  8006e4:	42017404 	addi	r8,r8,1488
  8006e8:	4000683a 	jmp	r8

008006ec <__mulsi3>:
  8006ec:	0007883a 	mov	r3,zero
  8006f0:	20000626 	beq	r4,zero,80070c <__mulsi3+0x20>
  8006f4:	2080004c 	andi	r2,r4,1
  8006f8:	2008d07a 	srli	r4,r4,1
  8006fc:	10000126 	beq	r2,zero,800704 <__mulsi3+0x18>
  800700:	1947883a 	add	r3,r3,r5
  800704:	294b883a 	add	r5,r5,r5
  800708:	203ffa1e 	bne	r4,zero,8006f4 <__mulsi3+0x8>
  80070c:	1805883a 	mov	r2,r3
  800710:	f800283a 	ret

00800714 <malloc>:
  800714:	200b883a 	mov	r5,r4
  800718:	d1200a17 	ldw	r4,-32728(gp)
  80071c:	02002034 	movhi	r8,128
  800720:	4201cf04 	addi	r8,r8,1852
  800724:	4000683a 	jmp	r8

00800728 <free>:
  800728:	200b883a 	mov	r5,r4
  80072c:	d1200a17 	ldw	r4,-32728(gp)
  800730:	02002034 	movhi	r8,128
  800734:	42131404 	addi	r8,r8,19536
  800738:	4000683a 	jmp	r8

0080073c <_malloc_r>:
  80073c:	defff504 	addi	sp,sp,-44
  800740:	28c002c4 	addi	r3,r5,11
  800744:	00800584 	movi	r2,22
  800748:	dc400715 	stw	r17,28(sp)
  80074c:	dc800615 	stw	r18,24(sp)
  800750:	dfc00a15 	stw	ra,40(sp)
  800754:	df000915 	stw	fp,36(sp)
  800758:	dc000815 	stw	r16,32(sp)
  80075c:	dcc00515 	stw	r19,20(sp)
  800760:	dd000415 	stw	r20,16(sp)
  800764:	dd400315 	stw	r21,12(sp)
  800768:	dd800215 	stw	r22,8(sp)
  80076c:	ddc00115 	stw	r23,4(sp)
  800770:	2025883a 	mov	r18,r4
  800774:	04400404 	movi	r17,16
  800778:	10c0032e 	bgeu	r2,r3,800788 <_malloc_r+0x4c>
  80077c:	00bffe04 	movi	r2,-8
  800780:	18a2703a 	and	r17,r3,r2
  800784:	88000116 	blt	r17,zero,80078c <_malloc_r+0x50>
  800788:	89400d2e 	bgeu	r17,r5,8007c0 <_malloc_r+0x84>
  80078c:	0005883a 	mov	r2,zero
  800790:	dfc00a17 	ldw	ra,40(sp)
  800794:	df000917 	ldw	fp,36(sp)
  800798:	dc000817 	ldw	r16,32(sp)
  80079c:	dc400717 	ldw	r17,28(sp)
  8007a0:	dc800617 	ldw	r18,24(sp)
  8007a4:	dcc00517 	ldw	r19,20(sp)
  8007a8:	dd000417 	ldw	r20,16(sp)
  8007ac:	dd400317 	ldw	r21,12(sp)
  8007b0:	dd800217 	ldw	r22,8(sp)
  8007b4:	ddc00117 	ldw	r23,4(sp)
  8007b8:	dec00b04 	addi	sp,sp,44
  8007bc:	f800283a 	ret
  8007c0:	9009883a 	mov	r4,r18
  8007c4:	0809a8c0 	call	809a8c <__malloc_lock>
  8007c8:	00807dc4 	movi	r2,503
  8007cc:	14401536 	bltu	r2,r17,800824 <_malloc_r+0xe8>
  8007d0:	03402074 	movhi	r13,129
  8007d4:	6b419204 	addi	r13,r13,1608
  8007d8:	8b4d883a 	add	r6,r17,r13
  8007dc:	34000317 	ldw	r16,12(r6)
  8007e0:	8812d0fa 	srli	r9,r17,3
  8007e4:	81803e26 	beq	r16,r6,8008e0 <_malloc_r+0x1a4>
  8007e8:	80c00117 	ldw	r3,4(r16)
  8007ec:	00bfff04 	movi	r2,-4
  8007f0:	82000317 	ldw	r8,12(r16)
  8007f4:	1886703a 	and	r3,r3,r2
  8007f8:	80cb883a 	add	r5,r16,r3
  8007fc:	28800117 	ldw	r2,4(r5)
  800800:	81c00217 	ldw	r7,8(r16)
  800804:	9009883a 	mov	r4,r18
  800808:	10800054 	ori	r2,r2,1
  80080c:	41c00215 	stw	r7,8(r8)
  800810:	28800115 	stw	r2,4(r5)
  800814:	3a000315 	stw	r8,12(r7)
  800818:	0809aa80 	call	809aa8 <__malloc_unlock>
  80081c:	80800204 	addi	r2,r16,8
  800820:	003fdb06 	br	800790 <_malloc_r+0x54>
  800824:	8806d27a 	srli	r3,r17,9
  800828:	8812d0fa 	srli	r9,r17,3
  80082c:	18000926 	beq	r3,zero,800854 <_malloc_r+0x118>
  800830:	00800104 	movi	r2,4
  800834:	10c02f2e 	bgeu	r2,r3,8008f4 <_malloc_r+0x1b8>
  800838:	00800504 	movi	r2,20
  80083c:	1a4016c4 	addi	r9,r3,91
  800840:	10c0042e 	bgeu	r2,r3,800854 <_malloc_r+0x118>
  800844:	00801504 	movi	r2,84
  800848:	10c11536 	bltu	r2,r3,800ca0 <_malloc_r+0x564>
  80084c:	8804d33a 	srli	r2,r17,12
  800850:	12401b84 	addi	r9,r2,110
  800854:	480490fa 	slli	r2,r9,3
  800858:	03402074 	movhi	r13,129
  80085c:	6b419204 	addi	r13,r13,1608
  800860:	134b883a 	add	r5,r2,r13
  800864:	2c000317 	ldw	r16,12(r5)
  800868:	81400926 	beq	r16,r5,800890 <_malloc_r+0x154>
  80086c:	01ffff04 	movi	r7,-4
  800870:	018003c4 	movi	r6,15
  800874:	80800117 	ldw	r2,4(r16)
  800878:	11c6703a 	and	r3,r2,r7
  80087c:	1c49c83a 	sub	r4,r3,r17
  800880:	3100aa16 	blt	r6,r4,800b2c <_malloc_r+0x3f0>
  800884:	2000690e 	bge	r4,zero,800a2c <_malloc_r+0x2f0>
  800888:	84000317 	ldw	r16,12(r16)
  80088c:	817ff91e 	bne	r16,r5,800874 <_malloc_r+0x138>
  800890:	4a400044 	addi	r9,r9,1
  800894:	03002074 	movhi	r12,129
  800898:	63019404 	addi	r12,r12,1616
  80089c:	64000217 	ldw	r16,8(r12)
  8008a0:	83002826 	beq	r16,r12,800944 <_malloc_r+0x208>
  8008a4:	80800117 	ldw	r2,4(r16)
  8008a8:	00ffff04 	movi	r3,-4
  8008ac:	10c6703a 	and	r3,r2,r3
  8008b0:	1c49c83a 	sub	r4,r3,r17
  8008b4:	008003c4 	movi	r2,15
  8008b8:	11006616 	blt	r2,r4,800a54 <_malloc_r+0x318>
  8008bc:	63000315 	stw	r12,12(r12)
  8008c0:	63000215 	stw	r12,8(r12)
  8008c4:	20000e16 	blt	r4,zero,800900 <_malloc_r+0x1c4>
  8008c8:	80c7883a 	add	r3,r16,r3
  8008cc:	18800117 	ldw	r2,4(r3)
  8008d0:	9009883a 	mov	r4,r18
  8008d4:	10800054 	ori	r2,r2,1
  8008d8:	18800115 	stw	r2,4(r3)
  8008dc:	003fce06 	br	800818 <_malloc_r+0xdc>
  8008e0:	81800204 	addi	r6,r16,8
  8008e4:	34000317 	ldw	r16,12(r6)
  8008e8:	81bfbf1e 	bne	r16,r6,8007e8 <_malloc_r+0xac>
  8008ec:	4a400084 	addi	r9,r9,2
  8008f0:	003fe806 	br	800894 <_malloc_r+0x158>
  8008f4:	8804d1ba 	srli	r2,r17,6
  8008f8:	12400e04 	addi	r9,r2,56
  8008fc:	003fd506 	br	800854 <_malloc_r+0x118>
  800900:	00807fc4 	movi	r2,511
  800904:	10c09436 	bltu	r2,r3,800b58 <_malloc_r+0x41c>
  800908:	1808d0fa 	srli	r4,r3,3
  80090c:	61bffe04 	addi	r6,r12,-8
  800910:	00800044 	movi	r2,1
  800914:	200a90fa 	slli	r5,r4,3
  800918:	2007d0ba 	srai	r3,r4,2
  80091c:	31000117 	ldw	r4,4(r6)
  800920:	2991883a 	add	r8,r5,r6
  800924:	41c00217 	ldw	r7,8(r8)
  800928:	10c4983a 	sll	r2,r2,r3
  80092c:	82000315 	stw	r8,12(r16)
  800930:	81c00215 	stw	r7,8(r16)
  800934:	2088b03a 	or	r4,r4,r2
  800938:	3c000315 	stw	r16,12(r7)
  80093c:	31000115 	stw	r4,4(r6)
  800940:	44000215 	stw	r16,8(r8)
  800944:	4807883a 	mov	r3,r9
  800948:	4800a616 	blt	r9,zero,800be4 <_malloc_r+0x4a8>
  80094c:	1807d0ba 	srai	r3,r3,2
  800950:	03402074 	movhi	r13,129
  800954:	6b419204 	addi	r13,r13,1608
  800958:	00800044 	movi	r2,1
  80095c:	10ce983a 	sll	r7,r2,r3
  800960:	69000117 	ldw	r4,4(r13)
  800964:	21c04836 	bltu	r4,r7,800a88 <_malloc_r+0x34c>
  800968:	21c4703a 	and	r2,r4,r7
  80096c:	10000a1e 	bne	r2,zero,800998 <_malloc_r+0x25c>
  800970:	39cf883a 	add	r7,r7,r7
  800974:	00bfff04 	movi	r2,-4
  800978:	4884703a 	and	r2,r9,r2
  80097c:	21c6703a 	and	r3,r4,r7
  800980:	12400104 	addi	r9,r2,4
  800984:	1800041e 	bne	r3,zero,800998 <_malloc_r+0x25c>
  800988:	39cf883a 	add	r7,r7,r7
  80098c:	4a400104 	addi	r9,r9,4
  800990:	21c4703a 	and	r2,r4,r7
  800994:	103ffc26 	beq	r2,zero,800988 <_malloc_r+0x24c>
  800998:	480490fa 	slli	r2,r9,3
  80099c:	4817883a 	mov	r11,r9
  8009a0:	134d883a 	add	r6,r2,r13
  8009a4:	300b883a 	mov	r5,r6
  8009a8:	2c000317 	ldw	r16,12(r5)
  8009ac:	81400926 	beq	r16,r5,8009d4 <_malloc_r+0x298>
  8009b0:	02bfff04 	movi	r10,-4
  8009b4:	020003c4 	movi	r8,15
  8009b8:	80800117 	ldw	r2,4(r16)
  8009bc:	1286703a 	and	r3,r2,r10
  8009c0:	1c49c83a 	sub	r4,r3,r17
  8009c4:	41008016 	blt	r8,r4,800bc8 <_malloc_r+0x48c>
  8009c8:	2000180e 	bge	r4,zero,800a2c <_malloc_r+0x2f0>
  8009cc:	84000317 	ldw	r16,12(r16)
  8009d0:	817ff91e 	bne	r16,r5,8009b8 <_malloc_r+0x27c>
  8009d4:	4a400044 	addi	r9,r9,1
  8009d8:	488000cc 	andi	r2,r9,3
  8009dc:	29400204 	addi	r5,r5,8
  8009e0:	103ff11e 	bne	r2,zero,8009a8 <_malloc_r+0x26c>
  8009e4:	588000cc 	andi	r2,r11,3
  8009e8:	31bffe04 	addi	r6,r6,-8
  8009ec:	5affffc4 	addi	r11,r11,-1
  8009f0:	1000e526 	beq	r2,zero,800d88 <_malloc_r+0x64c>
  8009f4:	30800217 	ldw	r2,8(r6)
  8009f8:	11bffa26 	beq	r2,r6,8009e4 <_malloc_r+0x2a8>
  8009fc:	03402074 	movhi	r13,129
  800a00:	6b419204 	addi	r13,r13,1608
  800a04:	39cf883a 	add	r7,r7,r7
  800a08:	68c00117 	ldw	r3,4(r13)
  800a0c:	19c01e36 	bltu	r3,r7,800a88 <_malloc_r+0x34c>
  800a10:	3800031e 	bne	r7,zero,800a20 <_malloc_r+0x2e4>
  800a14:	00001c06 	br	800a88 <_malloc_r+0x34c>
  800a18:	39cf883a 	add	r7,r7,r7
  800a1c:	4a400104 	addi	r9,r9,4
  800a20:	19c4703a 	and	r2,r3,r7
  800a24:	103ffc26 	beq	r2,zero,800a18 <_malloc_r+0x2dc>
  800a28:	003fdb06 	br	800998 <_malloc_r+0x25c>
  800a2c:	80c7883a 	add	r3,r16,r3
  800a30:	18800117 	ldw	r2,4(r3)
  800a34:	82000317 	ldw	r8,12(r16)
  800a38:	81c00217 	ldw	r7,8(r16)
  800a3c:	10800054 	ori	r2,r2,1
  800a40:	9009883a 	mov	r4,r18
  800a44:	18800115 	stw	r2,4(r3)
  800a48:	41c00215 	stw	r7,8(r8)
  800a4c:	3a000315 	stw	r8,12(r7)
  800a50:	003f7106 	br	800818 <_malloc_r+0xdc>
  800a54:	88800054 	ori	r2,r17,1
  800a58:	844b883a 	add	r5,r16,r17
  800a5c:	80800115 	stw	r2,4(r16)
  800a60:	2905883a 	add	r2,r5,r4
  800a64:	20c00054 	ori	r3,r4,1
  800a68:	61400315 	stw	r5,12(r12)
  800a6c:	61400215 	stw	r5,8(r12)
  800a70:	11000015 	stw	r4,0(r2)
  800a74:	9009883a 	mov	r4,r18
  800a78:	2b000215 	stw	r12,8(r5)
  800a7c:	28c00115 	stw	r3,4(r5)
  800a80:	2b000315 	stw	r12,12(r5)
  800a84:	003f6406 	br	800818 <_malloc_r+0xdc>
  800a88:	6d400217 	ldw	r21,8(r13)
  800a8c:	00bfff04 	movi	r2,-4
  800a90:	a8c00117 	ldw	r3,4(r21)
  800a94:	18ac703a 	and	r22,r3,r2
  800a98:	b449c83a 	sub	r4,r22,r17
  800a9c:	b4400236 	bltu	r22,r17,800aa8 <_malloc_r+0x36c>
  800aa0:	008003c4 	movi	r2,15
  800aa4:	11002316 	blt	r2,r4,800b34 <_malloc_r+0x3f8>
  800aa8:	d0a00817 	ldw	r2,-32736(gp)
  800aac:	073fffc4 	movi	fp,-1
  800ab0:	b02f883a 	mov	r23,r22
  800ab4:	8887883a 	add	r3,r17,r2
  800ab8:	d0a00717 	ldw	r2,-32740(gp)
  800abc:	ada7883a 	add	r19,r21,r22
  800ac0:	1d000404 	addi	r20,r3,16
  800ac4:	17000326 	beq	r2,fp,800ad4 <_malloc_r+0x398>
  800ac8:	18c403c4 	addi	r3,r3,4111
  800acc:	00bc0004 	movi	r2,-4096
  800ad0:	18a8703a 	and	r20,r3,r2
  800ad4:	9009883a 	mov	r4,r18
  800ad8:	a00b883a 	mov	r5,r20
  800adc:	db400015 	stw	r13,0(sp)
  800ae0:	0800e280 	call	800e28 <_sbrk_r>
  800ae4:	1021883a 	mov	r16,r2
  800ae8:	db400017 	ldw	r13,0(sp)
  800aec:	17000426 	beq	r2,fp,800b00 <_malloc_r+0x3c4>
  800af0:	14c03e2e 	bgeu	r2,r19,800bec <_malloc_r+0x4b0>
  800af4:	00802074 	movhi	r2,129
  800af8:	10819204 	addi	r2,r2,1608
  800afc:	a8803b26 	beq	r21,r2,800bec <_malloc_r+0x4b0>
  800b00:	68800217 	ldw	r2,8(r13)
  800b04:	013fff04 	movi	r4,-4
  800b08:	10c00117 	ldw	r3,4(r2)
  800b0c:	1906703a 	and	r3,r3,r4
  800b10:	1c49c83a 	sub	r4,r3,r17
  800b14:	1c400236 	bltu	r3,r17,800b20 <_malloc_r+0x3e4>
  800b18:	008003c4 	movi	r2,15
  800b1c:	11000516 	blt	r2,r4,800b34 <_malloc_r+0x3f8>
  800b20:	9009883a 	mov	r4,r18
  800b24:	0809aa80 	call	809aa8 <__malloc_unlock>
  800b28:	003f1806 	br	80078c <_malloc_r+0x50>
  800b2c:	4a7fffc4 	addi	r9,r9,-1
  800b30:	003f5706 	br	800890 <_malloc_r+0x154>
  800b34:	6c000217 	ldw	r16,8(r13)
  800b38:	88800054 	ori	r2,r17,1
  800b3c:	21000054 	ori	r4,r4,1
  800b40:	8447883a 	add	r3,r16,r17
  800b44:	80800115 	stw	r2,4(r16)
  800b48:	19000115 	stw	r4,4(r3)
  800b4c:	9009883a 	mov	r4,r18
  800b50:	68c00215 	stw	r3,8(r13)
  800b54:	003f3006 	br	800818 <_malloc_r+0xdc>
  800b58:	180ad27a 	srli	r5,r3,9
  800b5c:	1808d0fa 	srli	r4,r3,3
  800b60:	28000426 	beq	r5,zero,800b74 <_malloc_r+0x438>
  800b64:	00800104 	movi	r2,4
  800b68:	11405836 	bltu	r2,r5,800ccc <_malloc_r+0x590>
  800b6c:	1804d1ba 	srli	r2,r3,6
  800b70:	11000e04 	addi	r4,r2,56
  800b74:	200490fa 	slli	r2,r4,3
  800b78:	01402074 	movhi	r5,129
  800b7c:	29419204 	addi	r5,r5,1608
  800b80:	1351883a 	add	r8,r2,r13
  800b84:	41c00217 	ldw	r7,8(r8)
  800b88:	3a006d26 	beq	r7,r8,800d40 <_malloc_r+0x604>
  800b8c:	38800117 	ldw	r2,4(r7)
  800b90:	013fff04 	movi	r4,-4
  800b94:	1104703a 	and	r2,r2,r4
  800b98:	1880052e 	bgeu	r3,r2,800bb0 <_malloc_r+0x474>
  800b9c:	39c00217 	ldw	r7,8(r7)
  800ba0:	3a000326 	beq	r7,r8,800bb0 <_malloc_r+0x474>
  800ba4:	38800117 	ldw	r2,4(r7)
  800ba8:	1104703a 	and	r2,r2,r4
  800bac:	18bffb36 	bltu	r3,r2,800b9c <_malloc_r+0x460>
  800bb0:	3a000317 	ldw	r8,12(r7)
  800bb4:	82000315 	stw	r8,12(r16)
  800bb8:	81c00215 	stw	r7,8(r16)
  800bbc:	3c000315 	stw	r16,12(r7)
  800bc0:	44000215 	stw	r16,8(r8)
  800bc4:	003f5f06 	br	800944 <_malloc_r+0x208>
  800bc8:	82000317 	ldw	r8,12(r16)
  800bcc:	81c00217 	ldw	r7,8(r16)
  800bd0:	88800054 	ori	r2,r17,1
  800bd4:	844b883a 	add	r5,r16,r17
  800bd8:	41c00215 	stw	r7,8(r8)
  800bdc:	3a000315 	stw	r8,12(r7)
  800be0:	003f9e06 	br	800a5c <_malloc_r+0x320>
  800be4:	48c000c4 	addi	r3,r9,3
  800be8:	003f5806 	br	80094c <_malloc_r+0x210>
  800bec:	07002074 	movhi	fp,129
  800bf0:	e7018804 	addi	fp,fp,1568
  800bf4:	e0800017 	ldw	r2,0(fp)
  800bf8:	1505883a 	add	r2,r2,r20
  800bfc:	e0800015 	stw	r2,0(fp)
  800c00:	84c05826 	beq	r16,r19,800d64 <_malloc_r+0x628>
  800c04:	d0e00717 	ldw	r3,-32740(gp)
  800c08:	00bfffc4 	movi	r2,-1
  800c0c:	18805326 	beq	r3,r2,800d5c <_malloc_r+0x620>
  800c10:	e0800017 	ldw	r2,0(fp)
  800c14:	84c7c83a 	sub	r3,r16,r19
  800c18:	10c5883a 	add	r2,r2,r3
  800c1c:	e0800015 	stw	r2,0(fp)
  800c20:	80c001cc 	andi	r3,r16,7
  800c24:	0027883a 	mov	r19,zero
  800c28:	18000326 	beq	r3,zero,800c38 <_malloc_r+0x4fc>
  800c2c:	00800204 	movi	r2,8
  800c30:	10e7c83a 	sub	r19,r2,r3
  800c34:	84e1883a 	add	r16,r16,r19
  800c38:	8505883a 	add	r2,r16,r20
  800c3c:	1083ffcc 	andi	r2,r2,4095
  800c40:	00c40004 	movi	r3,4096
  800c44:	1887c83a 	sub	r3,r3,r2
  800c48:	98e7883a 	add	r19,r19,r3
  800c4c:	9009883a 	mov	r4,r18
  800c50:	980b883a 	mov	r5,r19
  800c54:	db400015 	stw	r13,0(sp)
  800c58:	0800e280 	call	800e28 <_sbrk_r>
  800c5c:	1007883a 	mov	r3,r2
  800c60:	00bfffc4 	movi	r2,-1
  800c64:	db400017 	ldw	r13,0(sp)
  800c68:	18804e26 	beq	r3,r2,800da4 <_malloc_r+0x668>
  800c6c:	e0800017 	ldw	r2,0(fp)
  800c70:	1c07c83a 	sub	r3,r3,r16
  800c74:	1cc9883a 	add	r4,r3,r19
  800c78:	14c5883a 	add	r2,r2,r19
  800c7c:	e0800015 	stw	r2,0(fp)
  800c80:	6c000215 	stw	r16,8(r13)
  800c84:	20800054 	ori	r2,r4,1
  800c88:	ab404426 	beq	r21,r13,800d9c <_malloc_r+0x660>
  800c8c:	014003c4 	movi	r5,15
  800c90:	2d801636 	bltu	r5,r22,800cec <_malloc_r+0x5b0>
  800c94:	00800044 	movi	r2,1
  800c98:	80800115 	stw	r2,4(r16)
  800c9c:	003f9806 	br	800b00 <_malloc_r+0x3c4>
  800ca0:	00805504 	movi	r2,340
  800ca4:	10c00336 	bltu	r2,r3,800cb4 <_malloc_r+0x578>
  800ca8:	8804d3fa 	srli	r2,r17,15
  800cac:	12401dc4 	addi	r9,r2,119
  800cb0:	003ee806 	br	800854 <_malloc_r+0x118>
  800cb4:	00815504 	movi	r2,1364
  800cb8:	02401f84 	movi	r9,126
  800cbc:	10fee536 	bltu	r2,r3,800854 <_malloc_r+0x118>
  800cc0:	8804d4ba 	srli	r2,r17,18
  800cc4:	12401f04 	addi	r9,r2,124
  800cc8:	003ee206 	br	800854 <_malloc_r+0x118>
  800ccc:	00800504 	movi	r2,20
  800cd0:	290016c4 	addi	r4,r5,91
  800cd4:	117fa72e 	bgeu	r2,r5,800b74 <_malloc_r+0x438>
  800cd8:	00801504 	movi	r2,84
  800cdc:	11403a36 	bltu	r2,r5,800dc8 <_malloc_r+0x68c>
  800ce0:	1804d33a 	srli	r2,r3,12
  800ce4:	11001b84 	addi	r4,r2,110
  800ce8:	003fa206 	br	800b74 <_malloc_r+0x438>
  800cec:	80800115 	stw	r2,4(r16)
  800cf0:	a8800117 	ldw	r2,4(r21)
  800cf4:	00fffe04 	movi	r3,-8
  800cf8:	b13ffd04 	addi	r4,r22,-12
  800cfc:	20ee703a 	and	r23,r4,r3
  800d00:	1080004c 	andi	r2,r2,1
  800d04:	15c4b03a 	or	r2,r2,r23
  800d08:	a8800115 	stw	r2,4(r21)
  800d0c:	adc7883a 	add	r3,r21,r23
  800d10:	00800144 	movi	r2,5
  800d14:	18800215 	stw	r2,8(r3)
  800d18:	18800115 	stw	r2,4(r3)
  800d1c:	2dc02436 	bltu	r5,r23,800db0 <_malloc_r+0x674>
  800d20:	e0c00017 	ldw	r3,0(fp)
  800d24:	d0a00617 	ldw	r2,-32744(gp)
  800d28:	10c0012e 	bgeu	r2,r3,800d30 <_malloc_r+0x5f4>
  800d2c:	d0e00615 	stw	r3,-32744(gp)
  800d30:	d0a00517 	ldw	r2,-32748(gp)
  800d34:	10ff722e 	bgeu	r2,r3,800b00 <_malloc_r+0x3c4>
  800d38:	d0e00515 	stw	r3,-32748(gp)
  800d3c:	003f7006 	br	800b00 <_malloc_r+0x3c4>
  800d40:	2005d0ba 	srai	r2,r4,2
  800d44:	00c00044 	movi	r3,1
  800d48:	29000117 	ldw	r4,4(r5)
  800d4c:	1886983a 	sll	r3,r3,r2
  800d50:	20c8b03a 	or	r4,r4,r3
  800d54:	29000115 	stw	r4,4(r5)
  800d58:	003f9606 	br	800bb4 <_malloc_r+0x478>
  800d5c:	d4200715 	stw	r16,-32740(gp)
  800d60:	003faf06 	br	800c20 <_malloc_r+0x4e4>
  800d64:	8083ffcc 	andi	r2,r16,4095
  800d68:	103fa61e 	bne	r2,zero,800c04 <_malloc_r+0x4c8>
  800d6c:	00802074 	movhi	r2,129
  800d70:	10819204 	addi	r2,r2,1608
  800d74:	10c00217 	ldw	r3,8(r2)
  800d78:	a5c9883a 	add	r4,r20,r23
  800d7c:	20800054 	ori	r2,r4,1
  800d80:	18800115 	stw	r2,4(r3)
  800d84:	003fe606 	br	800d20 <_malloc_r+0x5e4>
  800d88:	68800117 	ldw	r2,4(r13)
  800d8c:	01c6303a 	nor	r3,zero,r7
  800d90:	10c4703a 	and	r2,r2,r3
  800d94:	68800115 	stw	r2,4(r13)
  800d98:	003f1806 	br	8009fc <_malloc_r+0x2c0>
  800d9c:	80800115 	stw	r2,4(r16)
  800da0:	003fdf06 	br	800d20 <_malloc_r+0x5e4>
  800da4:	0027883a 	mov	r19,zero
  800da8:	8007883a 	mov	r3,r16
  800dac:	003faf06 	br	800c6c <_malloc_r+0x530>
  800db0:	a9400204 	addi	r5,r21,8
  800db4:	9009883a 	mov	r4,r18
  800db8:	db400015 	stw	r13,0(sp)
  800dbc:	0804c500 	call	804c50 <_free_r>
  800dc0:	db400017 	ldw	r13,0(sp)
  800dc4:	003fd606 	br	800d20 <_malloc_r+0x5e4>
  800dc8:	00805504 	movi	r2,340
  800dcc:	11400336 	bltu	r2,r5,800ddc <_malloc_r+0x6a0>
  800dd0:	1804d3fa 	srli	r2,r3,15
  800dd4:	11001dc4 	addi	r4,r2,119
  800dd8:	003f6606 	br	800b74 <_malloc_r+0x438>
  800ddc:	00815504 	movi	r2,1364
  800de0:	01001f84 	movi	r4,126
  800de4:	117f6336 	bltu	r2,r5,800b74 <_malloc_r+0x438>
  800de8:	1804d4ba 	srli	r2,r3,18
  800dec:	11001f04 	addi	r4,r2,124
  800df0:	003f6006 	br	800b74 <_malloc_r+0x438>

00800df4 <printf>:
  800df4:	defffc04 	addi	sp,sp,-16
  800df8:	dfc00015 	stw	ra,0(sp)
  800dfc:	d9400115 	stw	r5,4(sp)
  800e00:	d9800215 	stw	r6,8(sp)
  800e04:	d9c00315 	stw	r7,12(sp)
  800e08:	d0a00a17 	ldw	r2,-32728(gp)
  800e0c:	200b883a 	mov	r5,r4
  800e10:	d9800104 	addi	r6,sp,4
  800e14:	11000217 	ldw	r4,8(r2)
  800e18:	0802b440 	call	802b44 <__vfprintf_internal>
  800e1c:	dfc00017 	ldw	ra,0(sp)
  800e20:	dec00404 	addi	sp,sp,16
  800e24:	f800283a 	ret

00800e28 <_sbrk_r>:
  800e28:	defffe04 	addi	sp,sp,-8
  800e2c:	dc000015 	stw	r16,0(sp)
  800e30:	2021883a 	mov	r16,r4
  800e34:	2809883a 	mov	r4,r5
  800e38:	dfc00115 	stw	ra,4(sp)
  800e3c:	d0203015 	stw	zero,-32576(gp)
  800e40:	0809ca00 	call	809ca0 <sbrk>
  800e44:	1007883a 	mov	r3,r2
  800e48:	00bfffc4 	movi	r2,-1
  800e4c:	18800526 	beq	r3,r2,800e64 <_sbrk_r+0x3c>
  800e50:	1805883a 	mov	r2,r3
  800e54:	dfc00117 	ldw	ra,4(sp)
  800e58:	dc000017 	ldw	r16,0(sp)
  800e5c:	dec00204 	addi	sp,sp,8
  800e60:	f800283a 	ret
  800e64:	d0a03017 	ldw	r2,-32576(gp)
  800e68:	103ff926 	beq	r2,zero,800e50 <_sbrk_r+0x28>
  800e6c:	80800015 	stw	r2,0(r16)
  800e70:	003ff706 	br	800e50 <_sbrk_r+0x28>

00800e74 <__sprint>:
  800e74:	defffe04 	addi	sp,sp,-8
  800e78:	dc000015 	stw	r16,0(sp)
  800e7c:	dfc00115 	stw	ra,4(sp)
  800e80:	28800217 	ldw	r2,8(r5)
  800e84:	2821883a 	mov	r16,r5
  800e88:	0007883a 	mov	r3,zero
  800e8c:	1000061e 	bne	r2,zero,800ea8 <__sprint+0x34>
  800e90:	1805883a 	mov	r2,r3
  800e94:	28000115 	stw	zero,4(r5)
  800e98:	dfc00117 	ldw	ra,4(sp)
  800e9c:	dc000017 	ldw	r16,0(sp)
  800ea0:	dec00204 	addi	sp,sp,8
  800ea4:	f800283a 	ret
  800ea8:	0804f080 	call	804f08 <__sfvwrite>
  800eac:	1007883a 	mov	r3,r2
  800eb0:	1805883a 	mov	r2,r3
  800eb4:	80000115 	stw	zero,4(r16)
  800eb8:	80000215 	stw	zero,8(r16)
  800ebc:	dfc00117 	ldw	ra,4(sp)
  800ec0:	dc000017 	ldw	r16,0(sp)
  800ec4:	dec00204 	addi	sp,sp,8
  800ec8:	f800283a 	ret

00800ecc <___vfprintf_internal_r>:
  800ecc:	defe4a04 	addi	sp,sp,-1752
  800ed0:	dc01b315 	stw	r16,1740(sp)
  800ed4:	d9419e15 	stw	r5,1656(sp)
  800ed8:	d9019d15 	stw	r4,1652(sp)
  800edc:	dfc1b515 	stw	ra,1748(sp)
  800ee0:	df01b415 	stw	fp,1744(sp)
  800ee4:	dc41b215 	stw	r17,1736(sp)
  800ee8:	dc81b115 	stw	r18,1732(sp)
  800eec:	dcc1b015 	stw	r19,1728(sp)
  800ef0:	dd01af15 	stw	r20,1724(sp)
  800ef4:	dd41ae15 	stw	r21,1720(sp)
  800ef8:	dd81ad15 	stw	r22,1716(sp)
  800efc:	ddc1ac15 	stw	r23,1712(sp)
  800f00:	3021883a 	mov	r16,r6
  800f04:	d9c19f15 	stw	r7,1660(sp)
  800f08:	08054180 	call	805418 <localeconv>
  800f0c:	d8c19e17 	ldw	r3,1656(sp)
  800f10:	10800017 	ldw	r2,0(r2)
  800f14:	000b883a 	mov	r5,zero
  800f18:	1900030b 	ldhu	r4,12(r3)
  800f1c:	d881a315 	stw	r2,1676(sp)
  800f20:	d941a415 	stw	r5,1680(sp)
  800f24:	2080020c 	andi	r2,r4,8
  800f28:	d941a515 	stw	r5,1684(sp)
  800f2c:	d801a615 	stw	zero,1688(sp)
  800f30:	d801a915 	stw	zero,1700(sp)
  800f34:	d801aa15 	stw	zero,1704(sp)
  800f38:	10004226 	beq	r2,zero,801044 <___vfprintf_internal_r+0x178>
  800f3c:	18800417 	ldw	r2,16(r3)
  800f40:	10004026 	beq	r2,zero,801044 <___vfprintf_internal_r+0x178>
  800f44:	20c0068c 	andi	r3,r4,26
  800f48:	00800284 	movi	r2,10
  800f4c:	18804626 	beq	r3,r2,801068 <___vfprintf_internal_r+0x19c>
  800f50:	dc800904 	addi	r18,sp,36
  800f54:	802d883a 	mov	r22,r16
  800f58:	dc800615 	stw	r18,24(sp)
  800f5c:	d8000815 	stw	zero,32(sp)
  800f60:	d8000715 	stw	zero,28(sp)
  800f64:	d801a115 	stw	zero,1668(sp)
  800f68:	b1000003 	ldbu	r4,0(r22)
  800f6c:	b027883a 	mov	r19,r22
  800f70:	20803fcc 	andi	r2,r4,255
  800f74:	1080201c 	xori	r2,r2,128
  800f78:	10bfe004 	addi	r2,r2,-128
  800f7c:	10000826 	beq	r2,zero,800fa0 <___vfprintf_internal_r+0xd4>
  800f80:	00c00944 	movi	r3,37
  800f84:	10c00626 	beq	r2,r3,800fa0 <___vfprintf_internal_r+0xd4>
  800f88:	b5800044 	addi	r22,r22,1
  800f8c:	b1000003 	ldbu	r4,0(r22)
  800f90:	20803fcc 	andi	r2,r4,255
  800f94:	1080201c 	xori	r2,r2,128
  800f98:	10bfe004 	addi	r2,r2,-128
  800f9c:	103ff91e 	bne	r2,zero,800f84 <___vfprintf_internal_r+0xb8>
  800fa0:	b4e3c83a 	sub	r17,r22,r19
  800fa4:	88000f26 	beq	r17,zero,800fe4 <___vfprintf_internal_r+0x118>
  800fa8:	d8800817 	ldw	r2,32(sp)
  800fac:	d8c00717 	ldw	r3,28(sp)
  800fb0:	94c00015 	stw	r19,0(r18)
  800fb4:	1445883a 	add	r2,r2,r17
  800fb8:	18c00044 	addi	r3,r3,1
  800fbc:	d8800815 	stw	r2,32(sp)
  800fc0:	008001c4 	movi	r2,7
  800fc4:	94400115 	stw	r17,4(r18)
  800fc8:	d8c00715 	stw	r3,28(sp)
  800fcc:	94800204 	addi	r18,r18,8
  800fd0:	10c05a16 	blt	r2,r3,80113c <___vfprintf_internal_r+0x270>
  800fd4:	d8c1a117 	ldw	r3,1668(sp)
  800fd8:	b1000003 	ldbu	r4,0(r22)
  800fdc:	1c47883a 	add	r3,r3,r17
  800fe0:	d8c1a115 	stw	r3,1668(sp)
  800fe4:	20803fcc 	andi	r2,r4,255
  800fe8:	1080201c 	xori	r2,r2,128
  800fec:	10bfe004 	addi	r2,r2,-128
  800ff0:	10036d26 	beq	r2,zero,801da8 <___vfprintf_internal_r+0xedc>
  800ff4:	b5800044 	addi	r22,r22,1
  800ff8:	b1000003 	ldbu	r4,0(r22)
  800ffc:	053fffc4 	movi	r20,-1
  801000:	d801a015 	stw	zero,1664(sp)
  801004:	d801a715 	stw	zero,1692(sp)
  801008:	d801a215 	stw	zero,1672(sp)
  80100c:	d8019c05 	stb	zero,1648(sp)
  801010:	27003fcc 	andi	fp,r4,255
  801014:	e700201c 	xori	fp,fp,128
  801018:	e73fe004 	addi	fp,fp,-128
  80101c:	b5800044 	addi	r22,r22,1
  801020:	e0fff804 	addi	r3,fp,-32
  801024:	00801604 	movi	r2,88
  801028:	10c19c36 	bltu	r2,r3,80169c <___vfprintf_internal_r+0x7d0>
  80102c:	180490ba 	slli	r2,r3,2
  801030:	00c02074 	movhi	r3,129
  801034:	18c04b04 	addi	r3,r3,300
  801038:	10c5883a 	add	r2,r2,r3
  80103c:	11000017 	ldw	r4,0(r2)
  801040:	2000683a 	jmp	r4
  801044:	d9019e17 	ldw	r4,1656(sp)
  801048:	08032080 	call	803208 <__swsetup>
  80104c:	00ffffc4 	movi	r3,-1
  801050:	10002d1e 	bne	r2,zero,801108 <___vfprintf_internal_r+0x23c>
  801054:	d9c19e17 	ldw	r7,1656(sp)
  801058:	00800284 	movi	r2,10
  80105c:	3900030b 	ldhu	r4,12(r7)
  801060:	20c0068c 	andi	r3,r4,26
  801064:	18bfba1e 	bne	r3,r2,800f50 <___vfprintf_internal_r+0x84>
  801068:	d8819e17 	ldw	r2,1656(sp)
  80106c:	1280038b 	ldhu	r10,14(r2)
  801070:	50bfffcc 	andi	r2,r10,65535
  801074:	10a0001c 	xori	r2,r2,32768
  801078:	10a00004 	addi	r2,r2,-32768
  80107c:	103fb416 	blt	r2,zero,800f50 <___vfprintf_internal_r+0x84>
  801080:	d8c19e17 	ldw	r3,1656(sp)
  801084:	d9819f17 	ldw	r6,1660(sp)
  801088:	dc407104 	addi	r17,sp,452
  80108c:	1a000717 	ldw	r8,28(r3)
  801090:	1a400917 	ldw	r9,36(r3)
  801094:	20bfff4c 	andi	r2,r4,65533
  801098:	d8c08804 	addi	r3,sp,544
  80109c:	01c10004 	movi	r7,1024
  8010a0:	800b883a 	mov	r5,r16
  8010a4:	8809883a 	mov	r4,r17
  8010a8:	d880740d 	sth	r2,464(sp)
  8010ac:	da80748d 	sth	r10,466(sp)
  8010b0:	da007815 	stw	r8,480(sp)
  8010b4:	da407a15 	stw	r9,488(sp)
  8010b8:	d8c07515 	stw	r3,468(sp)
  8010bc:	d9c07615 	stw	r7,472(sp)
  8010c0:	d8c07115 	stw	r3,452(sp)
  8010c4:	d9c07315 	stw	r7,460(sp)
  8010c8:	d8007715 	stw	zero,476(sp)
  8010cc:	0802b440 	call	802b44 <__vfprintf_internal>
  8010d0:	1021883a 	mov	r16,r2
  8010d4:	10000416 	blt	r2,zero,8010e8 <___vfprintf_internal_r+0x21c>
  8010d8:	8809883a 	mov	r4,r17
  8010dc:	080492c0 	call	80492c <fflush>
  8010e0:	10000126 	beq	r2,zero,8010e8 <___vfprintf_internal_r+0x21c>
  8010e4:	043fffc4 	movi	r16,-1
  8010e8:	d880740b 	ldhu	r2,464(sp)
  8010ec:	1080100c 	andi	r2,r2,64
  8010f0:	10000426 	beq	r2,zero,801104 <___vfprintf_internal_r+0x238>
  8010f4:	d9019e17 	ldw	r4,1656(sp)
  8010f8:	2080030b 	ldhu	r2,12(r4)
  8010fc:	10801014 	ori	r2,r2,64
  801100:	2080030d 	sth	r2,12(r4)
  801104:	8007883a 	mov	r3,r16
  801108:	1805883a 	mov	r2,r3
  80110c:	dfc1b517 	ldw	ra,1748(sp)
  801110:	df01b417 	ldw	fp,1744(sp)
  801114:	dc01b317 	ldw	r16,1740(sp)
  801118:	dc41b217 	ldw	r17,1736(sp)
  80111c:	dc81b117 	ldw	r18,1732(sp)
  801120:	dcc1b017 	ldw	r19,1728(sp)
  801124:	dd01af17 	ldw	r20,1724(sp)
  801128:	dd41ae17 	ldw	r21,1720(sp)
  80112c:	dd81ad17 	ldw	r22,1716(sp)
  801130:	ddc1ac17 	ldw	r23,1712(sp)
  801134:	dec1b604 	addi	sp,sp,1752
  801138:	f800283a 	ret
  80113c:	d9019e17 	ldw	r4,1656(sp)
  801140:	d9c00404 	addi	r7,sp,16
  801144:	39400204 	addi	r5,r7,8
  801148:	0800e740 	call	800e74 <__sprint>
  80114c:	10031e1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801150:	d8800404 	addi	r2,sp,16
  801154:	14800504 	addi	r18,r2,20
  801158:	003f9e06 	br	800fd4 <___vfprintf_internal_r+0x108>
  80115c:	d901a017 	ldw	r4,1664(sp)
  801160:	21000414 	ori	r4,r4,16
  801164:	d901a015 	stw	r4,1664(sp)
  801168:	d941a017 	ldw	r5,1664(sp)
  80116c:	2880080c 	andi	r2,r5,32
  801170:	10042226 	beq	r2,zero,8021fc <___vfprintf_internal_r+0x1330>
  801174:	d8819f17 	ldw	r2,1660(sp)
  801178:	00c00044 	movi	r3,1
  80117c:	14000017 	ldw	r16,0(r2)
  801180:	14400117 	ldw	r17,4(r2)
  801184:	11c00204 	addi	r7,r2,8
  801188:	d9c19f15 	stw	r7,1660(sp)
  80118c:	d8019c05 	stb	zero,1648(sp)
  801190:	dd01a715 	stw	r20,1692(sp)
  801194:	a0000416 	blt	r20,zero,8011a8 <___vfprintf_internal_r+0x2dc>
  801198:	d941a017 	ldw	r5,1664(sp)
  80119c:	00bfdfc4 	movi	r2,-129
  8011a0:	288a703a 	and	r5,r5,r2
  8011a4:	d941a015 	stw	r5,1664(sp)
  8011a8:	d9c00404 	addi	r7,sp,16
  8011ac:	8444b03a 	or	r2,r16,r17
  8011b0:	3cc06c04 	addi	r19,r7,432
  8011b4:	1000021e 	bne	r2,zero,8011c0 <___vfprintf_internal_r+0x2f4>
  8011b8:	d881a717 	ldw	r2,1692(sp)
  8011bc:	10036426 	beq	r2,zero,801f50 <___vfprintf_internal_r+0x1084>
  8011c0:	18c03fcc 	andi	r3,r3,255
  8011c4:	00800044 	movi	r2,1
  8011c8:	1880ec26 	beq	r3,r2,80157c <___vfprintf_internal_r+0x6b0>
  8011cc:	10c34f16 	blt	r2,r3,801f0c <___vfprintf_internal_r+0x1040>
  8011d0:	1800f626 	beq	r3,zero,8015ac <___vfprintf_internal_r+0x6e0>
  8011d4:	04c02074 	movhi	r19,129
  8011d8:	9cc0a404 	addi	r19,r19,656
  8011dc:	9809883a 	mov	r4,r19
  8011e0:	08070040 	call	807004 <strlen>
  8011e4:	102f883a 	mov	r23,r2
  8011e8:	d881a717 	ldw	r2,1692(sp)
  8011ec:	ddc1a815 	stw	r23,1696(sp)
  8011f0:	b880010e 	bge	r23,r2,8011f8 <___vfprintf_internal_r+0x32c>
  8011f4:	d881a815 	stw	r2,1696(sp)
  8011f8:	d8c19c03 	ldbu	r3,1648(sp)
  8011fc:	18023c26 	beq	r3,zero,801af0 <___vfprintf_internal_r+0xc24>
  801200:	d901a817 	ldw	r4,1696(sp)
  801204:	21000044 	addi	r4,r4,1
  801208:	d901a815 	stw	r4,1696(sp)
  80120c:	d881a017 	ldw	r2,1664(sp)
  801210:	1080210c 	andi	r2,r2,132
  801214:	d881ab15 	stw	r2,1708(sp)
  801218:	10002e1e 	bne	r2,zero,8012d4 <___vfprintf_internal_r+0x408>
  80121c:	d941a217 	ldw	r5,1672(sp)
  801220:	d901a817 	ldw	r4,1696(sp)
  801224:	2921c83a 	sub	r16,r5,r4
  801228:	04002a0e 	bge	zero,r16,8012d4 <___vfprintf_internal_r+0x408>
  80122c:	04400404 	movi	r17,16
  801230:	8c001a0e 	bge	r17,r16,80129c <___vfprintf_internal_r+0x3d0>
  801234:	882b883a 	mov	r21,r17
  801238:	050001c4 	movi	r20,7
  80123c:	00000206 	br	801248 <___vfprintf_internal_r+0x37c>
  801240:	843ffc04 	addi	r16,r16,-16
  801244:	ac00150e 	bge	r21,r16,80129c <___vfprintf_internal_r+0x3d0>
  801248:	d8800817 	ldw	r2,32(sp)
  80124c:	d8c00717 	ldw	r3,28(sp)
  801250:	01c02074 	movhi	r7,129
  801254:	39c04304 	addi	r7,r7,268
  801258:	10800404 	addi	r2,r2,16
  80125c:	18c00044 	addi	r3,r3,1
  801260:	91c00015 	stw	r7,0(r18)
  801264:	94400115 	stw	r17,4(r18)
  801268:	d8800815 	stw	r2,32(sp)
  80126c:	d8c00715 	stw	r3,28(sp)
  801270:	94800204 	addi	r18,r18,8
  801274:	a0fff20e 	bge	r20,r3,801240 <___vfprintf_internal_r+0x374>
  801278:	d9019e17 	ldw	r4,1656(sp)
  80127c:	d8800404 	addi	r2,sp,16
  801280:	11400204 	addi	r5,r2,8
  801284:	0800e740 	call	800e74 <__sprint>
  801288:	1002cf1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  80128c:	d8c00404 	addi	r3,sp,16
  801290:	843ffc04 	addi	r16,r16,-16
  801294:	1c800504 	addi	r18,r3,20
  801298:	ac3feb16 	blt	r21,r16,801248 <___vfprintf_internal_r+0x37c>
  80129c:	d8800817 	ldw	r2,32(sp)
  8012a0:	d8c00717 	ldw	r3,28(sp)
  8012a4:	01002074 	movhi	r4,129
  8012a8:	21004304 	addi	r4,r4,268
  8012ac:	1405883a 	add	r2,r2,r16
  8012b0:	18c00044 	addi	r3,r3,1
  8012b4:	d8800815 	stw	r2,32(sp)
  8012b8:	008001c4 	movi	r2,7
  8012bc:	91000015 	stw	r4,0(r18)
  8012c0:	94000115 	stw	r16,4(r18)
  8012c4:	d8c00715 	stw	r3,28(sp)
  8012c8:	94800204 	addi	r18,r18,8
  8012cc:	10c37c16 	blt	r2,r3,8020c0 <___vfprintf_internal_r+0x11f4>
  8012d0:	d8c19c03 	ldbu	r3,1648(sp)
  8012d4:	18803fcc 	andi	r2,r3,255
  8012d8:	1080201c 	xori	r2,r2,128
  8012dc:	10bfe004 	addi	r2,r2,-128
  8012e0:	10020a26 	beq	r2,zero,801b0c <___vfprintf_internal_r+0xc40>
  8012e4:	d9000817 	ldw	r4,32(sp)
  8012e8:	d9400717 	ldw	r5,28(sp)
  8012ec:	d8819c04 	addi	r2,sp,1648
  8012f0:	90800015 	stw	r2,0(r18)
  8012f4:	21000044 	addi	r4,r4,1
  8012f8:	29400044 	addi	r5,r5,1
  8012fc:	00c00044 	movi	r3,1
  801300:	008001c4 	movi	r2,7
  801304:	90c00115 	stw	r3,4(r18)
  801308:	d9000815 	stw	r4,32(sp)
  80130c:	94800204 	addi	r18,r18,8
  801310:	d9400715 	stw	r5,28(sp)
  801314:	11431716 	blt	r2,r5,801f74 <___vfprintf_internal_r+0x10a8>
  801318:	d8c1ab17 	ldw	r3,1708(sp)
  80131c:	00802004 	movi	r2,128
  801320:	18821726 	beq	r3,r2,801b80 <___vfprintf_internal_r+0xcb4>
  801324:	d8c1a717 	ldw	r3,1692(sp)
  801328:	1de1c83a 	sub	r16,r3,r23
  80132c:	0400300e 	bge	zero,r16,8013f0 <___vfprintf_internal_r+0x524>
  801330:	04400404 	movi	r17,16
  801334:	8c001a0e 	bge	r17,r16,8013a0 <___vfprintf_internal_r+0x4d4>
  801338:	882b883a 	mov	r21,r17
  80133c:	050001c4 	movi	r20,7
  801340:	00000206 	br	80134c <___vfprintf_internal_r+0x480>
  801344:	843ffc04 	addi	r16,r16,-16
  801348:	ac00150e 	bge	r21,r16,8013a0 <___vfprintf_internal_r+0x4d4>
  80134c:	d8800817 	ldw	r2,32(sp)
  801350:	d8c00717 	ldw	r3,28(sp)
  801354:	01002074 	movhi	r4,129
  801358:	21004704 	addi	r4,r4,284
  80135c:	10800404 	addi	r2,r2,16
  801360:	18c00044 	addi	r3,r3,1
  801364:	91000015 	stw	r4,0(r18)
  801368:	94400115 	stw	r17,4(r18)
  80136c:	d8800815 	stw	r2,32(sp)
  801370:	d8c00715 	stw	r3,28(sp)
  801374:	94800204 	addi	r18,r18,8
  801378:	a0fff20e 	bge	r20,r3,801344 <___vfprintf_internal_r+0x478>
  80137c:	d9019e17 	ldw	r4,1656(sp)
  801380:	d9c00404 	addi	r7,sp,16
  801384:	39400204 	addi	r5,r7,8
  801388:	0800e740 	call	800e74 <__sprint>
  80138c:	10028e1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801390:	d8800404 	addi	r2,sp,16
  801394:	843ffc04 	addi	r16,r16,-16
  801398:	14800504 	addi	r18,r2,20
  80139c:	ac3feb16 	blt	r21,r16,80134c <___vfprintf_internal_r+0x480>
  8013a0:	d8800817 	ldw	r2,32(sp)
  8013a4:	d8c00717 	ldw	r3,28(sp)
  8013a8:	01002074 	movhi	r4,129
  8013ac:	21004704 	addi	r4,r4,284
  8013b0:	1405883a 	add	r2,r2,r16
  8013b4:	18c00044 	addi	r3,r3,1
  8013b8:	d8800815 	stw	r2,32(sp)
  8013bc:	008001c4 	movi	r2,7
  8013c0:	91000015 	stw	r4,0(r18)
  8013c4:	94000115 	stw	r16,4(r18)
  8013c8:	d8c00715 	stw	r3,28(sp)
  8013cc:	94800204 	addi	r18,r18,8
  8013d0:	10c0070e 	bge	r2,r3,8013f0 <___vfprintf_internal_r+0x524>
  8013d4:	d9019e17 	ldw	r4,1656(sp)
  8013d8:	d9c00404 	addi	r7,sp,16
  8013dc:	39400204 	addi	r5,r7,8
  8013e0:	0800e740 	call	800e74 <__sprint>
  8013e4:	1002781e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  8013e8:	d8800404 	addi	r2,sp,16
  8013ec:	14800504 	addi	r18,r2,20
  8013f0:	d8c1a017 	ldw	r3,1664(sp)
  8013f4:	1880400c 	andi	r2,r3,256
  8013f8:	1002161e 	bne	r2,zero,801c54 <___vfprintf_internal_r+0xd88>
  8013fc:	d8800817 	ldw	r2,32(sp)
  801400:	d8c00717 	ldw	r3,28(sp)
  801404:	94c00015 	stw	r19,0(r18)
  801408:	15c5883a 	add	r2,r2,r23
  80140c:	18c00044 	addi	r3,r3,1
  801410:	d8800815 	stw	r2,32(sp)
  801414:	008001c4 	movi	r2,7
  801418:	95c00115 	stw	r23,4(r18)
  80141c:	d8c00715 	stw	r3,28(sp)
  801420:	94800204 	addi	r18,r18,8
  801424:	10c25d16 	blt	r2,r3,801d9c <___vfprintf_internal_r+0xed0>
  801428:	d8c1a017 	ldw	r3,1664(sp)
  80142c:	1880010c 	andi	r2,r3,4
  801430:	10003126 	beq	r2,zero,8014f8 <___vfprintf_internal_r+0x62c>
  801434:	d941a217 	ldw	r5,1672(sp)
  801438:	d901a817 	ldw	r4,1696(sp)
  80143c:	2921c83a 	sub	r16,r5,r4
  801440:	04002d0e 	bge	zero,r16,8014f8 <___vfprintf_internal_r+0x62c>
  801444:	04400404 	movi	r17,16
  801448:	8c001a0e 	bge	r17,r16,8014b4 <___vfprintf_internal_r+0x5e8>
  80144c:	8829883a 	mov	r20,r17
  801450:	04c001c4 	movi	r19,7
  801454:	00000206 	br	801460 <___vfprintf_internal_r+0x594>
  801458:	843ffc04 	addi	r16,r16,-16
  80145c:	a400150e 	bge	r20,r16,8014b4 <___vfprintf_internal_r+0x5e8>
  801460:	d8800817 	ldw	r2,32(sp)
  801464:	d8c00717 	ldw	r3,28(sp)
  801468:	01c02074 	movhi	r7,129
  80146c:	39c04304 	addi	r7,r7,268
  801470:	10800404 	addi	r2,r2,16
  801474:	18c00044 	addi	r3,r3,1
  801478:	91c00015 	stw	r7,0(r18)
  80147c:	94400115 	stw	r17,4(r18)
  801480:	d8800815 	stw	r2,32(sp)
  801484:	d8c00715 	stw	r3,28(sp)
  801488:	94800204 	addi	r18,r18,8
  80148c:	98fff20e 	bge	r19,r3,801458 <___vfprintf_internal_r+0x58c>
  801490:	d9019e17 	ldw	r4,1656(sp)
  801494:	d8800404 	addi	r2,sp,16
  801498:	11400204 	addi	r5,r2,8
  80149c:	0800e740 	call	800e74 <__sprint>
  8014a0:	1002491e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  8014a4:	d8c00404 	addi	r3,sp,16
  8014a8:	843ffc04 	addi	r16,r16,-16
  8014ac:	1c800504 	addi	r18,r3,20
  8014b0:	a43feb16 	blt	r20,r16,801460 <___vfprintf_internal_r+0x594>
  8014b4:	d8800817 	ldw	r2,32(sp)
  8014b8:	d8c00717 	ldw	r3,28(sp)
  8014bc:	01002074 	movhi	r4,129
  8014c0:	21004304 	addi	r4,r4,268
  8014c4:	1405883a 	add	r2,r2,r16
  8014c8:	18c00044 	addi	r3,r3,1
  8014cc:	d8800815 	stw	r2,32(sp)
  8014d0:	008001c4 	movi	r2,7
  8014d4:	91000015 	stw	r4,0(r18)
  8014d8:	94000115 	stw	r16,4(r18)
  8014dc:	d8c00715 	stw	r3,28(sp)
  8014e0:	10c0050e 	bge	r2,r3,8014f8 <___vfprintf_internal_r+0x62c>
  8014e4:	d9019e17 	ldw	r4,1656(sp)
  8014e8:	d9c00404 	addi	r7,sp,16
  8014ec:	39400204 	addi	r5,r7,8
  8014f0:	0800e740 	call	800e74 <__sprint>
  8014f4:	1002341e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  8014f8:	d881a817 	ldw	r2,1696(sp)
  8014fc:	d8c1a217 	ldw	r3,1672(sp)
  801500:	10c0010e 	bge	r2,r3,801508 <___vfprintf_internal_r+0x63c>
  801504:	1805883a 	mov	r2,r3
  801508:	d901a117 	ldw	r4,1668(sp)
  80150c:	2089883a 	add	r4,r4,r2
  801510:	d8800817 	ldw	r2,32(sp)
  801514:	d901a115 	stw	r4,1668(sp)
  801518:	1002361e 	bne	r2,zero,801df4 <___vfprintf_internal_r+0xf28>
  80151c:	d8c1aa17 	ldw	r3,1704(sp)
  801520:	d8800404 	addi	r2,sp,16
  801524:	d8000715 	stw	zero,28(sp)
  801528:	14800504 	addi	r18,r2,20
  80152c:	183e8e26 	beq	r3,zero,800f68 <___vfprintf_internal_r+0x9c>
  801530:	1809883a 	mov	r4,r3
  801534:	08007280 	call	800728 <free>
  801538:	d801aa15 	stw	zero,1704(sp)
  80153c:	003e8a06 	br	800f68 <___vfprintf_internal_r+0x9c>
  801540:	8009883a 	mov	r4,r16
  801544:	880b883a 	mov	r5,r17
  801548:	01800284 	movi	r6,10
  80154c:	000f883a 	mov	r7,zero
  801550:	080791c0 	call	80791c <__umoddi3>
  801554:	11000c04 	addi	r4,r2,48
  801558:	9cffffc4 	addi	r19,r19,-1
  80155c:	99000005 	stb	r4,0(r19)
  801560:	880b883a 	mov	r5,r17
  801564:	8009883a 	mov	r4,r16
  801568:	01800284 	movi	r6,10
  80156c:	000f883a 	mov	r7,zero
  801570:	080732c0 	call	80732c <__udivdi3>
  801574:	1021883a 	mov	r16,r2
  801578:	1823883a 	mov	r17,r3
  80157c:	88800068 	cmpgeui	r2,r17,1
  801580:	103fef1e 	bne	r2,zero,801540 <___vfprintf_internal_r+0x674>
  801584:	8800021e 	bne	r17,zero,801590 <___vfprintf_internal_r+0x6c4>
  801588:	00800244 	movi	r2,9
  80158c:	143fec36 	bltu	r2,r16,801540 <___vfprintf_internal_r+0x674>
  801590:	9cffffc4 	addi	r19,r19,-1
  801594:	80800c04 	addi	r2,r16,48
  801598:	98800005 	stb	r2,0(r19)
  80159c:	d9400404 	addi	r5,sp,16
  8015a0:	2cc5c83a 	sub	r2,r5,r19
  8015a4:	15c06c04 	addi	r23,r2,432
  8015a8:	003f0f06 	br	8011e8 <___vfprintf_internal_r+0x31c>
  8015ac:	8008d0fa 	srli	r4,r16,3
  8015b0:	880a977a 	slli	r5,r17,29
  8015b4:	8806d0fa 	srli	r3,r17,3
  8015b8:	818001cc 	andi	r6,r16,7
  8015bc:	2904b03a 	or	r2,r5,r4
  8015c0:	9cffffc4 	addi	r19,r19,-1
  8015c4:	31800c04 	addi	r6,r6,48
  8015c8:	10c8b03a 	or	r4,r2,r3
  8015cc:	99800005 	stb	r6,0(r19)
  8015d0:	1021883a 	mov	r16,r2
  8015d4:	1823883a 	mov	r17,r3
  8015d8:	203ff41e 	bne	r4,zero,8015ac <___vfprintf_internal_r+0x6e0>
  8015dc:	d8c1a017 	ldw	r3,1664(sp)
  8015e0:	1880004c 	andi	r2,r3,1
  8015e4:	103fed26 	beq	r2,zero,80159c <___vfprintf_internal_r+0x6d0>
  8015e8:	00800c04 	movi	r2,48
  8015ec:	30bfeb26 	beq	r6,r2,80159c <___vfprintf_internal_r+0x6d0>
  8015f0:	9cffffc4 	addi	r19,r19,-1
  8015f4:	003fe806 	br	801598 <___vfprintf_internal_r+0x6cc>
  8015f8:	d881a017 	ldw	r2,1664(sp)
  8015fc:	10800414 	ori	r2,r2,16
  801600:	d881a015 	stw	r2,1664(sp)
  801604:	d8c1a017 	ldw	r3,1664(sp)
  801608:	1880080c 	andi	r2,r3,32
  80160c:	1002e626 	beq	r2,zero,8021a8 <___vfprintf_internal_r+0x12dc>
  801610:	d8819f17 	ldw	r2,1660(sp)
  801614:	0007883a 	mov	r3,zero
  801618:	14000017 	ldw	r16,0(r2)
  80161c:	14400117 	ldw	r17,4(r2)
  801620:	11000204 	addi	r4,r2,8
  801624:	d9019f15 	stw	r4,1660(sp)
  801628:	003ed806 	br	80118c <___vfprintf_internal_r+0x2c0>
  80162c:	d9c1a017 	ldw	r7,1664(sp)
  801630:	39c00414 	ori	r7,r7,16
  801634:	d9c1a015 	stw	r7,1664(sp)
  801638:	d8c1a017 	ldw	r3,1664(sp)
  80163c:	1880080c 	andi	r2,r3,32
  801640:	1002e326 	beq	r2,zero,8021d0 <___vfprintf_internal_r+0x1304>
  801644:	d8819f17 	ldw	r2,1660(sp)
  801648:	14400117 	ldw	r17,4(r2)
  80164c:	11000204 	addi	r4,r2,8
  801650:	14000017 	ldw	r16,0(r2)
  801654:	d9019f15 	stw	r4,1660(sp)
  801658:	88011716 	blt	r17,zero,801ab8 <___vfprintf_internal_r+0xbec>
  80165c:	00c00044 	movi	r3,1
  801660:	003ecb06 	br	801190 <___vfprintf_internal_r+0x2c4>
  801664:	d8819f17 	ldw	r2,1660(sp)
  801668:	d9c19f17 	ldw	r7,1660(sp)
  80166c:	10800017 	ldw	r2,0(r2)
  801670:	39c00104 	addi	r7,r7,4
  801674:	d9c19f15 	stw	r7,1660(sp)
  801678:	d881a215 	stw	r2,1672(sp)
  80167c:	10010c0e 	bge	r2,zero,801ab0 <___vfprintf_internal_r+0xbe4>
  801680:	0085c83a 	sub	r2,zero,r2
  801684:	d881a215 	stw	r2,1672(sp)
  801688:	d881a017 	ldw	r2,1664(sp)
  80168c:	b1000003 	ldbu	r4,0(r22)
  801690:	10800114 	ori	r2,r2,4
  801694:	d881a015 	stw	r2,1664(sp)
  801698:	003e5d06 	br	801010 <___vfprintf_internal_r+0x144>
  80169c:	e001c226 	beq	fp,zero,801da8 <___vfprintf_internal_r+0xedc>
  8016a0:	d9c00404 	addi	r7,sp,16
  8016a4:	3cc01504 	addi	r19,r7,84
  8016a8:	9f000005 	stb	fp,0(r19)
  8016ac:	05c00044 	movi	r23,1
  8016b0:	d8019c05 	stb	zero,1648(sp)
  8016b4:	003ecc06 	br	8011e8 <___vfprintf_internal_r+0x31c>
  8016b8:	d8819f17 	ldw	r2,1660(sp)
  8016bc:	14c00017 	ldw	r19,0(r2)
  8016c0:	11400104 	addi	r5,r2,4
  8016c4:	d8019c05 	stb	zero,1648(sp)
  8016c8:	d9419f15 	stw	r5,1660(sp)
  8016cc:	9803db26 	beq	r19,zero,80263c <___vfprintf_internal_r+0x1770>
  8016d0:	008014c4 	movi	r2,83
  8016d4:	e0800326 	beq	fp,r2,8016e4 <___vfprintf_internal_r+0x818>
  8016d8:	d9c1a017 	ldw	r7,1664(sp)
  8016dc:	3880040c 	andi	r2,r7,16
  8016e0:	10035826 	beq	r2,zero,802444 <___vfprintf_internal_r+0x1578>
  8016e4:	d9019904 	addi	r4,sp,1636
  8016e8:	000b883a 	mov	r5,zero
  8016ec:	01800204 	movi	r6,8
  8016f0:	dcc19b15 	stw	r19,1644(sp)
  8016f4:	0023883a 	mov	r17,zero
  8016f8:	002f883a 	mov	r23,zero
  8016fc:	08058000 	call	805800 <memset>
  801700:	a004c616 	blt	r20,zero,802a1c <___vfprintf_internal_r+0x1b50>
  801704:	057fffc4 	movi	r21,-1
  801708:	880490ba 	slli	r2,r17,2
  80170c:	d8c19b17 	ldw	r3,1644(sp)
  801710:	10c5883a 	add	r2,r2,r3
  801714:	11800017 	ldw	r6,0(r2)
  801718:	30000b26 	beq	r6,zero,801748 <___vfprintf_internal_r+0x87c>
  80171c:	d9019d17 	ldw	r4,1652(sp)
  801720:	d8800404 	addi	r2,sp,16
  801724:	11401504 	addi	r5,r2,84
  801728:	d9c19904 	addi	r7,sp,1636
  80172c:	0802bb00 	call	802bb0 <_wcrtomb_r>
  801730:	1541a526 	beq	r2,r21,801dc8 <___vfprintf_internal_r+0xefc>
  801734:	15c5883a 	add	r2,r2,r23
  801738:	a0800316 	blt	r20,r2,801748 <___vfprintf_internal_r+0x87c>
  80173c:	102f883a 	mov	r23,r2
  801740:	8c400044 	addi	r17,r17,1
  801744:	153ff01e 	bne	r2,r20,801708 <___vfprintf_internal_r+0x83c>
  801748:	b83ea726 	beq	r23,zero,8011e8 <___vfprintf_internal_r+0x31c>
  80174c:	d9019d17 	ldw	r4,1652(sp)
  801750:	b9400044 	addi	r5,r23,1
  801754:	080073c0 	call	80073c <_malloc_r>
  801758:	d881aa15 	stw	r2,1704(sp)
  80175c:	10019a26 	beq	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801760:	d9019904 	addi	r4,sp,1636
  801764:	000b883a 	mov	r5,zero
  801768:	01800204 	movi	r6,8
  80176c:	08058000 	call	805800 <memset>
  801770:	d9019d17 	ldw	r4,1652(sp)
  801774:	d941aa17 	ldw	r5,1704(sp)
  801778:	d8819904 	addi	r2,sp,1636
  80177c:	b80f883a 	mov	r7,r23
  801780:	d9819b04 	addi	r6,sp,1644
  801784:	d8800015 	stw	r2,0(sp)
  801788:	0802c380 	call	802c38 <_wcsrtombs_r>
  80178c:	15c18e1e 	bne	r2,r23,801dc8 <___vfprintf_internal_r+0xefc>
  801790:	d8c1aa17 	ldw	r3,1704(sp)
  801794:	1dc5883a 	add	r2,r3,r23
  801798:	1827883a 	mov	r19,r3
  80179c:	10000005 	stb	zero,0(r2)
  8017a0:	003e9106 	br	8011e8 <___vfprintf_internal_r+0x31c>
  8017a4:	d8c1a017 	ldw	r3,1664(sp)
  8017a8:	1880080c 	andi	r2,r3,32
  8017ac:	10030826 	beq	r2,zero,8023d0 <___vfprintf_internal_r+0x1504>
  8017b0:	d8819f17 	ldw	r2,1660(sp)
  8017b4:	d8c1a117 	ldw	r3,1668(sp)
  8017b8:	11400017 	ldw	r5,0(r2)
  8017bc:	1809d7fa 	srai	r4,r3,31
  8017c0:	11c00104 	addi	r7,r2,4
  8017c4:	d9c19f15 	stw	r7,1660(sp)
  8017c8:	29000115 	stw	r4,4(r5)
  8017cc:	28c00015 	stw	r3,0(r5)
  8017d0:	003de506 	br	800f68 <___vfprintf_internal_r+0x9c>
  8017d4:	b7000007 	ldb	fp,0(r22)
  8017d8:	00800a84 	movi	r2,42
  8017dc:	b5800044 	addi	r22,r22,1
  8017e0:	e084d026 	beq	fp,r2,802b24 <___vfprintf_internal_r+0x1c58>
  8017e4:	e0bff404 	addi	r2,fp,-48
  8017e8:	00c00244 	movi	r3,9
  8017ec:	0021883a 	mov	r16,zero
  8017f0:	18800a36 	bltu	r3,r2,80181c <___vfprintf_internal_r+0x950>
  8017f4:	1823883a 	mov	r17,r3
  8017f8:	8009883a 	mov	r4,r16
  8017fc:	01400284 	movi	r5,10
  801800:	08006ec0 	call	8006ec <__mulsi3>
  801804:	1705883a 	add	r2,r2,fp
  801808:	b7000007 	ldb	fp,0(r22)
  80180c:	143ff404 	addi	r16,r2,-48
  801810:	b5800044 	addi	r22,r22,1
  801814:	e0bff404 	addi	r2,fp,-48
  801818:	88bff72e 	bgeu	r17,r2,8017f8 <___vfprintf_internal_r+0x92c>
  80181c:	00bfffc4 	movi	r2,-1
  801820:	8029883a 	mov	r20,r16
  801824:	80bdfe0e 	bge	r16,r2,801020 <___vfprintf_internal_r+0x154>
  801828:	1029883a 	mov	r20,r2
  80182c:	003dfc06 	br	801020 <___vfprintf_internal_r+0x154>
  801830:	b1000003 	ldbu	r4,0(r22)
  801834:	00801b04 	movi	r2,108
  801838:	20c03fcc 	andi	r3,r4,255
  80183c:	18c0201c 	xori	r3,r3,128
  801840:	18ffe004 	addi	r3,r3,-128
  801844:	18835426 	beq	r3,r2,802598 <___vfprintf_internal_r+0x16cc>
  801848:	d941a017 	ldw	r5,1664(sp)
  80184c:	29400414 	ori	r5,r5,16
  801850:	d941a015 	stw	r5,1664(sp)
  801854:	003dee06 	br	801010 <___vfprintf_internal_r+0x144>
  801858:	b1000003 	ldbu	r4,0(r22)
  80185c:	00800ac4 	movi	r2,43
  801860:	d8819c05 	stb	r2,1648(sp)
  801864:	003dea06 	br	801010 <___vfprintf_internal_r+0x144>
  801868:	d9c1a017 	ldw	r7,1664(sp)
  80186c:	b1000003 	ldbu	r4,0(r22)
  801870:	39c00814 	ori	r7,r7,32
  801874:	d9c1a015 	stw	r7,1664(sp)
  801878:	003de506 	br	801010 <___vfprintf_internal_r+0x144>
  80187c:	d8819f17 	ldw	r2,1660(sp)
  801880:	01002074 	movhi	r4,129
  801884:	2100ab04 	addi	r4,r4,684
  801888:	0023883a 	mov	r17,zero
  80188c:	11c00104 	addi	r7,r2,4
  801890:	14000017 	ldw	r16,0(r2)
  801894:	d881a017 	ldw	r2,1664(sp)
  801898:	00c00084 	movi	r3,2
  80189c:	07001e04 	movi	fp,120
  8018a0:	10800094 	ori	r2,r2,2
  8018a4:	d9c19f15 	stw	r7,1660(sp)
  8018a8:	d881a015 	stw	r2,1664(sp)
  8018ac:	d901a915 	stw	r4,1700(sp)
  8018b0:	003e3606 	br	80118c <___vfprintf_internal_r+0x2c0>
  8018b4:	d941a017 	ldw	r5,1664(sp)
  8018b8:	01002074 	movhi	r4,129
  8018bc:	2100ab04 	addi	r4,r4,684
  8018c0:	d901a915 	stw	r4,1700(sp)
  8018c4:	2880080c 	andi	r2,r5,32
  8018c8:	10003326 	beq	r2,zero,801998 <___vfprintf_internal_r+0xacc>
  8018cc:	d8819f17 	ldw	r2,1660(sp)
  8018d0:	14000017 	ldw	r16,0(r2)
  8018d4:	14400117 	ldw	r17,4(r2)
  8018d8:	11c00204 	addi	r7,r2,8
  8018dc:	d9c19f15 	stw	r7,1660(sp)
  8018e0:	d8c1a017 	ldw	r3,1664(sp)
  8018e4:	1880004c 	andi	r2,r3,1
  8018e8:	00c00084 	movi	r3,2
  8018ec:	103e2726 	beq	r2,zero,80118c <___vfprintf_internal_r+0x2c0>
  8018f0:	8444b03a 	or	r2,r16,r17
  8018f4:	103e2526 	beq	r2,zero,80118c <___vfprintf_internal_r+0x2c0>
  8018f8:	d901a017 	ldw	r4,1664(sp)
  8018fc:	21000094 	ori	r4,r4,2
  801900:	d901a015 	stw	r4,1664(sp)
  801904:	003e2106 	br	80118c <___vfprintf_internal_r+0x2c0>
  801908:	d941a017 	ldw	r5,1664(sp)
  80190c:	b1000003 	ldbu	r4,0(r22)
  801910:	29400054 	ori	r5,r5,1
  801914:	d941a015 	stw	r5,1664(sp)
  801918:	003dbd06 	br	801010 <___vfprintf_internal_r+0x144>
  80191c:	d8800404 	addi	r2,sp,16
  801920:	14c01504 	addi	r19,r2,84
  801924:	008010c4 	movi	r2,67
  801928:	e0800326 	beq	fp,r2,801938 <___vfprintf_internal_r+0xa6c>
  80192c:	d8c1a017 	ldw	r3,1664(sp)
  801930:	1880040c 	andi	r2,r3,16
  801934:	1002b826 	beq	r2,zero,802418 <___vfprintf_internal_r+0x154c>
  801938:	d9019204 	addi	r4,sp,1608
  80193c:	000b883a 	mov	r5,zero
  801940:	01800204 	movi	r6,8
  801944:	08058000 	call	805800 <memset>
  801948:	d8c19f17 	ldw	r3,1660(sp)
  80194c:	d9019d17 	ldw	r4,1652(sp)
  801950:	980b883a 	mov	r5,r19
  801954:	19800017 	ldw	r6,0(r3)
  801958:	d9c19204 	addi	r7,sp,1608
  80195c:	0802bb00 	call	802bb0 <_wcrtomb_r>
  801960:	d9019f17 	ldw	r4,1660(sp)
  801964:	102f883a 	mov	r23,r2
  801968:	00bfffc4 	movi	r2,-1
  80196c:	21000104 	addi	r4,r4,4
  801970:	d9019f15 	stw	r4,1660(sp)
  801974:	b8811426 	beq	r23,r2,801dc8 <___vfprintf_internal_r+0xefc>
  801978:	d8019c05 	stb	zero,1648(sp)
  80197c:	003e1a06 	br	8011e8 <___vfprintf_internal_r+0x31c>
  801980:	d941a017 	ldw	r5,1664(sp)
  801984:	00c02074 	movhi	r3,129
  801988:	18c0b004 	addi	r3,r3,704
  80198c:	d8c1a915 	stw	r3,1700(sp)
  801990:	2880080c 	andi	r2,r5,32
  801994:	103fcd1e 	bne	r2,zero,8018cc <___vfprintf_internal_r+0xa00>
  801998:	d8c1a017 	ldw	r3,1664(sp)
  80199c:	1880040c 	andi	r2,r3,16
  8019a0:	10027926 	beq	r2,zero,802388 <___vfprintf_internal_r+0x14bc>
  8019a4:	d8819f17 	ldw	r2,1660(sp)
  8019a8:	0023883a 	mov	r17,zero
  8019ac:	14000017 	ldw	r16,0(r2)
  8019b0:	11000104 	addi	r4,r2,4
  8019b4:	d9019f15 	stw	r4,1660(sp)
  8019b8:	003fc906 	br	8018e0 <___vfprintf_internal_r+0xa14>
  8019bc:	d881a017 	ldw	r2,1664(sp)
  8019c0:	b1000003 	ldbu	r4,0(r22)
  8019c4:	10801014 	ori	r2,r2,64
  8019c8:	d881a015 	stw	r2,1664(sp)
  8019cc:	003d9006 	br	801010 <___vfprintf_internal_r+0x144>
  8019d0:	00bfffc4 	movi	r2,-1
  8019d4:	a082f626 	beq	r20,r2,8025b0 <___vfprintf_internal_r+0x16e4>
  8019d8:	008019c4 	movi	r2,103
  8019dc:	e0829626 	beq	fp,r2,802438 <___vfprintf_internal_r+0x156c>
  8019e0:	008011c4 	movi	r2,71
  8019e4:	e0829426 	beq	fp,r2,802438 <___vfprintf_internal_r+0x156c>
  8019e8:	d9019f17 	ldw	r4,1660(sp)
  8019ec:	20800017 	ldw	r2,0(r4)
  8019f0:	20c00117 	ldw	r3,4(r4)
  8019f4:	21400204 	addi	r5,r4,8
  8019f8:	d881a415 	stw	r2,1680(sp)
  8019fc:	d8c1a515 	stw	r3,1684(sp)
  801a00:	d9419f15 	stw	r5,1660(sp)
  801a04:	d901a417 	ldw	r4,1680(sp)
  801a08:	d941a517 	ldw	r5,1684(sp)
  801a0c:	0806d580 	call	806d58 <isinf>
  801a10:	1002d926 	beq	r2,zero,802578 <___vfprintf_internal_r+0x16ac>
  801a14:	d901a417 	ldw	r4,1680(sp)
  801a18:	d941a517 	ldw	r5,1684(sp)
  801a1c:	000d883a 	mov	r6,zero
  801a20:	000f883a 	mov	r7,zero
  801a24:	0808bec0 	call	808bec <__ltdf2>
  801a28:	10002c16 	blt	r2,zero,801adc <___vfprintf_internal_r+0xc10>
  801a2c:	04c02074 	movhi	r19,129
  801a30:	9cc0b504 	addi	r19,r19,724
  801a34:	05c000c4 	movi	r23,3
  801a38:	003deb06 	br	8011e8 <___vfprintf_internal_r+0x31c>
  801a3c:	d9c1a017 	ldw	r7,1664(sp)
  801a40:	b1000003 	ldbu	r4,0(r22)
  801a44:	39c00214 	ori	r7,r7,8
  801a48:	d9c1a015 	stw	r7,1664(sp)
  801a4c:	003d7006 	br	801010 <___vfprintf_internal_r+0x144>
  801a50:	d8819c07 	ldb	r2,1648(sp)
  801a54:	1000161e 	bne	r2,zero,801ab0 <___vfprintf_internal_r+0xbe4>
  801a58:	b1000003 	ldbu	r4,0(r22)
  801a5c:	00800804 	movi	r2,32
  801a60:	d8819c05 	stb	r2,1648(sp)
  801a64:	003d6a06 	br	801010 <___vfprintf_internal_r+0x144>
  801a68:	0021883a 	mov	r16,zero
  801a6c:	04400244 	movi	r17,9
  801a70:	8009883a 	mov	r4,r16
  801a74:	01400284 	movi	r5,10
  801a78:	08006ec0 	call	8006ec <__mulsi3>
  801a7c:	1705883a 	add	r2,r2,fp
  801a80:	b7000007 	ldb	fp,0(r22)
  801a84:	143ff404 	addi	r16,r2,-48
  801a88:	b5800044 	addi	r22,r22,1
  801a8c:	e0bff404 	addi	r2,fp,-48
  801a90:	88bff72e 	bgeu	r17,r2,801a70 <___vfprintf_internal_r+0xba4>
  801a94:	dc01a215 	stw	r16,1672(sp)
  801a98:	003d6106 	br	801020 <___vfprintf_internal_r+0x154>
  801a9c:	d941a017 	ldw	r5,1664(sp)
  801aa0:	b1000003 	ldbu	r4,0(r22)
  801aa4:	29402014 	ori	r5,r5,128
  801aa8:	d941a015 	stw	r5,1664(sp)
  801aac:	003d5806 	br	801010 <___vfprintf_internal_r+0x144>
  801ab0:	b1000003 	ldbu	r4,0(r22)
  801ab4:	003d5606 	br	801010 <___vfprintf_internal_r+0x144>
  801ab8:	880b883a 	mov	r5,r17
  801abc:	8009883a 	mov	r4,r16
  801ac0:	080730c0 	call	80730c <__negdi2>
  801ac4:	1021883a 	mov	r16,r2
  801ac8:	1823883a 	mov	r17,r3
  801acc:	00800b44 	movi	r2,45
  801ad0:	00c00044 	movi	r3,1
  801ad4:	d8819c05 	stb	r2,1648(sp)
  801ad8:	003dad06 	br	801190 <___vfprintf_internal_r+0x2c4>
  801adc:	00800b44 	movi	r2,45
  801ae0:	04c02074 	movhi	r19,129
  801ae4:	9cc0b504 	addi	r19,r19,724
  801ae8:	d8819c05 	stb	r2,1648(sp)
  801aec:	003fd106 	br	801a34 <___vfprintf_internal_r+0xb68>
  801af0:	d941a017 	ldw	r5,1664(sp)
  801af4:	2880008c 	andi	r2,r5,2
  801af8:	103dc426 	beq	r2,zero,80120c <___vfprintf_internal_r+0x340>
  801afc:	d9c1a817 	ldw	r7,1696(sp)
  801b00:	39c00084 	addi	r7,r7,2
  801b04:	d9c1a815 	stw	r7,1696(sp)
  801b08:	003dc006 	br	80120c <___vfprintf_internal_r+0x340>
  801b0c:	d941a017 	ldw	r5,1664(sp)
  801b10:	2880008c 	andi	r2,r5,2
  801b14:	103e0026 	beq	r2,zero,801318 <___vfprintf_internal_r+0x44c>
  801b18:	d9000817 	ldw	r4,32(sp)
  801b1c:	d9400717 	ldw	r5,28(sp)
  801b20:	00800c04 	movi	r2,48
  801b24:	d8807005 	stb	r2,448(sp)
  801b28:	df007045 	stb	fp,449(sp)
  801b2c:	00800084 	movi	r2,2
  801b30:	d9c00404 	addi	r7,sp,16
  801b34:	90800115 	stw	r2,4(r18)
  801b38:	21000084 	addi	r4,r4,2
  801b3c:	29400044 	addi	r5,r5,1
  801b40:	38c06c04 	addi	r3,r7,432
  801b44:	008001c4 	movi	r2,7
  801b48:	90c00015 	stw	r3,0(r18)
  801b4c:	d9000815 	stw	r4,32(sp)
  801b50:	94800204 	addi	r18,r18,8
  801b54:	d9400715 	stw	r5,28(sp)
  801b58:	117def0e 	bge	r2,r5,801318 <___vfprintf_internal_r+0x44c>
  801b5c:	d9019e17 	ldw	r4,1656(sp)
  801b60:	39400204 	addi	r5,r7,8
  801b64:	0800e740 	call	800e74 <__sprint>
  801b68:	1000971e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801b6c:	d8c1ab17 	ldw	r3,1708(sp)
  801b70:	d8800404 	addi	r2,sp,16
  801b74:	14800504 	addi	r18,r2,20
  801b78:	00802004 	movi	r2,128
  801b7c:	18bde91e 	bne	r3,r2,801324 <___vfprintf_internal_r+0x458>
  801b80:	d941a217 	ldw	r5,1672(sp)
  801b84:	d901a817 	ldw	r4,1696(sp)
  801b88:	2921c83a 	sub	r16,r5,r4
  801b8c:	043de50e 	bge	zero,r16,801324 <___vfprintf_internal_r+0x458>
  801b90:	04400404 	movi	r17,16
  801b94:	8c001a0e 	bge	r17,r16,801c00 <___vfprintf_internal_r+0xd34>
  801b98:	882b883a 	mov	r21,r17
  801b9c:	050001c4 	movi	r20,7
  801ba0:	00000206 	br	801bac <___vfprintf_internal_r+0xce0>
  801ba4:	843ffc04 	addi	r16,r16,-16
  801ba8:	ac00150e 	bge	r21,r16,801c00 <___vfprintf_internal_r+0xd34>
  801bac:	d8800817 	ldw	r2,32(sp)
  801bb0:	d8c00717 	ldw	r3,28(sp)
  801bb4:	01c02074 	movhi	r7,129
  801bb8:	39c04704 	addi	r7,r7,284
  801bbc:	10800404 	addi	r2,r2,16
  801bc0:	18c00044 	addi	r3,r3,1
  801bc4:	91c00015 	stw	r7,0(r18)
  801bc8:	94400115 	stw	r17,4(r18)
  801bcc:	d8800815 	stw	r2,32(sp)
  801bd0:	d8c00715 	stw	r3,28(sp)
  801bd4:	94800204 	addi	r18,r18,8
  801bd8:	a0fff20e 	bge	r20,r3,801ba4 <___vfprintf_internal_r+0xcd8>
  801bdc:	d9019e17 	ldw	r4,1656(sp)
  801be0:	d8800404 	addi	r2,sp,16
  801be4:	11400204 	addi	r5,r2,8
  801be8:	0800e740 	call	800e74 <__sprint>
  801bec:	1000761e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801bf0:	d8c00404 	addi	r3,sp,16
  801bf4:	843ffc04 	addi	r16,r16,-16
  801bf8:	1c800504 	addi	r18,r3,20
  801bfc:	ac3feb16 	blt	r21,r16,801bac <___vfprintf_internal_r+0xce0>
  801c00:	d8800817 	ldw	r2,32(sp)
  801c04:	d8c00717 	ldw	r3,28(sp)
  801c08:	01002074 	movhi	r4,129
  801c0c:	21004704 	addi	r4,r4,284
  801c10:	1405883a 	add	r2,r2,r16
  801c14:	18c00044 	addi	r3,r3,1
  801c18:	d8800815 	stw	r2,32(sp)
  801c1c:	008001c4 	movi	r2,7
  801c20:	91000015 	stw	r4,0(r18)
  801c24:	94000115 	stw	r16,4(r18)
  801c28:	d8c00715 	stw	r3,28(sp)
  801c2c:	94800204 	addi	r18,r18,8
  801c30:	10fdbc0e 	bge	r2,r3,801324 <___vfprintf_internal_r+0x458>
  801c34:	d9019e17 	ldw	r4,1656(sp)
  801c38:	d9c00404 	addi	r7,sp,16
  801c3c:	39400204 	addi	r5,r7,8
  801c40:	0800e740 	call	800e74 <__sprint>
  801c44:	1000601e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801c48:	d8800404 	addi	r2,sp,16
  801c4c:	14800504 	addi	r18,r2,20
  801c50:	003db406 	br	801324 <___vfprintf_internal_r+0x458>
  801c54:	00801944 	movi	r2,101
  801c58:	17006c0e 	bge	r2,fp,801e0c <___vfprintf_internal_r+0xf40>
  801c5c:	d901a417 	ldw	r4,1680(sp)
  801c60:	d941a517 	ldw	r5,1684(sp)
  801c64:	000d883a 	mov	r6,zero
  801c68:	000f883a 	mov	r7,zero
  801c6c:	08089bc0 	call	8089bc <__eqdf2>
  801c70:	1000c81e 	bne	r2,zero,801f94 <___vfprintf_internal_r+0x10c8>
  801c74:	d8800817 	ldw	r2,32(sp)
  801c78:	d9000717 	ldw	r4,28(sp)
  801c7c:	04400044 	movi	r17,1
  801c80:	10800044 	addi	r2,r2,1
  801c84:	21000044 	addi	r4,r4,1
  801c88:	00c02074 	movhi	r3,129
  801c8c:	18c0b604 	addi	r3,r3,728
  801c90:	04c001c4 	movi	r19,7
  801c94:	90c00015 	stw	r3,0(r18)
  801c98:	94400115 	stw	r17,4(r18)
  801c9c:	d8800815 	stw	r2,32(sp)
  801ca0:	d9000715 	stw	r4,28(sp)
  801ca4:	94800204 	addi	r18,r18,8
  801ca8:	9901d316 	blt	r19,r4,8023f8 <___vfprintf_internal_r+0x152c>
  801cac:	dc019617 	ldw	r16,1624(sp)
  801cb0:	d8819517 	ldw	r2,1620(sp)
  801cb4:	14000316 	blt	r2,r16,801cc4 <___vfprintf_internal_r+0xdf8>
  801cb8:	d941a017 	ldw	r5,1664(sp)
  801cbc:	2880004c 	andi	r2,r5,1
  801cc0:	103dd926 	beq	r2,zero,801428 <___vfprintf_internal_r+0x55c>
  801cc4:	d8800817 	ldw	r2,32(sp)
  801cc8:	d8c00717 	ldw	r3,28(sp)
  801ccc:	d9c1a317 	ldw	r7,1676(sp)
  801cd0:	10800044 	addi	r2,r2,1
  801cd4:	18c00044 	addi	r3,r3,1
  801cd8:	94400115 	stw	r17,4(r18)
  801cdc:	91c00015 	stw	r7,0(r18)
  801ce0:	d8800815 	stw	r2,32(sp)
  801ce4:	d8c00715 	stw	r3,28(sp)
  801ce8:	94800204 	addi	r18,r18,8
  801cec:	98c1e016 	blt	r19,r3,802470 <___vfprintf_internal_r+0x15a4>
  801cf0:	843fffc4 	addi	r16,r16,-1
  801cf4:	043dcc0e 	bge	zero,r16,801428 <___vfprintf_internal_r+0x55c>
  801cf8:	04400404 	movi	r17,16
  801cfc:	8c001a0e 	bge	r17,r16,801d68 <___vfprintf_internal_r+0xe9c>
  801d00:	9829883a 	mov	r20,r19
  801d04:	8827883a 	mov	r19,r17
  801d08:	00000206 	br	801d14 <___vfprintf_internal_r+0xe48>
  801d0c:	843ffc04 	addi	r16,r16,-16
  801d10:	9c00150e 	bge	r19,r16,801d68 <___vfprintf_internal_r+0xe9c>
  801d14:	d8800817 	ldw	r2,32(sp)
  801d18:	d8c00717 	ldw	r3,28(sp)
  801d1c:	01002074 	movhi	r4,129
  801d20:	21004704 	addi	r4,r4,284
  801d24:	10800404 	addi	r2,r2,16
  801d28:	18c00044 	addi	r3,r3,1
  801d2c:	91000015 	stw	r4,0(r18)
  801d30:	94400115 	stw	r17,4(r18)
  801d34:	d8800815 	stw	r2,32(sp)
  801d38:	d8c00715 	stw	r3,28(sp)
  801d3c:	94800204 	addi	r18,r18,8
  801d40:	a0fff20e 	bge	r20,r3,801d0c <___vfprintf_internal_r+0xe40>
  801d44:	d9019e17 	ldw	r4,1656(sp)
  801d48:	d9c00404 	addi	r7,sp,16
  801d4c:	39400204 	addi	r5,r7,8
  801d50:	0800e740 	call	800e74 <__sprint>
  801d54:	10001c1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801d58:	d8800404 	addi	r2,sp,16
  801d5c:	843ffc04 	addi	r16,r16,-16
  801d60:	14800504 	addi	r18,r2,20
  801d64:	9c3feb16 	blt	r19,r16,801d14 <___vfprintf_internal_r+0xe48>
  801d68:	d8800817 	ldw	r2,32(sp)
  801d6c:	d8c00717 	ldw	r3,28(sp)
  801d70:	01002074 	movhi	r4,129
  801d74:	21004704 	addi	r4,r4,284
  801d78:	1405883a 	add	r2,r2,r16
  801d7c:	18c00044 	addi	r3,r3,1
  801d80:	d8800815 	stw	r2,32(sp)
  801d84:	008001c4 	movi	r2,7
  801d88:	91000015 	stw	r4,0(r18)
  801d8c:	94000115 	stw	r16,4(r18)
  801d90:	d8c00715 	stw	r3,28(sp)
  801d94:	94800204 	addi	r18,r18,8
  801d98:	10fda30e 	bge	r2,r3,801428 <___vfprintf_internal_r+0x55c>
  801d9c:	d9019e17 	ldw	r4,1656(sp)
  801da0:	d9c00404 	addi	r7,sp,16
  801da4:	00005306 	br	801ef4 <___vfprintf_internal_r+0x1028>
  801da8:	d8800817 	ldw	r2,32(sp)
  801dac:	10000526 	beq	r2,zero,801dc4 <___vfprintf_internal_r+0xef8>
  801db0:	d9000404 	addi	r4,sp,16
  801db4:	21400204 	addi	r5,r4,8
  801db8:	d9019e17 	ldw	r4,1656(sp)
  801dbc:	0800e740 	call	800e74 <__sprint>
  801dc0:	1000011e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801dc4:	d8000715 	stw	zero,28(sp)
  801dc8:	d941aa17 	ldw	r5,1704(sp)
  801dcc:	28000226 	beq	r5,zero,801dd8 <___vfprintf_internal_r+0xf0c>
  801dd0:	2809883a 	mov	r4,r5
  801dd4:	08007280 	call	800728 <free>
  801dd8:	d9c19e17 	ldw	r7,1656(sp)
  801ddc:	00ffffc4 	movi	r3,-1
  801de0:	3880030b 	ldhu	r2,12(r7)
  801de4:	1080100c 	andi	r2,r2,64
  801de8:	103cc71e 	bne	r2,zero,801108 <___vfprintf_internal_r+0x23c>
  801dec:	d8c1a117 	ldw	r3,1668(sp)
  801df0:	003cc506 	br	801108 <___vfprintf_internal_r+0x23c>
  801df4:	d9019e17 	ldw	r4,1656(sp)
  801df8:	d9c00404 	addi	r7,sp,16
  801dfc:	39400204 	addi	r5,r7,8
  801e00:	0800e740 	call	800e74 <__sprint>
  801e04:	103dc526 	beq	r2,zero,80151c <___vfprintf_internal_r+0x650>
  801e08:	003fef06 	br	801dc8 <___vfprintf_internal_r+0xefc>
  801e0c:	dc019617 	ldw	r16,1624(sp)
  801e10:	01000044 	movi	r4,1
  801e14:	24000316 	blt	r4,r16,801e24 <___vfprintf_internal_r+0xf58>
  801e18:	d941a017 	ldw	r5,1664(sp)
  801e1c:	2904703a 	and	r2,r5,r4
  801e20:	10010026 	beq	r2,zero,802224 <___vfprintf_internal_r+0x1358>
  801e24:	98800003 	ldbu	r2,0(r19)
  801e28:	d9000817 	ldw	r4,32(sp)
  801e2c:	d9400717 	ldw	r5,28(sp)
  801e30:	00c00b84 	movi	r3,46
  801e34:	d9c00404 	addi	r7,sp,16
  801e38:	d8807005 	stb	r2,448(sp)
  801e3c:	d8c07045 	stb	r3,449(sp)
  801e40:	21000084 	addi	r4,r4,2
  801e44:	29400044 	addi	r5,r5,1
  801e48:	38c06c04 	addi	r3,r7,432
  801e4c:	00800084 	movi	r2,2
  801e50:	050001c4 	movi	r20,7
  801e54:	90c00015 	stw	r3,0(r18)
  801e58:	90800115 	stw	r2,4(r18)
  801e5c:	d9000815 	stw	r4,32(sp)
  801e60:	9cc00044 	addi	r19,r19,1
  801e64:	94800204 	addi	r18,r18,8
  801e68:	d9400715 	stw	r5,28(sp)
  801e6c:	04400404 	movi	r17,16
  801e70:	a140ff16 	blt	r20,r5,802270 <___vfprintf_internal_r+0x13a4>
  801e74:	d901a417 	ldw	r4,1680(sp)
  801e78:	d941a517 	ldw	r5,1684(sp)
  801e7c:	000d883a 	mov	r6,zero
  801e80:	000f883a 	mov	r7,zero
  801e84:	0808a480 	call	808a48 <__nedf2>
  801e88:	10009626 	beq	r2,zero,8020e4 <___vfprintf_internal_r+0x1218>
  801e8c:	d8c00817 	ldw	r3,32(sp)
  801e90:	d9000717 	ldw	r4,28(sp)
  801e94:	80bfffc4 	addi	r2,r16,-1
  801e98:	1c07883a 	add	r3,r3,r16
  801e9c:	18ffffc4 	addi	r3,r3,-1
  801ea0:	21000044 	addi	r4,r4,1
  801ea4:	94c00015 	stw	r19,0(r18)
  801ea8:	90800115 	stw	r2,4(r18)
  801eac:	d8c00815 	stw	r3,32(sp)
  801eb0:	94800204 	addi	r18,r18,8
  801eb4:	d9000715 	stw	r4,28(sp)
  801eb8:	a100e516 	blt	r20,r4,802250 <___vfprintf_internal_r+0x1384>
  801ebc:	d8800817 	ldw	r2,32(sp)
  801ec0:	d941a617 	ldw	r5,1688(sp)
  801ec4:	d8c00717 	ldw	r3,28(sp)
  801ec8:	d9c00404 	addi	r7,sp,16
  801ecc:	1145883a 	add	r2,r2,r5
  801ed0:	18c00044 	addi	r3,r3,1
  801ed4:	d8800815 	stw	r2,32(sp)
  801ed8:	008001c4 	movi	r2,7
  801edc:	91c00015 	stw	r7,0(r18)
  801ee0:	91400115 	stw	r5,4(r18)
  801ee4:	d8c00715 	stw	r3,28(sp)
  801ee8:	94800204 	addi	r18,r18,8
  801eec:	10fd4e0e 	bge	r2,r3,801428 <___vfprintf_internal_r+0x55c>
  801ef0:	d9019e17 	ldw	r4,1656(sp)
  801ef4:	39400204 	addi	r5,r7,8
  801ef8:	0800e740 	call	800e74 <__sprint>
  801efc:	103fb21e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801f00:	d8800404 	addi	r2,sp,16
  801f04:	14800504 	addi	r18,r2,20
  801f08:	003d4706 	br	801428 <___vfprintf_internal_r+0x55c>
  801f0c:	00800084 	movi	r2,2
  801f10:	18bcb01e 	bne	r3,r2,8011d4 <___vfprintf_internal_r+0x308>
  801f14:	d9c1a917 	ldw	r7,1700(sp)
  801f18:	800ad13a 	srli	r5,r16,4
  801f1c:	880c973a 	slli	r6,r17,28
  801f20:	810003cc 	andi	r4,r16,15
  801f24:	21c9883a 	add	r4,r4,r7
  801f28:	8806d13a 	srli	r3,r17,4
  801f2c:	3144b03a 	or	r2,r6,r5
  801f30:	21400003 	ldbu	r5,0(r4)
  801f34:	9cffffc4 	addi	r19,r19,-1
  801f38:	10c8b03a 	or	r4,r2,r3
  801f3c:	1021883a 	mov	r16,r2
  801f40:	1823883a 	mov	r17,r3
  801f44:	99400005 	stb	r5,0(r19)
  801f48:	203ff21e 	bne	r4,zero,801f14 <___vfprintf_internal_r+0x1048>
  801f4c:	003d9306 	br	80159c <___vfprintf_internal_r+0x6d0>
  801f50:	18803fcc 	andi	r2,r3,255
  801f54:	103d911e 	bne	r2,zero,80159c <___vfprintf_internal_r+0x6d0>
  801f58:	d8c1a017 	ldw	r3,1664(sp)
  801f5c:	1880004c 	andi	r2,r3,1
  801f60:	103d8e26 	beq	r2,zero,80159c <___vfprintf_internal_r+0x6d0>
  801f64:	d9000404 	addi	r4,sp,16
  801f68:	24c06bc4 	addi	r19,r4,431
  801f6c:	00800c04 	movi	r2,48
  801f70:	003d8906 	br	801598 <___vfprintf_internal_r+0x6cc>
  801f74:	d9019e17 	ldw	r4,1656(sp)
  801f78:	d8c00404 	addi	r3,sp,16
  801f7c:	19400204 	addi	r5,r3,8
  801f80:	0800e740 	call	800e74 <__sprint>
  801f84:	103f901e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  801f88:	d9000404 	addi	r4,sp,16
  801f8c:	24800504 	addi	r18,r4,20
  801f90:	003ce106 	br	801318 <___vfprintf_internal_r+0x44c>
  801f94:	d9819517 	ldw	r6,1620(sp)
  801f98:	01813e0e 	bge	zero,r6,802494 <___vfprintf_internal_r+0x15c8>
  801f9c:	dc019617 	ldw	r16,1624(sp)
  801fa0:	3400bb16 	blt	r6,r16,802290 <___vfprintf_internal_r+0x13c4>
  801fa4:	d8800817 	ldw	r2,32(sp)
  801fa8:	d8c00717 	ldw	r3,28(sp)
  801fac:	050001c4 	movi	r20,7
  801fb0:	1405883a 	add	r2,r2,r16
  801fb4:	18c00044 	addi	r3,r3,1
  801fb8:	94c00015 	stw	r19,0(r18)
  801fbc:	94000115 	stw	r16,4(r18)
  801fc0:	d8800815 	stw	r2,32(sp)
  801fc4:	d8c00715 	stw	r3,28(sp)
  801fc8:	94800204 	addi	r18,r18,8
  801fcc:	a0c1b116 	blt	r20,r3,802694 <___vfprintf_internal_r+0x17c8>
  801fd0:	3421c83a 	sub	r16,r6,r16
  801fd4:	0400280e 	bge	zero,r16,802078 <___vfprintf_internal_r+0x11ac>
  801fd8:	04400404 	movi	r17,16
  801fdc:	8c00190e 	bge	r17,r16,802044 <___vfprintf_internal_r+0x1178>
  801fe0:	8827883a 	mov	r19,r17
  801fe4:	00000206 	br	801ff0 <___vfprintf_internal_r+0x1124>
  801fe8:	843ffc04 	addi	r16,r16,-16
  801fec:	9c00150e 	bge	r19,r16,802044 <___vfprintf_internal_r+0x1178>
  801ff0:	00c02074 	movhi	r3,129
  801ff4:	18c04704 	addi	r3,r3,284
  801ff8:	90c00015 	stw	r3,0(r18)
  801ffc:	d8800817 	ldw	r2,32(sp)
  802000:	d8c00717 	ldw	r3,28(sp)
  802004:	94400115 	stw	r17,4(r18)
  802008:	10800404 	addi	r2,r2,16
  80200c:	18c00044 	addi	r3,r3,1
  802010:	d8800815 	stw	r2,32(sp)
  802014:	d8c00715 	stw	r3,28(sp)
  802018:	94800204 	addi	r18,r18,8
  80201c:	a0fff20e 	bge	r20,r3,801fe8 <___vfprintf_internal_r+0x111c>
  802020:	d9019e17 	ldw	r4,1656(sp)
  802024:	d9c00404 	addi	r7,sp,16
  802028:	39400204 	addi	r5,r7,8
  80202c:	0800e740 	call	800e74 <__sprint>
  802030:	103f651e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802034:	d8800404 	addi	r2,sp,16
  802038:	843ffc04 	addi	r16,r16,-16
  80203c:	14800504 	addi	r18,r2,20
  802040:	9c3feb16 	blt	r19,r16,801ff0 <___vfprintf_internal_r+0x1124>
  802044:	d8800817 	ldw	r2,32(sp)
  802048:	d8c00717 	ldw	r3,28(sp)
  80204c:	01002074 	movhi	r4,129
  802050:	21004704 	addi	r4,r4,284
  802054:	1405883a 	add	r2,r2,r16
  802058:	18c00044 	addi	r3,r3,1
  80205c:	d8800815 	stw	r2,32(sp)
  802060:	008001c4 	movi	r2,7
  802064:	91000015 	stw	r4,0(r18)
  802068:	94000115 	stw	r16,4(r18)
  80206c:	d8c00715 	stw	r3,28(sp)
  802070:	94800204 	addi	r18,r18,8
  802074:	10c1f316 	blt	r2,r3,802844 <___vfprintf_internal_r+0x1978>
  802078:	d8c1a017 	ldw	r3,1664(sp)
  80207c:	1880004c 	andi	r2,r3,1
  802080:	103ce926 	beq	r2,zero,801428 <___vfprintf_internal_r+0x55c>
  802084:	d9000817 	ldw	r4,32(sp)
  802088:	d9400717 	ldw	r5,28(sp)
  80208c:	00800044 	movi	r2,1
  802090:	90800115 	stw	r2,4(r18)
  802094:	21000044 	addi	r4,r4,1
  802098:	29400044 	addi	r5,r5,1
  80209c:	00c02074 	movhi	r3,129
  8020a0:	18c0b704 	addi	r3,r3,732
  8020a4:	008001c4 	movi	r2,7
  8020a8:	90c00015 	stw	r3,0(r18)
  8020ac:	d9000815 	stw	r4,32(sp)
  8020b0:	94800204 	addi	r18,r18,8
  8020b4:	d9400715 	stw	r5,28(sp)
  8020b8:	117cdb0e 	bge	r2,r5,801428 <___vfprintf_internal_r+0x55c>
  8020bc:	003f3706 	br	801d9c <___vfprintf_internal_r+0xed0>
  8020c0:	d9019e17 	ldw	r4,1656(sp)
  8020c4:	d9c00404 	addi	r7,sp,16
  8020c8:	39400204 	addi	r5,r7,8
  8020cc:	0800e740 	call	800e74 <__sprint>
  8020d0:	103f3d1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  8020d4:	d8c19c03 	ldbu	r3,1648(sp)
  8020d8:	d8800404 	addi	r2,sp,16
  8020dc:	14800504 	addi	r18,r2,20
  8020e0:	003c7c06 	br	8012d4 <___vfprintf_internal_r+0x408>
  8020e4:	843fffc4 	addi	r16,r16,-1
  8020e8:	043f740e 	bge	zero,r16,801ebc <___vfprintf_internal_r+0xff0>
  8020ec:	8c00190e 	bge	r17,r16,802154 <___vfprintf_internal_r+0x1288>
  8020f0:	a027883a 	mov	r19,r20
  8020f4:	00000206 	br	802100 <___vfprintf_internal_r+0x1234>
  8020f8:	843ffc04 	addi	r16,r16,-16
  8020fc:	8c00150e 	bge	r17,r16,802154 <___vfprintf_internal_r+0x1288>
  802100:	d8800817 	ldw	r2,32(sp)
  802104:	d8c00717 	ldw	r3,28(sp)
  802108:	01402074 	movhi	r5,129
  80210c:	29404704 	addi	r5,r5,284
  802110:	10800404 	addi	r2,r2,16
  802114:	18c00044 	addi	r3,r3,1
  802118:	91400015 	stw	r5,0(r18)
  80211c:	94400115 	stw	r17,4(r18)
  802120:	d8800815 	stw	r2,32(sp)
  802124:	d8c00715 	stw	r3,28(sp)
  802128:	94800204 	addi	r18,r18,8
  80212c:	98fff20e 	bge	r19,r3,8020f8 <___vfprintf_internal_r+0x122c>
  802130:	d9019e17 	ldw	r4,1656(sp)
  802134:	d9c00404 	addi	r7,sp,16
  802138:	39400204 	addi	r5,r7,8
  80213c:	0800e740 	call	800e74 <__sprint>
  802140:	103f211e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802144:	d8800404 	addi	r2,sp,16
  802148:	843ffc04 	addi	r16,r16,-16
  80214c:	14800504 	addi	r18,r2,20
  802150:	8c3feb16 	blt	r17,r16,802100 <___vfprintf_internal_r+0x1234>
  802154:	d8800817 	ldw	r2,32(sp)
  802158:	d8c00717 	ldw	r3,28(sp)
  80215c:	01002074 	movhi	r4,129
  802160:	21004704 	addi	r4,r4,284
  802164:	1405883a 	add	r2,r2,r16
  802168:	18c00044 	addi	r3,r3,1
  80216c:	d8800815 	stw	r2,32(sp)
  802170:	008001c4 	movi	r2,7
  802174:	91000015 	stw	r4,0(r18)
  802178:	94000115 	stw	r16,4(r18)
  80217c:	d8c00715 	stw	r3,28(sp)
  802180:	94800204 	addi	r18,r18,8
  802184:	10ff4d0e 	bge	r2,r3,801ebc <___vfprintf_internal_r+0xff0>
  802188:	d9019e17 	ldw	r4,1656(sp)
  80218c:	d9c00404 	addi	r7,sp,16
  802190:	39400204 	addi	r5,r7,8
  802194:	0800e740 	call	800e74 <__sprint>
  802198:	103f0b1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  80219c:	d8800404 	addi	r2,sp,16
  8021a0:	14800504 	addi	r18,r2,20
  8021a4:	003f4506 	br	801ebc <___vfprintf_internal_r+0xff0>
  8021a8:	d941a017 	ldw	r5,1664(sp)
  8021ac:	2880040c 	andi	r2,r5,16
  8021b0:	10006426 	beq	r2,zero,802344 <___vfprintf_internal_r+0x1478>
  8021b4:	d8819f17 	ldw	r2,1660(sp)
  8021b8:	0023883a 	mov	r17,zero
  8021bc:	14000017 	ldw	r16,0(r2)
  8021c0:	11c00104 	addi	r7,r2,4
  8021c4:	d9c19f15 	stw	r7,1660(sp)
  8021c8:	0007883a 	mov	r3,zero
  8021cc:	003bef06 	br	80118c <___vfprintf_internal_r+0x2c0>
  8021d0:	d941a017 	ldw	r5,1664(sp)
  8021d4:	2880040c 	andi	r2,r5,16
  8021d8:	10006326 	beq	r2,zero,802368 <___vfprintf_internal_r+0x149c>
  8021dc:	d8819f17 	ldw	r2,1660(sp)
  8021e0:	10c00017 	ldw	r3,0(r2)
  8021e4:	11c00104 	addi	r7,r2,4
  8021e8:	d9c19f15 	stw	r7,1660(sp)
  8021ec:	1823d7fa 	srai	r17,r3,31
  8021f0:	1821883a 	mov	r16,r3
  8021f4:	883d190e 	bge	r17,zero,80165c <___vfprintf_internal_r+0x790>
  8021f8:	003e2f06 	br	801ab8 <___vfprintf_internal_r+0xbec>
  8021fc:	d8c1a017 	ldw	r3,1664(sp)
  802200:	1880040c 	andi	r2,r3,16
  802204:	10006926 	beq	r2,zero,8023ac <___vfprintf_internal_r+0x14e0>
  802208:	d8819f17 	ldw	r2,1660(sp)
  80220c:	0023883a 	mov	r17,zero
  802210:	14000017 	ldw	r16,0(r2)
  802214:	11000104 	addi	r4,r2,4
  802218:	d9019f15 	stw	r4,1660(sp)
  80221c:	00c00044 	movi	r3,1
  802220:	003bda06 	br	80118c <___vfprintf_internal_r+0x2c0>
  802224:	d8800817 	ldw	r2,32(sp)
  802228:	d8c00717 	ldw	r3,28(sp)
  80222c:	94c00015 	stw	r19,0(r18)
  802230:	10800044 	addi	r2,r2,1
  802234:	18c00044 	addi	r3,r3,1
  802238:	d8800815 	stw	r2,32(sp)
  80223c:	008001c4 	movi	r2,7
  802240:	91000115 	stw	r4,4(r18)
  802244:	d8c00715 	stw	r3,28(sp)
  802248:	94800204 	addi	r18,r18,8
  80224c:	10ff1b0e 	bge	r2,r3,801ebc <___vfprintf_internal_r+0xff0>
  802250:	d9019e17 	ldw	r4,1656(sp)
  802254:	d8c00404 	addi	r3,sp,16
  802258:	19400204 	addi	r5,r3,8
  80225c:	0800e740 	call	800e74 <__sprint>
  802260:	103ed91e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802264:	d9000404 	addi	r4,sp,16
  802268:	24800504 	addi	r18,r4,20
  80226c:	003f1306 	br	801ebc <___vfprintf_internal_r+0xff0>
  802270:	d9019e17 	ldw	r4,1656(sp)
  802274:	39400204 	addi	r5,r7,8
  802278:	0800e740 	call	800e74 <__sprint>
  80227c:	103ed21e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802280:	dc019617 	ldw	r16,1624(sp)
  802284:	dc45883a 	add	r2,sp,r17
  802288:	14800504 	addi	r18,r2,20
  80228c:	003ef906 	br	801e74 <___vfprintf_internal_r+0xfa8>
  802290:	d8800817 	ldw	r2,32(sp)
  802294:	d8c00717 	ldw	r3,28(sp)
  802298:	040001c4 	movi	r16,7
  80229c:	1185883a 	add	r2,r2,r6
  8022a0:	18c00044 	addi	r3,r3,1
  8022a4:	94c00015 	stw	r19,0(r18)
  8022a8:	91800115 	stw	r6,4(r18)
  8022ac:	d8800815 	stw	r2,32(sp)
  8022b0:	d8c00715 	stw	r3,28(sp)
  8022b4:	94800204 	addi	r18,r18,8
  8022b8:	80c0ed16 	blt	r16,r3,802670 <___vfprintf_internal_r+0x17a4>
  8022bc:	d9000817 	ldw	r4,32(sp)
  8022c0:	d9400717 	ldw	r5,28(sp)
  8022c4:	00802074 	movhi	r2,129
  8022c8:	1080b704 	addi	r2,r2,732
  8022cc:	21000044 	addi	r4,r4,1
  8022d0:	29400044 	addi	r5,r5,1
  8022d4:	00c00044 	movi	r3,1
  8022d8:	90800015 	stw	r2,0(r18)
  8022dc:	90c00115 	stw	r3,4(r18)
  8022e0:	d9000815 	stw	r4,32(sp)
  8022e4:	99a7883a 	add	r19,r19,r6
  8022e8:	94800204 	addi	r18,r18,8
  8022ec:	d9400715 	stw	r5,28(sp)
  8022f0:	8140d616 	blt	r16,r5,80264c <___vfprintf_internal_r+0x1780>
  8022f4:	d8819617 	ldw	r2,1624(sp)
  8022f8:	d8c00817 	ldw	r3,32(sp)
  8022fc:	d9000717 	ldw	r4,28(sp)
  802300:	1185c83a 	sub	r2,r2,r6
  802304:	1887883a 	add	r3,r3,r2
  802308:	21000044 	addi	r4,r4,1
  80230c:	94c00015 	stw	r19,0(r18)
  802310:	90800115 	stw	r2,4(r18)
  802314:	d8c00815 	stw	r3,32(sp)
  802318:	d9000715 	stw	r4,28(sp)
  80231c:	94800204 	addi	r18,r18,8
  802320:	813c410e 	bge	r16,r4,801428 <___vfprintf_internal_r+0x55c>
  802324:	d9019e17 	ldw	r4,1656(sp)
  802328:	d8c00404 	addi	r3,sp,16
  80232c:	19400204 	addi	r5,r3,8
  802330:	0800e740 	call	800e74 <__sprint>
  802334:	103ea41e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802338:	d9000404 	addi	r4,sp,16
  80233c:	24800504 	addi	r18,r4,20
  802340:	003c3906 	br	801428 <___vfprintf_internal_r+0x55c>
  802344:	d8c1a017 	ldw	r3,1664(sp)
  802348:	1880100c 	andi	r2,r3,64
  80234c:	1000af26 	beq	r2,zero,80260c <___vfprintf_internal_r+0x1740>
  802350:	d8819f17 	ldw	r2,1660(sp)
  802354:	0023883a 	mov	r17,zero
  802358:	1400000b 	ldhu	r16,0(r2)
  80235c:	11000104 	addi	r4,r2,4
  802360:	d9019f15 	stw	r4,1660(sp)
  802364:	003f9806 	br	8021c8 <___vfprintf_internal_r+0x12fc>
  802368:	d8c1a017 	ldw	r3,1664(sp)
  80236c:	1880100c 	andi	r2,r3,64
  802370:	10009b26 	beq	r2,zero,8025e0 <___vfprintf_internal_r+0x1714>
  802374:	d8819f17 	ldw	r2,1660(sp)
  802378:	10c0000f 	ldh	r3,0(r2)
  80237c:	11000104 	addi	r4,r2,4
  802380:	d9019f15 	stw	r4,1660(sp)
  802384:	003f9906 	br	8021ec <___vfprintf_internal_r+0x1320>
  802388:	d941a017 	ldw	r5,1664(sp)
  80238c:	2880100c 	andi	r2,r5,64
  802390:	1000a426 	beq	r2,zero,802624 <___vfprintf_internal_r+0x1758>
  802394:	d8819f17 	ldw	r2,1660(sp)
  802398:	0023883a 	mov	r17,zero
  80239c:	1400000b 	ldhu	r16,0(r2)
  8023a0:	11c00104 	addi	r7,r2,4
  8023a4:	d9c19f15 	stw	r7,1660(sp)
  8023a8:	003d4d06 	br	8018e0 <___vfprintf_internal_r+0xa14>
  8023ac:	d941a017 	ldw	r5,1664(sp)
  8023b0:	2880100c 	andi	r2,r5,64
  8023b4:	10008f26 	beq	r2,zero,8025f4 <___vfprintf_internal_r+0x1728>
  8023b8:	d8819f17 	ldw	r2,1660(sp)
  8023bc:	0023883a 	mov	r17,zero
  8023c0:	1400000b 	ldhu	r16,0(r2)
  8023c4:	11c00104 	addi	r7,r2,4
  8023c8:	d9c19f15 	stw	r7,1660(sp)
  8023cc:	003f9306 	br	80221c <___vfprintf_internal_r+0x1350>
  8023d0:	d8c1a017 	ldw	r3,1664(sp)
  8023d4:	1880040c 	andi	r2,r3,16
  8023d8:	10007726 	beq	r2,zero,8025b8 <___vfprintf_internal_r+0x16ec>
  8023dc:	d8819f17 	ldw	r2,1660(sp)
  8023e0:	d941a117 	ldw	r5,1668(sp)
  8023e4:	10c00017 	ldw	r3,0(r2)
  8023e8:	11000104 	addi	r4,r2,4
  8023ec:	d9019f15 	stw	r4,1660(sp)
  8023f0:	19400015 	stw	r5,0(r3)
  8023f4:	003adc06 	br	800f68 <___vfprintf_internal_r+0x9c>
  8023f8:	d9019e17 	ldw	r4,1656(sp)
  8023fc:	d8c00404 	addi	r3,sp,16
  802400:	19400204 	addi	r5,r3,8
  802404:	0800e740 	call	800e74 <__sprint>
  802408:	103e6f1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  80240c:	d9000404 	addi	r4,sp,16
  802410:	24800504 	addi	r18,r4,20
  802414:	003e2506 	br	801cac <___vfprintf_internal_r+0xde0>
  802418:	d8819f17 	ldw	r2,1660(sp)
  80241c:	05c00044 	movi	r23,1
  802420:	10c00017 	ldw	r3,0(r2)
  802424:	11400104 	addi	r5,r2,4
  802428:	d9419f15 	stw	r5,1660(sp)
  80242c:	98c00005 	stb	r3,0(r19)
  802430:	d8019c05 	stb	zero,1648(sp)
  802434:	003b6c06 	br	8011e8 <___vfprintf_internal_r+0x31c>
  802438:	a03d6b1e 	bne	r20,zero,8019e8 <___vfprintf_internal_r+0xb1c>
  80243c:	05000044 	movi	r20,1
  802440:	003d6906 	br	8019e8 <___vfprintf_internal_r+0xb1c>
  802444:	a03b6516 	blt	r20,zero,8011dc <___vfprintf_internal_r+0x310>
  802448:	9809883a 	mov	r4,r19
  80244c:	000b883a 	mov	r5,zero
  802450:	a00d883a 	mov	r6,r20
  802454:	08055700 	call	805570 <memchr>
  802458:	a02f883a 	mov	r23,r20
  80245c:	103b6226 	beq	r2,zero,8011e8 <___vfprintf_internal_r+0x31c>
  802460:	14efc83a 	sub	r23,r2,r19
  802464:	a5fb600e 	bge	r20,r23,8011e8 <___vfprintf_internal_r+0x31c>
  802468:	a02f883a 	mov	r23,r20
  80246c:	003b5e06 	br	8011e8 <___vfprintf_internal_r+0x31c>
  802470:	d9019e17 	ldw	r4,1656(sp)
  802474:	d8800404 	addi	r2,sp,16
  802478:	11400204 	addi	r5,r2,8
  80247c:	0800e740 	call	800e74 <__sprint>
  802480:	103e511e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802484:	dc019617 	ldw	r16,1624(sp)
  802488:	d8c00404 	addi	r3,sp,16
  80248c:	1c800504 	addi	r18,r3,20
  802490:	003e1706 	br	801cf0 <___vfprintf_internal_r+0xe24>
  802494:	d8800817 	ldw	r2,32(sp)
  802498:	d9000717 	ldw	r4,28(sp)
  80249c:	04000044 	movi	r16,1
  8024a0:	10800044 	addi	r2,r2,1
  8024a4:	21000044 	addi	r4,r4,1
  8024a8:	00c02074 	movhi	r3,129
  8024ac:	18c0b604 	addi	r3,r3,728
  8024b0:	050001c4 	movi	r20,7
  8024b4:	90c00015 	stw	r3,0(r18)
  8024b8:	94000115 	stw	r16,4(r18)
  8024bc:	d8800815 	stw	r2,32(sp)
  8024c0:	d9000715 	stw	r4,28(sp)
  8024c4:	94800204 	addi	r18,r18,8
  8024c8:	a100ed16 	blt	r20,r4,802880 <___vfprintf_internal_r+0x19b4>
  8024cc:	3000021e 	bne	r6,zero,8024d8 <___vfprintf_internal_r+0x160c>
  8024d0:	d8819617 	ldw	r2,1624(sp)
  8024d4:	103bd426 	beq	r2,zero,801428 <___vfprintf_internal_r+0x55c>
  8024d8:	d8800817 	ldw	r2,32(sp)
  8024dc:	d8c00717 	ldw	r3,28(sp)
  8024e0:	d941a317 	ldw	r5,1676(sp)
  8024e4:	10800044 	addi	r2,r2,1
  8024e8:	18c00044 	addi	r3,r3,1
  8024ec:	94000115 	stw	r16,4(r18)
  8024f0:	91400015 	stw	r5,0(r18)
  8024f4:	d8800815 	stw	r2,32(sp)
  8024f8:	d8c00715 	stw	r3,28(sp)
  8024fc:	94800204 	addi	r18,r18,8
  802500:	a0c13316 	blt	r20,r3,8029d0 <___vfprintf_internal_r+0x1b04>
  802504:	01a1c83a 	sub	r16,zero,r6
  802508:	0400f30e 	bge	zero,r16,8028d8 <___vfprintf_internal_r+0x1a0c>
  80250c:	04400404 	movi	r17,16
  802510:	8c00e40e 	bge	r17,r16,8028a4 <___vfprintf_internal_r+0x19d8>
  802514:	a02b883a 	mov	r21,r20
  802518:	8829883a 	mov	r20,r17
  80251c:	00000206 	br	802528 <___vfprintf_internal_r+0x165c>
  802520:	843ffc04 	addi	r16,r16,-16
  802524:	a400df0e 	bge	r20,r16,8028a4 <___vfprintf_internal_r+0x19d8>
  802528:	00c02074 	movhi	r3,129
  80252c:	18c04704 	addi	r3,r3,284
  802530:	90c00015 	stw	r3,0(r18)
  802534:	d8800817 	ldw	r2,32(sp)
  802538:	d8c00717 	ldw	r3,28(sp)
  80253c:	94400115 	stw	r17,4(r18)
  802540:	10800404 	addi	r2,r2,16
  802544:	18c00044 	addi	r3,r3,1
  802548:	d8800815 	stw	r2,32(sp)
  80254c:	d8c00715 	stw	r3,28(sp)
  802550:	94800204 	addi	r18,r18,8
  802554:	a8fff20e 	bge	r21,r3,802520 <___vfprintf_internal_r+0x1654>
  802558:	d9019e17 	ldw	r4,1656(sp)
  80255c:	d9c00404 	addi	r7,sp,16
  802560:	39400204 	addi	r5,r7,8
  802564:	0800e740 	call	800e74 <__sprint>
  802568:	103e171e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  80256c:	d8800404 	addi	r2,sp,16
  802570:	14800504 	addi	r18,r2,20
  802574:	003fea06 	br	802520 <___vfprintf_internal_r+0x1654>
  802578:	d901a417 	ldw	r4,1680(sp)
  80257c:	d941a517 	ldw	r5,1684(sp)
  802580:	0806d9c0 	call	806d9c <isnan>
  802584:	10004d26 	beq	r2,zero,8026bc <___vfprintf_internal_r+0x17f0>
  802588:	04c02074 	movhi	r19,129
  80258c:	9cc0b804 	addi	r19,r19,736
  802590:	05c000c4 	movi	r23,3
  802594:	003b1406 	br	8011e8 <___vfprintf_internal_r+0x31c>
  802598:	d8c1a017 	ldw	r3,1664(sp)
  80259c:	b5800044 	addi	r22,r22,1
  8025a0:	b1000003 	ldbu	r4,0(r22)
  8025a4:	18c00814 	ori	r3,r3,32
  8025a8:	d8c1a015 	stw	r3,1664(sp)
  8025ac:	003a9806 	br	801010 <___vfprintf_internal_r+0x144>
  8025b0:	05000184 	movi	r20,6
  8025b4:	003d0c06 	br	8019e8 <___vfprintf_internal_r+0xb1c>
  8025b8:	d9c1a017 	ldw	r7,1664(sp)
  8025bc:	3880100c 	andi	r2,r7,64
  8025c0:	1000a826 	beq	r2,zero,802864 <___vfprintf_internal_r+0x1998>
  8025c4:	d8819f17 	ldw	r2,1660(sp)
  8025c8:	d901a117 	ldw	r4,1668(sp)
  8025cc:	10c00017 	ldw	r3,0(r2)
  8025d0:	10800104 	addi	r2,r2,4
  8025d4:	d8819f15 	stw	r2,1660(sp)
  8025d8:	1900000d 	sth	r4,0(r3)
  8025dc:	003a6206 	br	800f68 <___vfprintf_internal_r+0x9c>
  8025e0:	d8819f17 	ldw	r2,1660(sp)
  8025e4:	10c00017 	ldw	r3,0(r2)
  8025e8:	11400104 	addi	r5,r2,4
  8025ec:	d9419f15 	stw	r5,1660(sp)
  8025f0:	003efe06 	br	8021ec <___vfprintf_internal_r+0x1320>
  8025f4:	d8819f17 	ldw	r2,1660(sp)
  8025f8:	0023883a 	mov	r17,zero
  8025fc:	14000017 	ldw	r16,0(r2)
  802600:	10800104 	addi	r2,r2,4
  802604:	d8819f15 	stw	r2,1660(sp)
  802608:	003f0406 	br	80221c <___vfprintf_internal_r+0x1350>
  80260c:	d8819f17 	ldw	r2,1660(sp)
  802610:	0023883a 	mov	r17,zero
  802614:	14000017 	ldw	r16,0(r2)
  802618:	11400104 	addi	r5,r2,4
  80261c:	d9419f15 	stw	r5,1660(sp)
  802620:	003ee906 	br	8021c8 <___vfprintf_internal_r+0x12fc>
  802624:	d8819f17 	ldw	r2,1660(sp)
  802628:	0023883a 	mov	r17,zero
  80262c:	14000017 	ldw	r16,0(r2)
  802630:	10800104 	addi	r2,r2,4
  802634:	d8819f15 	stw	r2,1660(sp)
  802638:	003ca906 	br	8018e0 <___vfprintf_internal_r+0xa14>
  80263c:	04c02074 	movhi	r19,129
  802640:	9cc0b904 	addi	r19,r19,740
  802644:	05c00184 	movi	r23,6
  802648:	003ae706 	br	8011e8 <___vfprintf_internal_r+0x31c>
  80264c:	d9019e17 	ldw	r4,1656(sp)
  802650:	d9c00404 	addi	r7,sp,16
  802654:	39400204 	addi	r5,r7,8
  802658:	0800e740 	call	800e74 <__sprint>
  80265c:	103dda1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802660:	d9819517 	ldw	r6,1620(sp)
  802664:	d8800404 	addi	r2,sp,16
  802668:	14800504 	addi	r18,r2,20
  80266c:	003f2106 	br	8022f4 <___vfprintf_internal_r+0x1428>
  802670:	d9019e17 	ldw	r4,1656(sp)
  802674:	d8c00404 	addi	r3,sp,16
  802678:	19400204 	addi	r5,r3,8
  80267c:	0800e740 	call	800e74 <__sprint>
  802680:	103dd11e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802684:	d9819517 	ldw	r6,1620(sp)
  802688:	d9000404 	addi	r4,sp,16
  80268c:	24800504 	addi	r18,r4,20
  802690:	003f0a06 	br	8022bc <___vfprintf_internal_r+0x13f0>
  802694:	d9019e17 	ldw	r4,1656(sp)
  802698:	d9c00404 	addi	r7,sp,16
  80269c:	39400204 	addi	r5,r7,8
  8026a0:	0800e740 	call	800e74 <__sprint>
  8026a4:	103dc81e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  8026a8:	d9819517 	ldw	r6,1620(sp)
  8026ac:	dc019617 	ldw	r16,1624(sp)
  8026b0:	d8800404 	addi	r2,sp,16
  8026b4:	14800504 	addi	r18,r2,20
  8026b8:	003e4506 	br	801fd0 <___vfprintf_internal_r+0x1104>
  8026bc:	d881a417 	ldw	r2,1680(sp)
  8026c0:	d8c1a017 	ldw	r3,1664(sp)
  8026c4:	d901a517 	ldw	r4,1684(sp)
  8026c8:	1021883a 	mov	r16,r2
  8026cc:	18c04014 	ori	r3,r3,256
  8026d0:	00801984 	movi	r2,102
  8026d4:	d8c1a015 	stw	r3,1664(sp)
  8026d8:	2023883a 	mov	r17,r4
  8026dc:	a02f883a 	mov	r23,r20
  8026e0:	d9819404 	addi	r6,sp,1616
  8026e4:	01c000c4 	movi	r7,3
  8026e8:	e0800526 	beq	fp,r2,802700 <___vfprintf_internal_r+0x1834>
  8026ec:	00801944 	movi	r2,101
  8026f0:	e0808626 	beq	fp,r2,80290c <___vfprintf_internal_r+0x1a40>
  8026f4:	00801144 	movi	r2,69
  8026f8:	e0808426 	beq	fp,r2,80290c <___vfprintf_internal_r+0x1a40>
  8026fc:	01c00084 	movi	r7,2
  802700:	8800e316 	blt	r17,zero,802a90 <___vfprintf_internal_r+0x1bc4>
  802704:	30000005 	stb	zero,0(r6)
  802708:	d9019d17 	ldw	r4,1652(sp)
  80270c:	d8819704 	addi	r2,sp,1628
  802710:	d8800215 	stw	r2,8(sp)
  802714:	d8c19804 	addi	r3,sp,1632
  802718:	d8819504 	addi	r2,sp,1620
  80271c:	800b883a 	mov	r5,r16
  802720:	880d883a 	mov	r6,r17
  802724:	d8c00315 	stw	r3,12(sp)
  802728:	ddc00015 	stw	r23,0(sp)
  80272c:	d8800115 	stw	r2,4(sp)
  802730:	08035400 	call	803540 <_dtoa_r>
  802734:	102b883a 	mov	r21,r2
  802738:	008019c4 	movi	r2,103
  80273c:	e0808d26 	beq	fp,r2,802974 <___vfprintf_internal_r+0x1aa8>
  802740:	008011c4 	movi	r2,71
  802744:	e0808b26 	beq	fp,r2,802974 <___vfprintf_internal_r+0x1aa8>
  802748:	00801984 	movi	r2,102
  80274c:	ade7883a 	add	r19,r21,r23
  802750:	e080be26 	beq	fp,r2,802a4c <___vfprintf_internal_r+0x1b80>
  802754:	000d883a 	mov	r6,zero
  802758:	000f883a 	mov	r7,zero
  80275c:	880b883a 	mov	r5,r17
  802760:	8009883a 	mov	r4,r16
  802764:	08089bc0 	call	8089bc <__eqdf2>
  802768:	1000a21e 	bne	r2,zero,8029f4 <___vfprintf_internal_r+0x1b28>
  80276c:	9805883a 	mov	r2,r19
  802770:	dcc19815 	stw	r19,1632(sp)
  802774:	14c0052e 	bgeu	r2,r19,80278c <___vfprintf_internal_r+0x18c0>
  802778:	00c00c04 	movi	r3,48
  80277c:	10c00005 	stb	r3,0(r2)
  802780:	10800044 	addi	r2,r2,1
  802784:	d8819815 	stw	r2,1632(sp)
  802788:	14fffc36 	bltu	r2,r19,80277c <___vfprintf_internal_r+0x18b0>
  80278c:	1545c83a 	sub	r2,r2,r21
  802790:	00c019c4 	movi	r3,103
  802794:	d8819615 	stw	r2,1624(sp)
  802798:	a827883a 	mov	r19,r21
  80279c:	e0c06c26 	beq	fp,r3,802950 <___vfprintf_internal_r+0x1a84>
  8027a0:	008011c4 	movi	r2,71
  8027a4:	e0806a26 	beq	fp,r2,802950 <___vfprintf_internal_r+0x1a84>
  8027a8:	d9819517 	ldw	r6,1620(sp)
  8027ac:	00801944 	movi	r2,101
  8027b0:	17005916 	blt	r2,fp,802918 <___vfprintf_internal_r+0x1a4c>
  8027b4:	31bfffc4 	addi	r6,r6,-1
  8027b8:	d9819515 	stw	r6,1620(sp)
  8027bc:	df000405 	stb	fp,16(sp)
  8027c0:	3023883a 	mov	r17,r6
  8027c4:	dd000444 	addi	r20,sp,17
  8027c8:	3000cb16 	blt	r6,zero,802af8 <___vfprintf_internal_r+0x1c2c>
  8027cc:	00800ac4 	movi	r2,43
  8027d0:	a0800005 	stb	r2,0(r20)
  8027d4:	d9000404 	addi	r4,sp,16
  8027d8:	00800244 	movi	r2,9
  8027dc:	dd000484 	addi	r20,sp,18
  8027e0:	24018e04 	addi	r16,r4,1592
  8027e4:	1440680e 	bge	r2,r17,802988 <___vfprintf_internal_r+0x1abc>
  8027e8:	102b883a 	mov	r21,r2
  8027ec:	8809883a 	mov	r4,r17
  8027f0:	01400284 	movi	r5,10
  8027f4:	08006800 	call	800680 <__modsi3>
  8027f8:	10800c04 	addi	r2,r2,48
  8027fc:	843fffc4 	addi	r16,r16,-1
  802800:	8809883a 	mov	r4,r17
  802804:	01400284 	movi	r5,10
  802808:	80800005 	stb	r2,0(r16)
  80280c:	08006300 	call	800630 <__divsi3>
  802810:	1023883a 	mov	r17,r2
  802814:	a8bff516 	blt	r21,r2,8027ec <___vfprintf_internal_r+0x1920>
  802818:	843fffc4 	addi	r16,r16,-1
  80281c:	10800c04 	addi	r2,r2,48
  802820:	d9c00404 	addi	r7,sp,16
  802824:	39418e04 	addi	r5,r7,1592
  802828:	80800005 	stb	r2,0(r16)
  80282c:	81405c2e 	bgeu	r16,r5,8029a0 <___vfprintf_internal_r+0x1ad4>
  802830:	80800003 	ldbu	r2,0(r16)
  802834:	84000044 	addi	r16,r16,1
  802838:	a0800005 	stb	r2,0(r20)
  80283c:	a5000044 	addi	r20,r20,1
  802840:	003ffa06 	br	80282c <___vfprintf_internal_r+0x1960>
  802844:	d9019e17 	ldw	r4,1656(sp)
  802848:	d9c00404 	addi	r7,sp,16
  80284c:	39400204 	addi	r5,r7,8
  802850:	0800e740 	call	800e74 <__sprint>
  802854:	103d5c1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802858:	d8800404 	addi	r2,sp,16
  80285c:	14800504 	addi	r18,r2,20
  802860:	003e0506 	br	802078 <___vfprintf_internal_r+0x11ac>
  802864:	d8819f17 	ldw	r2,1660(sp)
  802868:	d9c1a117 	ldw	r7,1668(sp)
  80286c:	10c00017 	ldw	r3,0(r2)
  802870:	11400104 	addi	r5,r2,4
  802874:	d9419f15 	stw	r5,1660(sp)
  802878:	19c00015 	stw	r7,0(r3)
  80287c:	0039ba06 	br	800f68 <___vfprintf_internal_r+0x9c>
  802880:	d9019e17 	ldw	r4,1656(sp)
  802884:	d8c00404 	addi	r3,sp,16
  802888:	19400204 	addi	r5,r3,8
  80288c:	0800e740 	call	800e74 <__sprint>
  802890:	103d4d1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802894:	d9819517 	ldw	r6,1620(sp)
  802898:	d9000404 	addi	r4,sp,16
  80289c:	24800504 	addi	r18,r4,20
  8028a0:	003f0a06 	br	8024cc <___vfprintf_internal_r+0x1600>
  8028a4:	d8800817 	ldw	r2,32(sp)
  8028a8:	d8c00717 	ldw	r3,28(sp)
  8028ac:	01002074 	movhi	r4,129
  8028b0:	21004704 	addi	r4,r4,284
  8028b4:	1405883a 	add	r2,r2,r16
  8028b8:	18c00044 	addi	r3,r3,1
  8028bc:	d8800815 	stw	r2,32(sp)
  8028c0:	008001c4 	movi	r2,7
  8028c4:	91000015 	stw	r4,0(r18)
  8028c8:	94000115 	stw	r16,4(r18)
  8028cc:	d8c00715 	stw	r3,28(sp)
  8028d0:	94800204 	addi	r18,r18,8
  8028d4:	10c04916 	blt	r2,r3,8029fc <___vfprintf_internal_r+0x1b30>
  8028d8:	d9019617 	ldw	r4,1624(sp)
  8028dc:	d8800817 	ldw	r2,32(sp)
  8028e0:	d8c00717 	ldw	r3,28(sp)
  8028e4:	94c00015 	stw	r19,0(r18)
  8028e8:	1105883a 	add	r2,r2,r4
  8028ec:	18c00044 	addi	r3,r3,1
  8028f0:	d8800815 	stw	r2,32(sp)
  8028f4:	008001c4 	movi	r2,7
  8028f8:	91000115 	stw	r4,4(r18)
  8028fc:	d8c00715 	stw	r3,28(sp)
  802900:	94800204 	addi	r18,r18,8
  802904:	10fac80e 	bge	r2,r3,801428 <___vfprintf_internal_r+0x55c>
  802908:	003e8606 	br	802324 <___vfprintf_internal_r+0x1458>
  80290c:	a5c00044 	addi	r23,r20,1
  802910:	01c00084 	movi	r7,2
  802914:	003f7a06 	br	802700 <___vfprintf_internal_r+0x1834>
  802918:	00801984 	movi	r2,102
  80291c:	e0806d26 	beq	fp,r2,802ad4 <___vfprintf_internal_r+0x1c08>
  802920:	d8819617 	ldw	r2,1624(sp)
  802924:	30806416 	blt	r6,r2,802ab8 <___vfprintf_internal_r+0x1bec>
  802928:	d9c1a017 	ldw	r7,1664(sp)
  80292c:	302f883a 	mov	r23,r6
  802930:	3880004c 	andi	r2,r7,1
  802934:	10000126 	beq	r2,zero,80293c <___vfprintf_internal_r+0x1a70>
  802938:	35c00044 	addi	r23,r6,1
  80293c:	d8819407 	ldb	r2,1616(sp)
  802940:	103a2926 	beq	r2,zero,8011e8 <___vfprintf_internal_r+0x31c>
  802944:	00800b44 	movi	r2,45
  802948:	d8819c05 	stb	r2,1648(sp)
  80294c:	003a2606 	br	8011e8 <___vfprintf_internal_r+0x31c>
  802950:	d9819517 	ldw	r6,1620(sp)
  802954:	00bfff04 	movi	r2,-4
  802958:	1180010e 	bge	r2,r6,802960 <___vfprintf_internal_r+0x1a94>
  80295c:	a1805b0e 	bge	r20,r6,802acc <___vfprintf_internal_r+0x1c00>
  802960:	00801944 	movi	r2,101
  802964:	e0c00126 	beq	fp,r3,80296c <___vfprintf_internal_r+0x1aa0>
  802968:	00801144 	movi	r2,69
  80296c:	1039883a 	mov	fp,r2
  802970:	003f8e06 	br	8027ac <___vfprintf_internal_r+0x18e0>
  802974:	d8c1a017 	ldw	r3,1664(sp)
  802978:	1880004c 	andi	r2,r3,1
  80297c:	103f721e 	bne	r2,zero,802748 <___vfprintf_internal_r+0x187c>
  802980:	d8819817 	ldw	r2,1632(sp)
  802984:	003f8106 	br	80278c <___vfprintf_internal_r+0x18c0>
  802988:	00800c04 	movi	r2,48
  80298c:	a0800005 	stb	r2,0(r20)
  802990:	88c00c04 	addi	r3,r17,48
  802994:	a5000044 	addi	r20,r20,1
  802998:	a0c00005 	stb	r3,0(r20)
  80299c:	a5000044 	addi	r20,r20,1
  8029a0:	d8c19617 	ldw	r3,1624(sp)
  8029a4:	d8800404 	addi	r2,sp,16
  8029a8:	a085c83a 	sub	r2,r20,r2
  8029ac:	d881a615 	stw	r2,1688(sp)
  8029b0:	10ef883a 	add	r23,r2,r3
  8029b4:	00800044 	movi	r2,1
  8029b8:	10c00316 	blt	r2,r3,8029c8 <___vfprintf_internal_r+0x1afc>
  8029bc:	d8c1a017 	ldw	r3,1664(sp)
  8029c0:	1884703a 	and	r2,r3,r2
  8029c4:	103fdd26 	beq	r2,zero,80293c <___vfprintf_internal_r+0x1a70>
  8029c8:	bdc00044 	addi	r23,r23,1
  8029cc:	003fdb06 	br	80293c <___vfprintf_internal_r+0x1a70>
  8029d0:	d9019e17 	ldw	r4,1656(sp)
  8029d4:	d9c00404 	addi	r7,sp,16
  8029d8:	39400204 	addi	r5,r7,8
  8029dc:	0800e740 	call	800e74 <__sprint>
  8029e0:	103cf91e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  8029e4:	d9819517 	ldw	r6,1620(sp)
  8029e8:	d8800404 	addi	r2,sp,16
  8029ec:	14800504 	addi	r18,r2,20
  8029f0:	003ec406 	br	802504 <___vfprintf_internal_r+0x1638>
  8029f4:	d8819817 	ldw	r2,1632(sp)
  8029f8:	003f5e06 	br	802774 <___vfprintf_internal_r+0x18a8>
  8029fc:	d9019e17 	ldw	r4,1656(sp)
  802a00:	d9c00404 	addi	r7,sp,16
  802a04:	39400204 	addi	r5,r7,8
  802a08:	0800e740 	call	800e74 <__sprint>
  802a0c:	103cee1e 	bne	r2,zero,801dc8 <___vfprintf_internal_r+0xefc>
  802a10:	d8800404 	addi	r2,sp,16
  802a14:	14800504 	addi	r18,r2,20
  802a18:	003faf06 	br	8028d8 <___vfprintf_internal_r+0x1a0c>
  802a1c:	d9019d17 	ldw	r4,1652(sp)
  802a20:	d8819904 	addi	r2,sp,1636
  802a24:	000b883a 	mov	r5,zero
  802a28:	d9819b04 	addi	r6,sp,1644
  802a2c:	000f883a 	mov	r7,zero
  802a30:	d8800015 	stw	r2,0(sp)
  802a34:	0802c380 	call	802c38 <_wcsrtombs_r>
  802a38:	102f883a 	mov	r23,r2
  802a3c:	00bfffc4 	movi	r2,-1
  802a40:	b8bce126 	beq	r23,r2,801dc8 <___vfprintf_internal_r+0xefc>
  802a44:	dcc19b15 	stw	r19,1644(sp)
  802a48:	003b3f06 	br	801748 <___vfprintf_internal_r+0x87c>
  802a4c:	a8c00007 	ldb	r3,0(r21)
  802a50:	00800c04 	movi	r2,48
  802a54:	18800326 	beq	r3,r2,802a64 <___vfprintf_internal_r+0x1b98>
  802a58:	d8819517 	ldw	r2,1620(sp)
  802a5c:	98a7883a 	add	r19,r19,r2
  802a60:	003f3c06 	br	802754 <___vfprintf_internal_r+0x1888>
  802a64:	000d883a 	mov	r6,zero
  802a68:	000f883a 	mov	r7,zero
  802a6c:	8009883a 	mov	r4,r16
  802a70:	880b883a 	mov	r5,r17
  802a74:	0808a480 	call	808a48 <__nedf2>
  802a78:	103ff726 	beq	r2,zero,802a58 <___vfprintf_internal_r+0x1b8c>
  802a7c:	00800044 	movi	r2,1
  802a80:	15c5c83a 	sub	r2,r2,r23
  802a84:	98a7883a 	add	r19,r19,r2
  802a88:	d8819515 	stw	r2,1620(sp)
  802a8c:	003f3106 	br	802754 <___vfprintf_internal_r+0x1888>
  802a90:	0005883a 	mov	r2,zero
  802a94:	00e00034 	movhi	r3,32768
  802a98:	18c00004 	addi	r3,r3,0
  802a9c:	1408f03a 	xor	r4,r2,r16
  802aa0:	88caf03a 	xor	r5,r17,r3
  802aa4:	00800b44 	movi	r2,45
  802aa8:	2021883a 	mov	r16,r4
  802aac:	2823883a 	mov	r17,r5
  802ab0:	30800005 	stb	r2,0(r6)
  802ab4:	003f1406 	br	802708 <___vfprintf_internal_r+0x183c>
  802ab8:	15c00044 	addi	r23,r2,1
  802abc:	01bf9f16 	blt	zero,r6,80293c <___vfprintf_internal_r+0x1a70>
  802ac0:	1185c83a 	sub	r2,r2,r6
  802ac4:	15c00084 	addi	r23,r2,2
  802ac8:	003f9c06 	br	80293c <___vfprintf_internal_r+0x1a70>
  802acc:	1839883a 	mov	fp,r3
  802ad0:	003f3606 	br	8027ac <___vfprintf_internal_r+0x18e0>
  802ad4:	01800c0e 	bge	zero,r6,802b08 <___vfprintf_internal_r+0x1c3c>
  802ad8:	302f883a 	mov	r23,r6
  802adc:	a000031e 	bne	r20,zero,802aec <___vfprintf_internal_r+0x1c20>
  802ae0:	d901a017 	ldw	r4,1664(sp)
  802ae4:	2080004c 	andi	r2,r4,1
  802ae8:	103f9426 	beq	r2,zero,80293c <___vfprintf_internal_r+0x1a70>
  802aec:	a185883a 	add	r2,r20,r6
  802af0:	15c00044 	addi	r23,r2,1
  802af4:	003f9106 	br	80293c <___vfprintf_internal_r+0x1a70>
  802af8:	00800b44 	movi	r2,45
  802afc:	01a3c83a 	sub	r17,zero,r6
  802b00:	a0800005 	stb	r2,0(r20)
  802b04:	003f3306 	br	8027d4 <___vfprintf_internal_r+0x1908>
  802b08:	a000041e 	bne	r20,zero,802b1c <___vfprintf_internal_r+0x1c50>
  802b0c:	d941a017 	ldw	r5,1664(sp)
  802b10:	05c00044 	movi	r23,1
  802b14:	2880004c 	andi	r2,r5,1
  802b18:	103f8826 	beq	r2,zero,80293c <___vfprintf_internal_r+0x1a70>
  802b1c:	a5c00084 	addi	r23,r20,2
  802b20:	003f8606 	br	80293c <___vfprintf_internal_r+0x1a70>
  802b24:	d8819f17 	ldw	r2,1660(sp)
  802b28:	15000017 	ldw	r20,0(r2)
  802b2c:	10c00104 	addi	r3,r2,4
  802b30:	d8c19f15 	stw	r3,1660(sp)
  802b34:	a03bde0e 	bge	r20,zero,801ab0 <___vfprintf_internal_r+0xbe4>
  802b38:	b1000003 	ldbu	r4,0(r22)
  802b3c:	053fffc4 	movi	r20,-1
  802b40:	00393306 	br	801010 <___vfprintf_internal_r+0x144>

00802b44 <__vfprintf_internal>:
  802b44:	d0e00a17 	ldw	r3,-32728(gp)
  802b48:	defffc04 	addi	sp,sp,-16
  802b4c:	dc000215 	stw	r16,8(sp)
  802b50:	dc400115 	stw	r17,4(sp)
  802b54:	dc800015 	stw	r18,0(sp)
  802b58:	dfc00315 	stw	ra,12(sp)
  802b5c:	18800e17 	ldw	r2,56(r3)
  802b60:	2023883a 	mov	r17,r4
  802b64:	2825883a 	mov	r18,r5
  802b68:	1809883a 	mov	r4,r3
  802b6c:	3021883a 	mov	r16,r6
  802b70:	10000c26 	beq	r2,zero,802ba4 <__vfprintf_internal+0x60>
  802b74:	1809883a 	mov	r4,r3
  802b78:	880b883a 	mov	r5,r17
  802b7c:	900d883a 	mov	r6,r18
  802b80:	800f883a 	mov	r7,r16
  802b84:	02002034 	movhi	r8,128
  802b88:	4203b304 	addi	r8,r8,3788
  802b8c:	dfc00317 	ldw	ra,12(sp)
  802b90:	dc000217 	ldw	r16,8(sp)
  802b94:	dc400117 	ldw	r17,4(sp)
  802b98:	dc800017 	ldw	r18,0(sp)
  802b9c:	dec00404 	addi	sp,sp,16
  802ba0:	4000683a 	jmp	r8
  802ba4:	0804a900 	call	804a90 <__sinit>
  802ba8:	d0e00a17 	ldw	r3,-32728(gp)
  802bac:	003ff106 	br	802b74 <__vfprintf_internal+0x30>

00802bb0 <_wcrtomb_r>:
  802bb0:	defffa04 	addi	sp,sp,-24
  802bb4:	dc000415 	stw	r16,16(sp)
  802bb8:	dc400315 	stw	r17,12(sp)
  802bbc:	dfc00515 	stw	ra,20(sp)
  802bc0:	2023883a 	mov	r17,r4
  802bc4:	3821883a 	mov	r16,r7
  802bc8:	28000b26 	beq	r5,zero,802bf8 <_wcrtomb_r+0x48>
  802bcc:	0802db40 	call	802db4 <_wctomb_r>
  802bd0:	1007883a 	mov	r3,r2
  802bd4:	1009883a 	mov	r4,r2
  802bd8:	00bfffc4 	movi	r2,-1
  802bdc:	18800926 	beq	r3,r2,802c04 <_wcrtomb_r+0x54>
  802be0:	2005883a 	mov	r2,r4
  802be4:	dfc00517 	ldw	ra,20(sp)
  802be8:	dc000417 	ldw	r16,16(sp)
  802bec:	dc400317 	ldw	r17,12(sp)
  802bf0:	dec00604 	addi	sp,sp,24
  802bf4:	f800283a 	ret
  802bf8:	d80b883a 	mov	r5,sp
  802bfc:	000d883a 	mov	r6,zero
  802c00:	003ff206 	br	802bcc <_wcrtomb_r+0x1c>
  802c04:	80000015 	stw	zero,0(r16)
  802c08:	00802284 	movi	r2,138
  802c0c:	88800015 	stw	r2,0(r17)
  802c10:	003ff306 	br	802be0 <_wcrtomb_r+0x30>

00802c14 <wcrtomb>:
  802c14:	2013883a 	mov	r9,r4
  802c18:	d1200a17 	ldw	r4,-32728(gp)
  802c1c:	2807883a 	mov	r3,r5
  802c20:	300f883a 	mov	r7,r6
  802c24:	480b883a 	mov	r5,r9
  802c28:	180d883a 	mov	r6,r3
  802c2c:	02002034 	movhi	r8,128
  802c30:	420aec04 	addi	r8,r8,11184
  802c34:	4000683a 	jmp	r8

00802c38 <_wcsrtombs_r>:
  802c38:	defff204 	addi	sp,sp,-56
  802c3c:	dc000b15 	stw	r16,44(sp)
  802c40:	dc800915 	stw	r18,36(sp)
  802c44:	dd000715 	stw	r20,28(sp)
  802c48:	ddc00415 	stw	r23,16(sp)
  802c4c:	dfc00d15 	stw	ra,52(sp)
  802c50:	df000c15 	stw	fp,48(sp)
  802c54:	dc400a15 	stw	r17,40(sp)
  802c58:	dcc00815 	stw	r19,32(sp)
  802c5c:	dd400615 	stw	r21,24(sp)
  802c60:	dd800515 	stw	r22,20(sp)
  802c64:	2821883a 	mov	r16,r5
  802c68:	d9000315 	stw	r4,12(sp)
  802c6c:	302f883a 	mov	r23,r6
  802c70:	3825883a 	mov	r18,r7
  802c74:	dd000e17 	ldw	r20,56(sp)
  802c78:	28002f26 	beq	r5,zero,802d38 <_wcsrtombs_r+0x100>
  802c7c:	002b883a 	mov	r21,zero
  802c80:	bc400017 	ldw	r17,0(r23)
  802c84:	04801f2e 	bgeu	zero,r18,802d04 <_wcsrtombs_r+0xcc>
  802c88:	8039003a 	cmpeq	fp,r16,zero
  802c8c:	89800017 	ldw	r6,0(r17)
  802c90:	d9000317 	ldw	r4,12(sp)
  802c94:	d80b883a 	mov	r5,sp
  802c98:	a00f883a 	mov	r7,r20
  802c9c:	a5800017 	ldw	r22,0(r20)
  802ca0:	a4c00117 	ldw	r19,4(r20)
  802ca4:	0802bb00 	call	802bb0 <_wcrtomb_r>
  802ca8:	100b883a 	mov	r5,r2
  802cac:	00bfffc4 	movi	r2,-1
  802cb0:	28802626 	beq	r5,r2,802d4c <_wcsrtombs_r+0x114>
  802cb4:	9145c83a 	sub	r2,r18,r5
  802cb8:	15402136 	bltu	r2,r21,802d40 <_wcsrtombs_r+0x108>
  802cbc:	2c80202e 	bgeu	r5,r18,802d40 <_wcsrtombs_r+0x108>
  802cc0:	a96b883a 	add	r21,r21,r5
  802cc4:	e0000b1e 	bne	fp,zero,802cf4 <_wcsrtombs_r+0xbc>
  802cc8:	0009883a 	mov	r4,zero
  802ccc:	0140060e 	bge	zero,r5,802ce8 <_wcsrtombs_r+0xb0>
  802cd0:	d905883a 	add	r2,sp,r4
  802cd4:	10c00003 	ldbu	r3,0(r2)
  802cd8:	21000044 	addi	r4,r4,1
  802cdc:	80c00005 	stb	r3,0(r16)
  802ce0:	84000044 	addi	r16,r16,1
  802ce4:	217ffa16 	blt	r4,r5,802cd0 <_wcsrtombs_r+0x98>
  802ce8:	b8800017 	ldw	r2,0(r23)
  802cec:	10800104 	addi	r2,r2,4
  802cf0:	b8800015 	stw	r2,0(r23)
  802cf4:	88800017 	ldw	r2,0(r17)
  802cf8:	8c400104 	addi	r17,r17,4
  802cfc:	10001926 	beq	r2,zero,802d64 <_wcsrtombs_r+0x12c>
  802d00:	acbfe236 	bltu	r21,r18,802c8c <_wcsrtombs_r+0x54>
  802d04:	a805883a 	mov	r2,r21
  802d08:	dfc00d17 	ldw	ra,52(sp)
  802d0c:	df000c17 	ldw	fp,48(sp)
  802d10:	dc000b17 	ldw	r16,44(sp)
  802d14:	dc400a17 	ldw	r17,40(sp)
  802d18:	dc800917 	ldw	r18,36(sp)
  802d1c:	dcc00817 	ldw	r19,32(sp)
  802d20:	dd000717 	ldw	r20,28(sp)
  802d24:	dd400617 	ldw	r21,24(sp)
  802d28:	dd800517 	ldw	r22,20(sp)
  802d2c:	ddc00417 	ldw	r23,16(sp)
  802d30:	dec00e04 	addi	sp,sp,56
  802d34:	f800283a 	ret
  802d38:	04bfffc4 	movi	r18,-1
  802d3c:	003fcf06 	br	802c7c <_wcsrtombs_r+0x44>
  802d40:	a4c00115 	stw	r19,4(r20)
  802d44:	a5800015 	stw	r22,0(r20)
  802d48:	003fee06 	br	802d04 <_wcsrtombs_r+0xcc>
  802d4c:	d8c00317 	ldw	r3,12(sp)
  802d50:	00802284 	movi	r2,138
  802d54:	18800015 	stw	r2,0(r3)
  802d58:	2805883a 	mov	r2,r5
  802d5c:	a0000015 	stw	zero,0(r20)
  802d60:	003fe906 	br	802d08 <_wcsrtombs_r+0xd0>
  802d64:	e000011e 	bne	fp,zero,802d6c <_wcsrtombs_r+0x134>
  802d68:	b8000015 	stw	zero,0(r23)
  802d6c:	a8bfffc4 	addi	r2,r21,-1
  802d70:	a0000015 	stw	zero,0(r20)
  802d74:	003fe406 	br	802d08 <_wcsrtombs_r+0xd0>

00802d78 <wcsrtombs>:
  802d78:	d0e00a17 	ldw	r3,-32728(gp)
  802d7c:	defffe04 	addi	sp,sp,-8
  802d80:	2013883a 	mov	r9,r4
  802d84:	2817883a 	mov	r11,r5
  802d88:	301b883a 	mov	r13,r6
  802d8c:	d9c00015 	stw	r7,0(sp)
  802d90:	1809883a 	mov	r4,r3
  802d94:	480b883a 	mov	r5,r9
  802d98:	580d883a 	mov	r6,r11
  802d9c:	680f883a 	mov	r7,r13
  802da0:	dfc00115 	stw	ra,4(sp)
  802da4:	0802c380 	call	802c38 <_wcsrtombs_r>
  802da8:	dfc00117 	ldw	ra,4(sp)
  802dac:	dec00204 	addi	sp,sp,8
  802db0:	f800283a 	ret

00802db4 <_wctomb_r>:
  802db4:	defffb04 	addi	sp,sp,-20
  802db8:	01002074 	movhi	r4,129
  802dbc:	21037304 	addi	r4,r4,3532
  802dc0:	dc000315 	stw	r16,12(sp)
  802dc4:	dc400215 	stw	r17,8(sp)
  802dc8:	dc800115 	stw	r18,4(sp)
  802dcc:	dcc00015 	stw	r19,0(sp)
  802dd0:	2821883a 	mov	r16,r5
  802dd4:	dfc00415 	stw	ra,16(sp)
  802dd8:	3023883a 	mov	r17,r6
  802ddc:	3827883a 	mov	r19,r7
  802de0:	04800044 	movi	r18,1
  802de4:	08070040 	call	807004 <strlen>
  802de8:	8006c03a 	cmpne	r3,r16,zero
  802dec:	90800c36 	bltu	r18,r2,802e20 <_wctomb_r+0x6c>
  802df0:	0011883a 	mov	r8,zero
  802df4:	18000226 	beq	r3,zero,802e00 <_wctomb_r+0x4c>
  802df8:	84400005 	stb	r17,0(r16)
  802dfc:	02000044 	movi	r8,1
  802e00:	4005883a 	mov	r2,r8
  802e04:	dfc00417 	ldw	ra,16(sp)
  802e08:	dc000317 	ldw	r16,12(sp)
  802e0c:	dc400217 	ldw	r17,8(sp)
  802e10:	dc800117 	ldw	r18,4(sp)
  802e14:	dcc00017 	ldw	r19,0(sp)
  802e18:	dec00504 	addi	sp,sp,20
  802e1c:	f800283a 	ret
  802e20:	01002074 	movhi	r4,129
  802e24:	21037304 	addi	r4,r4,3532
  802e28:	01402074 	movhi	r5,129
  802e2c:	2940bb04 	addi	r5,r5,748
  802e30:	0806f4c0 	call	806f4c <strcmp>
  802e34:	10003a1e 	bne	r2,zero,802f20 <_wctomb_r+0x16c>
  802e38:	0011883a 	mov	r8,zero
  802e3c:	803ff026 	beq	r16,zero,802e00 <_wctomb_r+0x4c>
  802e40:	00801fc4 	movi	r2,127
  802e44:	9011883a 	mov	r8,r18
  802e48:	1440630e 	bge	r2,r17,802fd8 <_wctomb_r+0x224>
  802e4c:	88ffe004 	addi	r3,r17,-128
  802e50:	0081dfc4 	movi	r2,1919
  802e54:	027fe004 	movi	r9,-128
  802e58:	10c0b42e 	bgeu	r2,r3,80312c <_wctomb_r+0x378>
  802e5c:	88fe0004 	addi	r3,r17,-2048
  802e60:	00bdffd4 	movui	r2,63487
  802e64:	10c05e2e 	bgeu	r2,r3,802fe0 <_wctomb_r+0x22c>
  802e68:	00bffff4 	movhi	r2,65535
  802e6c:	10800004 	addi	r2,r2,0
  802e70:	8885883a 	add	r2,r17,r2
  802e74:	00c007f4 	movhi	r3,31
  802e78:	18ffffc4 	addi	r3,r3,-1
  802e7c:	1880b52e 	bgeu	r3,r2,803154 <_wctomb_r+0x3a0>
  802e80:	00bff834 	movhi	r2,65504
  802e84:	10800004 	addi	r2,r2,0
  802e88:	8885883a 	add	r2,r17,r2
  802e8c:	00c0f834 	movhi	r3,992
  802e90:	18ffffc4 	addi	r3,r3,-1
  802e94:	1880c32e 	bgeu	r3,r2,8031a4 <_wctomb_r+0x3f0>
  802e98:	00810034 	movhi	r2,1024
  802e9c:	10bfffc4 	addi	r2,r2,-1
  802ea0:	023fffc4 	movi	r8,-1
  802ea4:	147fd60e 	bge	r2,r17,802e00 <_wctomb_r+0x4c>
  802ea8:	88d0002c 	andhi	r3,r17,16384
  802eac:	1807d7ba 	srai	r3,r3,30
  802eb0:	890fc02c 	andhi	r4,r17,16128
  802eb4:	2009d63a 	srai	r4,r4,24
  802eb8:	89403f2c 	andhi	r5,r17,252
  802ebc:	00bfff04 	movi	r2,-4
  802ec0:	280bd4ba 	srai	r5,r5,18
  802ec4:	880cd33a 	srli	r6,r17,12
  802ec8:	1886b03a 	or	r3,r3,r2
  802ecc:	89c3f00c 	andi	r7,r17,4032
  802ed0:	80c00005 	stb	r3,0(r16)
  802ed4:	2248b03a 	or	r4,r4,r9
  802ed8:	84000044 	addi	r16,r16,1
  802edc:	380fd1ba 	srai	r7,r7,6
  802ee0:	81000005 	stb	r4,0(r16)
  802ee4:	2a4ab03a 	or	r5,r5,r9
  802ee8:	84000044 	addi	r16,r16,1
  802eec:	31800fcc 	andi	r6,r6,63
  802ef0:	81400005 	stb	r5,0(r16)
  802ef4:	324cb03a 	or	r6,r6,r9
  802ef8:	84000044 	addi	r16,r16,1
  802efc:	88800fcc 	andi	r2,r17,63
  802f00:	81800005 	stb	r6,0(r16)
  802f04:	1244b03a 	or	r2,r2,r9
  802f08:	84000044 	addi	r16,r16,1
  802f0c:	3a4eb03a 	or	r7,r7,r9
  802f10:	02000184 	movi	r8,6
  802f14:	80800045 	stb	r2,1(r16)
  802f18:	81c00005 	stb	r7,0(r16)
  802f1c:	003fb806 	br	802e00 <_wctomb_r+0x4c>
  802f20:	01002074 	movhi	r4,129
  802f24:	21037304 	addi	r4,r4,3532
  802f28:	01402074 	movhi	r5,129
  802f2c:	2940bd04 	addi	r5,r5,756
  802f30:	0806f4c0 	call	806f4c <strcmp>
  802f34:	10003f1e 	bne	r2,zero,803034 <_wctomb_r+0x280>
  802f38:	8006c03a 	cmpne	r3,r16,zero
  802f3c:	8809d23a 	srai	r4,r17,8
  802f40:	0011883a 	mov	r8,zero
  802f44:	183fae26 	beq	r3,zero,802e00 <_wctomb_r+0x4c>
  802f48:	20803fcc 	andi	r2,r4,255
  802f4c:	103fa826 	beq	r2,zero,802df0 <_wctomb_r+0x3c>
  802f50:	20801fc4 	addi	r2,r4,127
  802f54:	10803fcc 	andi	r2,r2,255
  802f58:	00c00784 	movi	r3,30
  802f5c:	1880042e 	bgeu	r3,r2,802f70 <_wctomb_r+0x1bc>
  802f60:	20800804 	addi	r2,r4,32
  802f64:	10803fcc 	andi	r2,r2,255
  802f68:	00c003c4 	movi	r3,15
  802f6c:	18804436 	bltu	r3,r2,803080 <_wctomb_r+0x2cc>
  802f70:	88bff004 	addi	r2,r17,-64
  802f74:	10803fcc 	andi	r2,r2,255
  802f78:	00c00f84 	movi	r3,62
  802f7c:	1880042e 	bgeu	r3,r2,802f90 <_wctomb_r+0x1dc>
  802f80:	88bfe004 	addi	r2,r17,-128
  802f84:	10803fcc 	andi	r2,r2,255
  802f88:	00c01f04 	movi	r3,124
  802f8c:	18803c36 	bltu	r3,r2,803080 <_wctomb_r+0x2cc>
  802f90:	02000084 	movi	r8,2
  802f94:	84400045 	stb	r17,1(r16)
  802f98:	81000005 	stb	r4,0(r16)
  802f9c:	003f9806 	br	802e00 <_wctomb_r+0x4c>
  802fa0:	98800017 	ldw	r2,0(r19)
  802fa4:	10000b26 	beq	r2,zero,802fd4 <_wctomb_r+0x220>
  802fa8:	98000015 	stw	zero,0(r19)
  802fac:	008006c4 	movi	r2,27
  802fb0:	80800005 	stb	r2,0(r16)
  802fb4:	84000044 	addi	r16,r16,1
  802fb8:	00800a04 	movi	r2,40
  802fbc:	80800005 	stb	r2,0(r16)
  802fc0:	84000044 	addi	r16,r16,1
  802fc4:	00801084 	movi	r2,66
  802fc8:	80800005 	stb	r2,0(r16)
  802fcc:	010000c4 	movi	r4,3
  802fd0:	84000044 	addi	r16,r16,1
  802fd4:	22000044 	addi	r8,r4,1
  802fd8:	84400005 	stb	r17,0(r16)
  802fdc:	003f8806 	br	802e00 <_wctomb_r+0x4c>
  802fe0:	00bffff4 	movhi	r2,65535
  802fe4:	108a0004 	addi	r2,r2,10240
  802fe8:	8885883a 	add	r2,r17,r2
  802fec:	00c1ffc4 	movi	r3,2047
  802ff0:	023fffc4 	movi	r8,-1
  802ff4:	18bf822e 	bgeu	r3,r2,802e00 <_wctomb_r+0x4c>
  802ff8:	88fc000c 	andi	r3,r17,61440
  802ffc:	1807d33a 	srai	r3,r3,12
  803000:	8943f00c 	andi	r5,r17,4032
  803004:	280bd1ba 	srai	r5,r5,6
  803008:	00bff804 	movi	r2,-32
  80300c:	1886b03a 	or	r3,r3,r2
  803010:	89000fcc 	andi	r4,r17,63
  803014:	80c00005 	stb	r3,0(r16)
  803018:	2248b03a 	or	r4,r4,r9
  80301c:	84000044 	addi	r16,r16,1
  803020:	2a4ab03a 	or	r5,r5,r9
  803024:	020000c4 	movi	r8,3
  803028:	81000045 	stb	r4,1(r16)
  80302c:	81400005 	stb	r5,0(r16)
  803030:	003f7306 	br	802e00 <_wctomb_r+0x4c>
  803034:	01002074 	movhi	r4,129
  803038:	21037304 	addi	r4,r4,3532
  80303c:	01402074 	movhi	r5,129
  803040:	2940bf04 	addi	r5,r5,764
  803044:	0806f4c0 	call	806f4c <strcmp>
  803048:	1000131e 	bne	r2,zero,803098 <_wctomb_r+0x2e4>
  80304c:	8006c03a 	cmpne	r3,r16,zero
  803050:	880bd23a 	srai	r5,r17,8
  803054:	0011883a 	mov	r8,zero
  803058:	183f6926 	beq	r3,zero,802e00 <_wctomb_r+0x4c>
  80305c:	28803fcc 	andi	r2,r5,255
  803060:	103f6326 	beq	r2,zero,802df0 <_wctomb_r+0x3c>
  803064:	01802804 	movi	r6,160
  803068:	3080052e 	bgeu	r6,r2,803080 <_wctomb_r+0x2cc>
  80306c:	00c03fc4 	movi	r3,255
  803070:	10c00326 	beq	r2,r3,803080 <_wctomb_r+0x2cc>
  803074:	88803fcc 	andi	r2,r17,255
  803078:	3080012e 	bgeu	r6,r2,803080 <_wctomb_r+0x2cc>
  80307c:	10c0021e 	bne	r2,r3,803088 <_wctomb_r+0x2d4>
  803080:	023fffc4 	movi	r8,-1
  803084:	003f5e06 	br	802e00 <_wctomb_r+0x4c>
  803088:	02000084 	movi	r8,2
  80308c:	84400045 	stb	r17,1(r16)
  803090:	81400005 	stb	r5,0(r16)
  803094:	003f5a06 	br	802e00 <_wctomb_r+0x4c>
  803098:	01002074 	movhi	r4,129
  80309c:	21037304 	addi	r4,r4,3532
  8030a0:	01402074 	movhi	r5,129
  8030a4:	2940c104 	addi	r5,r5,772
  8030a8:	0806f4c0 	call	806f4c <strcmp>
  8030ac:	8006c03a 	cmpne	r3,r16,zero
  8030b0:	103f4f1e 	bne	r2,zero,802df0 <_wctomb_r+0x3c>
  8030b4:	8807d23a 	srai	r3,r17,8
  8030b8:	0009883a 	mov	r4,zero
  8030bc:	9011883a 	mov	r8,r18
  8030c0:	803f4f26 	beq	r16,zero,802e00 <_wctomb_r+0x4c>
  8030c4:	18803fcc 	andi	r2,r3,255
  8030c8:	103fb526 	beq	r2,zero,802fa0 <_wctomb_r+0x1ec>
  8030cc:	18bff7c4 	addi	r2,r3,-33
  8030d0:	10803fcc 	andi	r2,r2,255
  8030d4:	01401744 	movi	r5,93
  8030d8:	28bfe936 	bltu	r5,r2,803080 <_wctomb_r+0x2cc>
  8030dc:	88bff7c4 	addi	r2,r17,-33
  8030e0:	10803fcc 	andi	r2,r2,255
  8030e4:	28bfe636 	bltu	r5,r2,803080 <_wctomb_r+0x2cc>
  8030e8:	98800017 	ldw	r2,0(r19)
  8030ec:	10000b1e 	bne	r2,zero,80311c <_wctomb_r+0x368>
  8030f0:	9c800015 	stw	r18,0(r19)
  8030f4:	008006c4 	movi	r2,27
  8030f8:	80800005 	stb	r2,0(r16)
  8030fc:	84000044 	addi	r16,r16,1
  803100:	00800904 	movi	r2,36
  803104:	80800005 	stb	r2,0(r16)
  803108:	84000044 	addi	r16,r16,1
  80310c:	00801084 	movi	r2,66
  803110:	80800005 	stb	r2,0(r16)
  803114:	010000c4 	movi	r4,3
  803118:	84000044 	addi	r16,r16,1
  80311c:	22000084 	addi	r8,r4,2
  803120:	84400045 	stb	r17,1(r16)
  803124:	80c00005 	stb	r3,0(r16)
  803128:	003f3506 	br	802e00 <_wctomb_r+0x4c>
  80312c:	8901f00c 	andi	r4,r17,1984
  803130:	2009d1ba 	srai	r4,r4,6
  803134:	88c00fcc 	andi	r3,r17,63
  803138:	00bff004 	movi	r2,-64
  80313c:	2088b03a 	or	r4,r4,r2
  803140:	1a46b03a 	or	r3,r3,r9
  803144:	02000084 	movi	r8,2
  803148:	80c00045 	stb	r3,1(r16)
  80314c:	81000005 	stb	r4,0(r16)
  803150:	003f2b06 	br	802e00 <_wctomb_r+0x4c>
  803154:	88c0072c 	andhi	r3,r17,28
  803158:	1807d4ba 	srai	r3,r3,18
  80315c:	8808d33a 	srli	r4,r17,12
  803160:	8943f00c 	andi	r5,r17,4032
  803164:	00bffc04 	movi	r2,-16
  803168:	280bd1ba 	srai	r5,r5,6
  80316c:	1886b03a 	or	r3,r3,r2
  803170:	21000fcc 	andi	r4,r4,63
  803174:	80c00005 	stb	r3,0(r16)
  803178:	2248b03a 	or	r4,r4,r9
  80317c:	84000044 	addi	r16,r16,1
  803180:	88800fcc 	andi	r2,r17,63
  803184:	81000005 	stb	r4,0(r16)
  803188:	1244b03a 	or	r2,r2,r9
  80318c:	84000044 	addi	r16,r16,1
  803190:	2a4ab03a 	or	r5,r5,r9
  803194:	02000104 	movi	r8,4
  803198:	80800045 	stb	r2,1(r16)
  80319c:	81400005 	stb	r5,0(r16)
  8031a0:	003f1706 	br	802e00 <_wctomb_r+0x4c>
  8031a4:	88c0c02c 	andhi	r3,r17,768
  8031a8:	1807d63a 	srai	r3,r3,24
  8031ac:	89003f2c 	andhi	r4,r17,252
  8031b0:	2009d4ba 	srai	r4,r4,18
  8031b4:	880ad33a 	srli	r5,r17,12
  8031b8:	00bffe04 	movi	r2,-8
  8031bc:	8983f00c 	andi	r6,r17,4032
  8031c0:	1886b03a 	or	r3,r3,r2
  8031c4:	300dd1ba 	srai	r6,r6,6
  8031c8:	80c00005 	stb	r3,0(r16)
  8031cc:	2248b03a 	or	r4,r4,r9
  8031d0:	84000044 	addi	r16,r16,1
  8031d4:	29400fcc 	andi	r5,r5,63
  8031d8:	81000005 	stb	r4,0(r16)
  8031dc:	2a4ab03a 	or	r5,r5,r9
  8031e0:	84000044 	addi	r16,r16,1
  8031e4:	88800fcc 	andi	r2,r17,63
  8031e8:	81400005 	stb	r5,0(r16)
  8031ec:	1244b03a 	or	r2,r2,r9
  8031f0:	84000044 	addi	r16,r16,1
  8031f4:	324cb03a 	or	r6,r6,r9
  8031f8:	02000144 	movi	r8,5
  8031fc:	80800045 	stb	r2,1(r16)
  803200:	81800005 	stb	r6,0(r16)
  803204:	003efe06 	br	802e00 <_wctomb_r+0x4c>

00803208 <__swsetup>:
  803208:	d0e00a17 	ldw	r3,-32728(gp)
  80320c:	defffe04 	addi	sp,sp,-8
  803210:	dc000015 	stw	r16,0(sp)
  803214:	dfc00115 	stw	ra,4(sp)
  803218:	18800e17 	ldw	r2,56(r3)
  80321c:	2021883a 	mov	r16,r4
  803220:	10003526 	beq	r2,zero,8032f8 <__swsetup+0xf0>
  803224:	8180030b 	ldhu	r6,12(r16)
  803228:	30ffffcc 	andi	r3,r6,65535
  80322c:	1880020c 	andi	r2,r3,8
  803230:	1000251e 	bne	r2,zero,8032c8 <__swsetup+0xc0>
  803234:	1880040c 	andi	r2,r3,16
  803238:	013fffc4 	movi	r4,-1
  80323c:	10001d26 	beq	r2,zero,8032b4 <__swsetup+0xac>
  803240:	1880010c 	andi	r2,r3,4
  803244:	10002f26 	beq	r2,zero,803304 <__swsetup+0xfc>
  803248:	81400c17 	ldw	r5,48(r16)
  80324c:	28000626 	beq	r5,zero,803268 <__swsetup+0x60>
  803250:	80801004 	addi	r2,r16,64
  803254:	28800326 	beq	r5,r2,803264 <__swsetup+0x5c>
  803258:	d1200a17 	ldw	r4,-32728(gp)
  80325c:	0804c500 	call	804c50 <_free_r>
  803260:	8180030b 	ldhu	r6,12(r16)
  803264:	80000c15 	stw	zero,48(r16)
  803268:	00bff6c4 	movi	r2,-37
  80326c:	3084703a 	and	r2,r6,r2
  803270:	80c00417 	ldw	r3,16(r16)
  803274:	100d883a 	mov	r6,r2
  803278:	8080030d 	sth	r2,12(r16)
  80327c:	30800214 	ori	r2,r6,8
  803280:	80000115 	stw	zero,4(r16)
  803284:	80c00015 	stw	r3,0(r16)
  803288:	8080030d 	sth	r2,12(r16)
  80328c:	18001026 	beq	r3,zero,8032d0 <__swsetup+0xc8>
  803290:	80c0030b 	ldhu	r3,12(r16)
  803294:	1880004c 	andi	r2,r3,1
  803298:	1000121e 	bne	r2,zero,8032e4 <__swsetup+0xdc>
  80329c:	1880008c 	andi	r2,r3,2
  8032a0:	0007883a 	mov	r3,zero
  8032a4:	1000011e 	bne	r2,zero,8032ac <__swsetup+0xa4>
  8032a8:	80c00517 	ldw	r3,20(r16)
  8032ac:	80c00215 	stw	r3,8(r16)
  8032b0:	0009883a 	mov	r4,zero
  8032b4:	2005883a 	mov	r2,r4
  8032b8:	dfc00117 	ldw	ra,4(sp)
  8032bc:	dc000017 	ldw	r16,0(sp)
  8032c0:	dec00204 	addi	sp,sp,8
  8032c4:	f800283a 	ret
  8032c8:	80c00417 	ldw	r3,16(r16)
  8032cc:	183ff01e 	bne	r3,zero,803290 <__swsetup+0x88>
  8032d0:	8009883a 	mov	r4,r16
  8032d4:	08054280 	call	805428 <__smakebuf>
  8032d8:	80c0030b 	ldhu	r3,12(r16)
  8032dc:	1880004c 	andi	r2,r3,1
  8032e0:	103fee26 	beq	r2,zero,80329c <__swsetup+0x94>
  8032e4:	80800517 	ldw	r2,20(r16)
  8032e8:	80000215 	stw	zero,8(r16)
  8032ec:	0085c83a 	sub	r2,zero,r2
  8032f0:	80800615 	stw	r2,24(r16)
  8032f4:	003fee06 	br	8032b0 <__swsetup+0xa8>
  8032f8:	1809883a 	mov	r4,r3
  8032fc:	0804a900 	call	804a90 <__sinit>
  803300:	003fc806 	br	803224 <__swsetup+0x1c>
  803304:	80c00417 	ldw	r3,16(r16)
  803308:	30800214 	ori	r2,r6,8
  80330c:	8080030d 	sth	r2,12(r16)
  803310:	003fde06 	br	80328c <__swsetup+0x84>

00803314 <quorem>:
  803314:	defff104 	addi	sp,sp,-60
  803318:	dfc00e15 	stw	ra,56(sp)
  80331c:	df000d15 	stw	fp,52(sp)
  803320:	dc000c15 	stw	r16,48(sp)
  803324:	dc400b15 	stw	r17,44(sp)
  803328:	dc800a15 	stw	r18,40(sp)
  80332c:	dcc00915 	stw	r19,36(sp)
  803330:	dd000815 	stw	r20,32(sp)
  803334:	dd400715 	stw	r21,28(sp)
  803338:	dd800615 	stw	r22,24(sp)
  80333c:	ddc00515 	stw	r23,20(sp)
  803340:	2dc00417 	ldw	r23,16(r5)
  803344:	20800417 	ldw	r2,16(r4)
  803348:	d9000015 	stw	r4,0(sp)
  80334c:	d9400115 	stw	r5,4(sp)
  803350:	0007883a 	mov	r3,zero
  803354:	15c04216 	blt	r2,r23,803460 <quorem+0x14c>
  803358:	bdffffc4 	addi	r23,r23,-1
  80335c:	b80490ba 	slli	r2,r23,2
  803360:	20c00504 	addi	r3,r4,20
  803364:	2c800504 	addi	r18,r5,20
  803368:	10eb883a 	add	r21,r2,r3
  80336c:	14ad883a 	add	r22,r2,r18
  803370:	b1400017 	ldw	r5,0(r22)
  803374:	a8800017 	ldw	r2,0(r21)
  803378:	d8c00215 	stw	r3,8(sp)
  80337c:	29400044 	addi	r5,r5,1
  803380:	1009883a 	mov	r4,r2
  803384:	d8800415 	stw	r2,16(sp)
  803388:	dc800315 	stw	r18,12(sp)
  80338c:	08006cc0 	call	8006cc <__udivsi3>
  803390:	1039883a 	mov	fp,r2
  803394:	dc400217 	ldw	r17,8(sp)
  803398:	10003e1e 	bne	r2,zero,803494 <quorem+0x180>
  80339c:	d9400117 	ldw	r5,4(sp)
  8033a0:	d9000017 	ldw	r4,0(sp)
  8033a4:	080619c0 	call	80619c <__mcmp>
  8033a8:	10002c16 	blt	r2,zero,80345c <quorem+0x148>
  8033ac:	dc800317 	ldw	r18,12(sp)
  8033b0:	dc400217 	ldw	r17,8(sp)
  8033b4:	e7000044 	addi	fp,fp,1
  8033b8:	0027883a 	mov	r19,zero
  8033bc:	0029883a 	mov	r20,zero
  8033c0:	91000017 	ldw	r4,0(r18)
  8033c4:	88c00017 	ldw	r3,0(r17)
  8033c8:	94800104 	addi	r18,r18,4
  8033cc:	20bfffcc 	andi	r2,r4,65535
  8033d0:	1521883a 	add	r16,r2,r20
  8033d4:	817fffcc 	andi	r5,r16,65535
  8033d8:	18bfffcc 	andi	r2,r3,65535
  8033dc:	2008d43a 	srli	r4,r4,16
  8033e0:	800cd43a 	srli	r6,r16,16
  8033e4:	1145c83a 	sub	r2,r2,r5
  8033e8:	14cf883a 	add	r7,r2,r19
  8033ec:	1806d43a 	srli	r3,r3,16
  8033f0:	218b883a 	add	r5,r4,r6
  8033f4:	3827d43a 	srai	r19,r7,16
  8033f8:	28bfffcc 	andi	r2,r5,65535
  8033fc:	1887c83a 	sub	r3,r3,r2
  803400:	1cc7883a 	add	r3,r3,r19
  803404:	88c0008d 	sth	r3,2(r17)
  803408:	89c0000d 	sth	r7,0(r17)
  80340c:	2828d43a 	srli	r20,r5,16
  803410:	8c400104 	addi	r17,r17,4
  803414:	1827d43a 	srai	r19,r3,16
  803418:	b4bfe92e 	bgeu	r22,r18,8033c0 <quorem+0xac>
  80341c:	d8c00217 	ldw	r3,8(sp)
  803420:	b80490ba 	slli	r2,r23,2
  803424:	10eb883a 	add	r21,r2,r3
  803428:	a8c00017 	ldw	r3,0(r21)
  80342c:	18000b1e 	bne	r3,zero,80345c <quorem+0x148>
  803430:	d8800217 	ldw	r2,8(sp)
  803434:	ad7fff04 	addi	r21,r21,-4
  803438:	1540062e 	bgeu	r2,r21,803454 <quorem+0x140>
  80343c:	a8800017 	ldw	r2,0(r21)
  803440:	1000041e 	bne	r2,zero,803454 <quorem+0x140>
  803444:	d8c00217 	ldw	r3,8(sp)
  803448:	ad7fff04 	addi	r21,r21,-4
  80344c:	bdffffc4 	addi	r23,r23,-1
  803450:	1d7ffa36 	bltu	r3,r21,80343c <quorem+0x128>
  803454:	d8800017 	ldw	r2,0(sp)
  803458:	15c00415 	stw	r23,16(r2)
  80345c:	e007883a 	mov	r3,fp
  803460:	1805883a 	mov	r2,r3
  803464:	dfc00e17 	ldw	ra,56(sp)
  803468:	df000d17 	ldw	fp,52(sp)
  80346c:	dc000c17 	ldw	r16,48(sp)
  803470:	dc400b17 	ldw	r17,44(sp)
  803474:	dc800a17 	ldw	r18,40(sp)
  803478:	dcc00917 	ldw	r19,36(sp)
  80347c:	dd000817 	ldw	r20,32(sp)
  803480:	dd400717 	ldw	r21,28(sp)
  803484:	dd800617 	ldw	r22,24(sp)
  803488:	ddc00517 	ldw	r23,20(sp)
  80348c:	dec00f04 	addi	sp,sp,60
  803490:	f800283a 	ret
  803494:	0027883a 	mov	r19,zero
  803498:	0029883a 	mov	r20,zero
  80349c:	94000017 	ldw	r16,0(r18)
  8034a0:	e00b883a 	mov	r5,fp
  8034a4:	94800104 	addi	r18,r18,4
  8034a8:	813fffcc 	andi	r4,r16,65535
  8034ac:	08006ec0 	call	8006ec <__mulsi3>
  8034b0:	8008d43a 	srli	r4,r16,16
  8034b4:	e00b883a 	mov	r5,fp
  8034b8:	1521883a 	add	r16,r2,r20
  8034bc:	08006ec0 	call	8006ec <__mulsi3>
  8034c0:	89000017 	ldw	r4,0(r17)
  8034c4:	817fffcc 	andi	r5,r16,65535
  8034c8:	800cd43a 	srli	r6,r16,16
  8034cc:	20ffffcc 	andi	r3,r4,65535
  8034d0:	1947c83a 	sub	r3,r3,r5
  8034d4:	1ccf883a 	add	r7,r3,r19
  8034d8:	2008d43a 	srli	r4,r4,16
  8034dc:	118b883a 	add	r5,r2,r6
  8034e0:	3827d43a 	srai	r19,r7,16
  8034e4:	28bfffcc 	andi	r2,r5,65535
  8034e8:	2089c83a 	sub	r4,r4,r2
  8034ec:	24c7883a 	add	r3,r4,r19
  8034f0:	88c0008d 	sth	r3,2(r17)
  8034f4:	89c0000d 	sth	r7,0(r17)
  8034f8:	2828d43a 	srli	r20,r5,16
  8034fc:	8c400104 	addi	r17,r17,4
  803500:	1827d43a 	srai	r19,r3,16
  803504:	b4bfe52e 	bgeu	r22,r18,80349c <quorem+0x188>
  803508:	d8c00417 	ldw	r3,16(sp)
  80350c:	183fa31e 	bne	r3,zero,80339c <quorem+0x88>
  803510:	d8800217 	ldw	r2,8(sp)
  803514:	ad7fff04 	addi	r21,r21,-4
  803518:	1540062e 	bgeu	r2,r21,803534 <quorem+0x220>
  80351c:	a8800017 	ldw	r2,0(r21)
  803520:	1000041e 	bne	r2,zero,803534 <quorem+0x220>
  803524:	d8c00217 	ldw	r3,8(sp)
  803528:	ad7fff04 	addi	r21,r21,-4
  80352c:	bdffffc4 	addi	r23,r23,-1
  803530:	1d7ffa36 	bltu	r3,r21,80351c <quorem+0x208>
  803534:	d8800017 	ldw	r2,0(sp)
  803538:	15c00415 	stw	r23,16(r2)
  80353c:	003f9706 	br	80339c <quorem+0x88>

00803540 <_dtoa_r>:
  803540:	deffdd04 	addi	sp,sp,-140
  803544:	df002115 	stw	fp,132(sp)
  803548:	dc002015 	stw	r16,128(sp)
  80354c:	dc801e15 	stw	r18,120(sp)
  803550:	dcc01d15 	stw	r19,116(sp)
  803554:	dfc02215 	stw	ra,136(sp)
  803558:	dc401f15 	stw	r17,124(sp)
  80355c:	dd001c15 	stw	r20,112(sp)
  803560:	dd401b15 	stw	r21,108(sp)
  803564:	dd801a15 	stw	r22,104(sp)
  803568:	ddc01915 	stw	r23,100(sp)
  80356c:	22001017 	ldw	r8,64(r4)
  803570:	2039883a 	mov	fp,r4
  803574:	2825883a 	mov	r18,r5
  803578:	d9c00315 	stw	r7,12(sp)
  80357c:	3027883a 	mov	r19,r6
  803580:	dc002517 	ldw	r16,148(sp)
  803584:	d8001515 	stw	zero,84(sp)
  803588:	4000241e 	bne	r8,zero,80361c <_dtoa_r+0xdc>
  80358c:	98002d16 	blt	r19,zero,803644 <_dtoa_r+0x104>
  803590:	98dffc2c 	andhi	r3,r19,32752
  803594:	009ffc34 	movhi	r2,32752
  803598:	10800004 	addi	r2,r2,0
  80359c:	80000015 	stw	zero,0(r16)
  8035a0:	18803126 	beq	r3,r2,803668 <_dtoa_r+0x128>
  8035a4:	000d883a 	mov	r6,zero
  8035a8:	000f883a 	mov	r7,zero
  8035ac:	9009883a 	mov	r4,r18
  8035b0:	980b883a 	mov	r5,r19
  8035b4:	08089bc0 	call	8089bc <__eqdf2>
  8035b8:	10003c1e 	bne	r2,zero,8036ac <_dtoa_r+0x16c>
  8035bc:	d8c02417 	ldw	r3,144(sp)
  8035c0:	00800044 	movi	r2,1
  8035c4:	01002074 	movhi	r4,129
  8035c8:	2100b604 	addi	r4,r4,728
  8035cc:	18800015 	stw	r2,0(r3)
  8035d0:	d8802617 	ldw	r2,152(sp)
  8035d4:	d9001715 	stw	r4,92(sp)
  8035d8:	10000326 	beq	r2,zero,8035e8 <_dtoa_r+0xa8>
  8035dc:	d8c02617 	ldw	r3,152(sp)
  8035e0:	20800044 	addi	r2,r4,1
  8035e4:	18800015 	stw	r2,0(r3)
  8035e8:	d8801717 	ldw	r2,92(sp)
  8035ec:	dfc02217 	ldw	ra,136(sp)
  8035f0:	df002117 	ldw	fp,132(sp)
  8035f4:	dc002017 	ldw	r16,128(sp)
  8035f8:	dc401f17 	ldw	r17,124(sp)
  8035fc:	dc801e17 	ldw	r18,120(sp)
  803600:	dcc01d17 	ldw	r19,116(sp)
  803604:	dd001c17 	ldw	r20,112(sp)
  803608:	dd401b17 	ldw	r21,108(sp)
  80360c:	dd801a17 	ldw	r22,104(sp)
  803610:	ddc01917 	ldw	r23,100(sp)
  803614:	dec02304 	addi	sp,sp,140
  803618:	f800283a 	ret
  80361c:	20801117 	ldw	r2,68(r4)
  803620:	400b883a 	mov	r5,r8
  803624:	40800115 	stw	r2,4(r8)
  803628:	20c01117 	ldw	r3,68(r4)
  80362c:	00800044 	movi	r2,1
  803630:	10c4983a 	sll	r2,r2,r3
  803634:	40800215 	stw	r2,8(r8)
  803638:	080594c0 	call	80594c <_Bfree>
  80363c:	e0001015 	stw	zero,64(fp)
  803640:	983fd30e 	bge	r19,zero,803590 <_dtoa_r+0x50>
  803644:	00a00034 	movhi	r2,32768
  803648:	10bfffc4 	addi	r2,r2,-1
  80364c:	14e6703a 	and	r19,r2,r19
  803650:	00c00044 	movi	r3,1
  803654:	80c00015 	stw	r3,0(r16)
  803658:	009ffc34 	movhi	r2,32752
  80365c:	10800004 	addi	r2,r2,0
  803660:	98dffc2c 	andhi	r3,r19,32752
  803664:	18bfcf1e 	bne	r3,r2,8035a4 <_dtoa_r+0x64>
  803668:	d8c02417 	ldw	r3,144(sp)
  80366c:	0089c3c4 	movi	r2,9999
  803670:	18800015 	stw	r2,0(r3)
  803674:	9000a226 	beq	r18,zero,803900 <_dtoa_r+0x3c0>
  803678:	00802074 	movhi	r2,129
  80367c:	1080b804 	addi	r2,r2,736
  803680:	d8801715 	stw	r2,92(sp)
  803684:	d8c02617 	ldw	r3,152(sp)
  803688:	183fd726 	beq	r3,zero,8035e8 <_dtoa_r+0xa8>
  80368c:	d9001717 	ldw	r4,92(sp)
  803690:	208000c7 	ldb	r2,3(r4)
  803694:	20c00204 	addi	r3,r4,8
  803698:	1000011e 	bne	r2,zero,8036a0 <_dtoa_r+0x160>
  80369c:	20c000c4 	addi	r3,r4,3
  8036a0:	d8802617 	ldw	r2,152(sp)
  8036a4:	10c00015 	stw	r3,0(r2)
  8036a8:	003fcf06 	br	8035e8 <_dtoa_r+0xa8>
  8036ac:	d8800104 	addi	r2,sp,4
  8036b0:	e009883a 	mov	r4,fp
  8036b4:	900b883a 	mov	r5,r18
  8036b8:	980d883a 	mov	r6,r19
  8036bc:	d9c00204 	addi	r7,sp,8
  8036c0:	d8800015 	stw	r2,0(sp)
  8036c4:	08065300 	call	806530 <_d2b>
  8036c8:	d8801415 	stw	r2,80(sp)
  8036cc:	9804d53a 	srli	r2,r19,20
  8036d0:	1581ffcc 	andi	r22,r2,2047
  8036d4:	b000921e 	bne	r22,zero,803920 <_dtoa_r+0x3e0>
  8036d8:	ddc00117 	ldw	r23,4(sp)
  8036dc:	d8800217 	ldw	r2,8(sp)
  8036e0:	00c00804 	movi	r3,32
  8036e4:	b885883a 	add	r2,r23,r2
  8036e8:	15810c84 	addi	r22,r2,1074
  8036ec:	1d81ba0e 	bge	r3,r22,803dd8 <_dtoa_r+0x898>
  8036f0:	00c01004 	movi	r3,64
  8036f4:	1d87c83a 	sub	r3,r3,r22
  8036f8:	10810484 	addi	r2,r2,1042
  8036fc:	98c6983a 	sll	r3,r19,r3
  803700:	9084d83a 	srl	r2,r18,r2
  803704:	18a0b03a 	or	r16,r3,r2
  803708:	8009883a 	mov	r4,r16
  80370c:	0808c780 	call	808c78 <__floatsidf>
  803710:	1011883a 	mov	r8,r2
  803714:	1813883a 	mov	r9,r3
  803718:	8003bc16 	blt	r16,zero,80460c <_dtoa_r+0x10cc>
  80371c:	00bf8434 	movhi	r2,65040
  803720:	10800004 	addi	r2,r2,0
  803724:	1247883a 	add	r3,r2,r9
  803728:	01000044 	movi	r4,1
  80372c:	da000f15 	stw	r8,60(sp)
  803730:	d8c01015 	stw	r3,64(sp)
  803734:	b5bef344 	addi	r22,r22,-1075
  803738:	d9001315 	stw	r4,76(sp)
  80373c:	d9401017 	ldw	r5,64(sp)
  803740:	d9000f17 	ldw	r4,60(sp)
  803744:	0005883a 	mov	r2,zero
  803748:	00cffe34 	movhi	r3,16376
  80374c:	18c00004 	addi	r3,r3,0
  803750:	180f883a 	mov	r7,r3
  803754:	100d883a 	mov	r6,r2
  803758:	08082f40 	call	8082f4 <__subdf3>
  80375c:	0218dbf4 	movhi	r8,25455
  803760:	4210d844 	addi	r8,r8,17249
  803764:	024ff4f4 	movhi	r9,16339
  803768:	4a61e9c4 	addi	r9,r9,-30809
  80376c:	480f883a 	mov	r7,r9
  803770:	400d883a 	mov	r6,r8
  803774:	180b883a 	mov	r5,r3
  803778:	1009883a 	mov	r4,r2
  80377c:	080836c0 	call	80836c <__muldf3>
  803780:	0222d874 	movhi	r8,35681
  803784:	42322cc4 	addi	r8,r8,-14157
  803788:	024ff1f4 	movhi	r9,16327
  80378c:	4a628a04 	addi	r9,r9,-30168
  803790:	480f883a 	mov	r7,r9
  803794:	400d883a 	mov	r6,r8
  803798:	180b883a 	mov	r5,r3
  80379c:	1009883a 	mov	r4,r2
  8037a0:	08082880 	call	808288 <__adddf3>
  8037a4:	b009883a 	mov	r4,r22
  8037a8:	1021883a 	mov	r16,r2
  8037ac:	1823883a 	mov	r17,r3
  8037b0:	0808c780 	call	808c78 <__floatsidf>
  8037b4:	021427f4 	movhi	r8,20639
  8037b8:	421e7ec4 	addi	r8,r8,31227
  8037bc:	024ff4f4 	movhi	r9,16339
  8037c0:	4a5104c4 	addi	r9,r9,17427
  8037c4:	480f883a 	mov	r7,r9
  8037c8:	400d883a 	mov	r6,r8
  8037cc:	180b883a 	mov	r5,r3
  8037d0:	1009883a 	mov	r4,r2
  8037d4:	080836c0 	call	80836c <__muldf3>
  8037d8:	180f883a 	mov	r7,r3
  8037dc:	880b883a 	mov	r5,r17
  8037e0:	100d883a 	mov	r6,r2
  8037e4:	8009883a 	mov	r4,r16
  8037e8:	08082880 	call	808288 <__adddf3>
  8037ec:	1009883a 	mov	r4,r2
  8037f0:	180b883a 	mov	r5,r3
  8037f4:	1021883a 	mov	r16,r2
  8037f8:	1823883a 	mov	r17,r3
  8037fc:	0808d480 	call	808d48 <__fixdfsi>
  803800:	000d883a 	mov	r6,zero
  803804:	000f883a 	mov	r7,zero
  803808:	8009883a 	mov	r4,r16
  80380c:	880b883a 	mov	r5,r17
  803810:	d8800915 	stw	r2,36(sp)
  803814:	0808bec0 	call	808bec <__ltdf2>
  803818:	1002ea16 	blt	r2,zero,8043c4 <_dtoa_r+0xe84>
  80381c:	d9000917 	ldw	r4,36(sp)
  803820:	00c00044 	movi	r3,1
  803824:	00800584 	movi	r2,22
  803828:	d8c00b15 	stw	r3,44(sp)
  80382c:	11001036 	bltu	r2,r4,803870 <_dtoa_r+0x330>
  803830:	200490fa 	slli	r2,r4,3
  803834:	00c02074 	movhi	r3,129
  803838:	18c0f004 	addi	r3,r3,960
  80383c:	900d883a 	mov	r6,r18
  803840:	10c5883a 	add	r2,r2,r3
  803844:	12000017 	ldw	r8,0(r2)
  803848:	12400117 	ldw	r9,4(r2)
  80384c:	980f883a 	mov	r7,r19
  803850:	4009883a 	mov	r4,r8
  803854:	480b883a 	mov	r5,r9
  803858:	0808ad40 	call	808ad4 <__gtdf2>
  80385c:	0080030e 	bge	zero,r2,80386c <_dtoa_r+0x32c>
  803860:	d8800917 	ldw	r2,36(sp)
  803864:	10bfffc4 	addi	r2,r2,-1
  803868:	d8800915 	stw	r2,36(sp)
  80386c:	d8000b15 	stw	zero,44(sp)
  803870:	bd85c83a 	sub	r2,r23,r22
  803874:	147fffc4 	addi	r17,r2,-1
  803878:	8802ce16 	blt	r17,zero,8043b4 <_dtoa_r+0xe74>
  80387c:	dc400d15 	stw	r17,52(sp)
  803880:	d8000415 	stw	zero,16(sp)
  803884:	d8c00917 	ldw	r3,36(sp)
  803888:	1802c216 	blt	r3,zero,804394 <_dtoa_r+0xe54>
  80388c:	d9000d17 	ldw	r4,52(sp)
  803890:	d8000515 	stw	zero,20(sp)
  803894:	d8c00e15 	stw	r3,56(sp)
  803898:	20c9883a 	add	r4,r4,r3
  80389c:	d9000d15 	stw	r4,52(sp)
  8038a0:	d8c00317 	ldw	r3,12(sp)
  8038a4:	00800244 	movi	r2,9
  8038a8:	10c0012e 	bgeu	r2,r3,8038b0 <_dtoa_r+0x370>
  8038ac:	d8000315 	stw	zero,12(sp)
  8038b0:	d9000317 	ldw	r4,12(sp)
  8038b4:	00800144 	movi	r2,5
  8038b8:	04000044 	movi	r16,1
  8038bc:	1100030e 	bge	r2,r4,8038cc <_dtoa_r+0x38c>
  8038c0:	213fff04 	addi	r4,r4,-4
  8038c4:	d9000315 	stw	r4,12(sp)
  8038c8:	0021883a 	mov	r16,zero
  8038cc:	00ffffc4 	movi	r3,-1
  8038d0:	d8c00615 	stw	r3,24(sp)
  8038d4:	d8c00815 	stw	r3,32(sp)
  8038d8:	d8c00317 	ldw	r3,12(sp)
  8038dc:	01000044 	movi	r4,1
  8038e0:	d9000c15 	stw	r4,48(sp)
  8038e4:	10c02136 	bltu	r2,r3,80396c <_dtoa_r+0x42c>
  8038e8:	180490ba 	slli	r2,r3,2
  8038ec:	00c02074 	movhi	r3,129
  8038f0:	18c0c604 	addi	r3,r3,792
  8038f4:	10c5883a 	add	r2,r2,r3
  8038f8:	11000017 	ldw	r4,0(r2)
  8038fc:	2000683a 	jmp	r4
  803900:	00800434 	movhi	r2,16
  803904:	10bfffc4 	addi	r2,r2,-1
  803908:	01002074 	movhi	r4,129
  80390c:	2100c304 	addi	r4,r4,780
  803910:	9884703a 	and	r2,r19,r2
  803914:	d9001715 	stw	r4,92(sp)
  803918:	103f5a26 	beq	r2,zero,803684 <_dtoa_r+0x144>
  80391c:	003f5606 	br	803678 <_dtoa_r+0x138>
  803920:	00800434 	movhi	r2,16
  803924:	10bfffc4 	addi	r2,r2,-1
  803928:	ddc00117 	ldw	r23,4(sp)
  80392c:	14c6703a 	and	r3,r2,r19
  803930:	190ffc34 	orhi	r4,r3,16368
  803934:	b5bf0044 	addi	r22,r22,-1023
  803938:	dc800f15 	stw	r18,60(sp)
  80393c:	d9001015 	stw	r4,64(sp)
  803940:	d8001315 	stw	zero,76(sp)
  803944:	003f7d06 	br	80373c <_dtoa_r+0x1fc>
  803948:	d8000c15 	stw	zero,48(sp)
  80394c:	d8c02317 	ldw	r3,140(sp)
  803950:	d9000917 	ldw	r4,36(sp)
  803954:	1905883a 	add	r2,r3,r4
  803958:	15800044 	addi	r22,r2,1
  80395c:	d8800815 	stw	r2,32(sp)
  803960:	dd800615 	stw	r22,24(sp)
  803964:	05800116 	blt	zero,r22,80396c <_dtoa_r+0x42c>
  803968:	05800044 	movi	r22,1
  80396c:	00800604 	movi	r2,24
  803970:	e0001115 	stw	zero,68(fp)
  803974:	04400104 	movi	r17,4
  803978:	b0800636 	bltu	r22,r2,803994 <_dtoa_r+0x454>
  80397c:	0007883a 	mov	r3,zero
  803980:	8c63883a 	add	r17,r17,r17
  803984:	18c00044 	addi	r3,r3,1
  803988:	88800504 	addi	r2,r17,20
  80398c:	b0bffc2e 	bgeu	r22,r2,803980 <_dtoa_r+0x440>
  803990:	e0c01115 	stw	r3,68(fp)
  803994:	e1401117 	ldw	r5,68(fp)
  803998:	e009883a 	mov	r4,fp
  80399c:	080589c0 	call	80589c <_Balloc>
  8039a0:	d8c00617 	ldw	r3,24(sp)
  8039a4:	d8801815 	stw	r2,96(sp)
  8039a8:	e0801015 	stw	r2,64(fp)
  8039ac:	d8801715 	stw	r2,92(sp)
  8039b0:	00800384 	movi	r2,14
  8039b4:	10c0a836 	bltu	r2,r3,803c58 <_dtoa_r+0x718>
  8039b8:	8000a726 	beq	r16,zero,803c58 <_dtoa_r+0x718>
  8039bc:	d8c00917 	ldw	r3,36(sp)
  8039c0:	d9000617 	ldw	r4,24(sp)
  8039c4:	dc800f15 	stw	r18,60(sp)
  8039c8:	dcc01015 	stw	r19,64(sp)
  8039cc:	d8c00a15 	stw	r3,40(sp)
  8039d0:	d9000715 	stw	r4,28(sp)
  8039d4:	05800084 	movi	r22,2
  8039d8:	00c1230e 	bge	zero,r3,803e68 <_dtoa_r+0x928>
  8039dc:	188003cc 	andi	r2,r3,15
  8039e0:	1823d13a 	srai	r17,r3,4
  8039e4:	100490fa 	slli	r2,r2,3
  8039e8:	00c02074 	movhi	r3,129
  8039ec:	18c0f004 	addi	r3,r3,960
  8039f0:	10c5883a 	add	r2,r2,r3
  8039f4:	88c0040c 	andi	r3,r17,16
  8039f8:	15000017 	ldw	r20,0(r2)
  8039fc:	15400117 	ldw	r21,4(r2)
  803a00:	18000d26 	beq	r3,zero,803a38 <_dtoa_r+0x4f8>
  803a04:	01802074 	movhi	r6,129
  803a08:	3180e604 	addi	r6,r6,920
  803a0c:	30c00917 	ldw	r3,36(r6)
  803a10:	30800817 	ldw	r2,32(r6)
  803a14:	980b883a 	mov	r5,r19
  803a18:	9009883a 	mov	r4,r18
  803a1c:	180f883a 	mov	r7,r3
  803a20:	100d883a 	mov	r6,r2
  803a24:	080876c0 	call	80876c <__divdf3>
  803a28:	8c4003cc 	andi	r17,r17,15
  803a2c:	058000c4 	movi	r22,3
  803a30:	1025883a 	mov	r18,r2
  803a34:	1827883a 	mov	r19,r3
  803a38:	88001126 	beq	r17,zero,803a80 <_dtoa_r+0x540>
  803a3c:	04002074 	movhi	r16,129
  803a40:	8400e604 	addi	r16,r16,920
  803a44:	8880004c 	andi	r2,r17,1
  803a48:	10000a26 	beq	r2,zero,803a74 <_dtoa_r+0x534>
  803a4c:	80800017 	ldw	r2,0(r16)
  803a50:	80c00117 	ldw	r3,4(r16)
  803a54:	a80b883a 	mov	r5,r21
  803a58:	a009883a 	mov	r4,r20
  803a5c:	180f883a 	mov	r7,r3
  803a60:	100d883a 	mov	r6,r2
  803a64:	080836c0 	call	80836c <__muldf3>
  803a68:	b5800044 	addi	r22,r22,1
  803a6c:	1029883a 	mov	r20,r2
  803a70:	182b883a 	mov	r21,r3
  803a74:	8823d07a 	srai	r17,r17,1
  803a78:	84000204 	addi	r16,r16,8
  803a7c:	883ff11e 	bne	r17,zero,803a44 <_dtoa_r+0x504>
  803a80:	980b883a 	mov	r5,r19
  803a84:	9009883a 	mov	r4,r18
  803a88:	a80f883a 	mov	r7,r21
  803a8c:	a00d883a 	mov	r6,r20
  803a90:	080876c0 	call	80876c <__divdf3>
  803a94:	1025883a 	mov	r18,r2
  803a98:	1827883a 	mov	r19,r3
  803a9c:	d8c00b17 	ldw	r3,44(sp)
  803aa0:	18000926 	beq	r3,zero,803ac8 <_dtoa_r+0x588>
  803aa4:	0005883a 	mov	r2,zero
  803aa8:	00cffc34 	movhi	r3,16368
  803aac:	18c00004 	addi	r3,r3,0
  803ab0:	180f883a 	mov	r7,r3
  803ab4:	9009883a 	mov	r4,r18
  803ab8:	980b883a 	mov	r5,r19
  803abc:	100d883a 	mov	r6,r2
  803ac0:	0808bec0 	call	808bec <__ltdf2>
  803ac4:	10037816 	blt	r2,zero,8048a8 <_dtoa_r+0x1368>
  803ac8:	b009883a 	mov	r4,r22
  803acc:	0808c780 	call	808c78 <__floatsidf>
  803ad0:	180b883a 	mov	r5,r3
  803ad4:	1009883a 	mov	r4,r2
  803ad8:	900d883a 	mov	r6,r18
  803adc:	980f883a 	mov	r7,r19
  803ae0:	080836c0 	call	80836c <__muldf3>
  803ae4:	0011883a 	mov	r8,zero
  803ae8:	02500734 	movhi	r9,16412
  803aec:	4a400004 	addi	r9,r9,0
  803af0:	180b883a 	mov	r5,r3
  803af4:	480f883a 	mov	r7,r9
  803af8:	1009883a 	mov	r4,r2
  803afc:	400d883a 	mov	r6,r8
  803b00:	08082880 	call	808288 <__adddf3>
  803b04:	d8801115 	stw	r2,68(sp)
  803b08:	00bf3034 	movhi	r2,64704
  803b0c:	10800004 	addi	r2,r2,0
  803b10:	18a9883a 	add	r20,r3,r2
  803b14:	d8800617 	ldw	r2,24(sp)
  803b18:	dd001215 	stw	r20,72(sp)
  803b1c:	10024e1e 	bne	r2,zero,804458 <_dtoa_r+0xf18>
  803b20:	00d00534 	movhi	r3,16404
  803b24:	18c00004 	addi	r3,r3,0
  803b28:	980b883a 	mov	r5,r19
  803b2c:	180f883a 	mov	r7,r3
  803b30:	9009883a 	mov	r4,r18
  803b34:	100d883a 	mov	r6,r2
  803b38:	08082f40 	call	8082f4 <__subdf3>
  803b3c:	d9801117 	ldw	r6,68(sp)
  803b40:	a00f883a 	mov	r7,r20
  803b44:	1009883a 	mov	r4,r2
  803b48:	180b883a 	mov	r5,r3
  803b4c:	1021883a 	mov	r16,r2
  803b50:	1823883a 	mov	r17,r3
  803b54:	d8001615 	stw	zero,88(sp)
  803b58:	002f883a 	mov	r23,zero
  803b5c:	0808ad40 	call	808ad4 <__gtdf2>
  803b60:	0080260e 	bge	zero,r2,803bfc <_dtoa_r+0x6bc>
  803b64:	d8800917 	ldw	r2,36(sp)
  803b68:	d8c01817 	ldw	r3,96(sp)
  803b6c:	d9001817 	ldw	r4,96(sp)
  803b70:	10800044 	addi	r2,r2,1
  803b74:	18c00044 	addi	r3,r3,1
  803b78:	d8800915 	stw	r2,36(sp)
  803b7c:	d8c01715 	stw	r3,92(sp)
  803b80:	00800c44 	movi	r2,49
  803b84:	20800005 	stb	r2,0(r4)
  803b88:	e009883a 	mov	r4,fp
  803b8c:	b80b883a 	mov	r5,r23
  803b90:	080594c0 	call	80594c <_Bfree>
  803b94:	d9001617 	ldw	r4,88(sp)
  803b98:	20000926 	beq	r4,zero,803bc0 <_dtoa_r+0x680>
  803b9c:	d8801517 	ldw	r2,84(sp)
  803ba0:	10000426 	beq	r2,zero,803bb4 <_dtoa_r+0x674>
  803ba4:	11000326 	beq	r2,r4,803bb4 <_dtoa_r+0x674>
  803ba8:	100b883a 	mov	r5,r2
  803bac:	e009883a 	mov	r4,fp
  803bb0:	080594c0 	call	80594c <_Bfree>
  803bb4:	d9401617 	ldw	r5,88(sp)
  803bb8:	e009883a 	mov	r4,fp
  803bbc:	080594c0 	call	80594c <_Bfree>
  803bc0:	d9401417 	ldw	r5,80(sp)
  803bc4:	e009883a 	mov	r4,fp
  803bc8:	080594c0 	call	80594c <_Bfree>
  803bcc:	d8c01717 	ldw	r3,92(sp)
  803bd0:	18000005 	stb	zero,0(r3)
  803bd4:	d9000917 	ldw	r4,36(sp)
  803bd8:	d8c02417 	ldw	r3,144(sp)
  803bdc:	20800044 	addi	r2,r4,1
  803be0:	d9002617 	ldw	r4,152(sp)
  803be4:	18800015 	stw	r2,0(r3)
  803be8:	20000226 	beq	r4,zero,803bf4 <_dtoa_r+0x6b4>
  803bec:	d8801717 	ldw	r2,92(sp)
  803bf0:	20800015 	stw	r2,0(r4)
  803bf4:	d8801817 	ldw	r2,96(sp)
  803bf8:	003e7c06 	br	8035ec <_dtoa_r+0xac>
  803bfc:	d9001117 	ldw	r4,68(sp)
  803c00:	000d883a 	mov	r6,zero
  803c04:	01e00034 	movhi	r7,32768
  803c08:	39c00004 	addi	r7,r7,0
  803c0c:	2184f03a 	xor	r2,r4,r6
  803c10:	d9001217 	ldw	r4,72(sp)
  803c14:	800d883a 	mov	r6,r16
  803c18:	21c6f03a 	xor	r3,r4,r7
  803c1c:	180b883a 	mov	r5,r3
  803c20:	1009883a 	mov	r4,r2
  803c24:	880f883a 	mov	r7,r17
  803c28:	0808ad40 	call	808ad4 <__gtdf2>
  803c2c:	00808a16 	blt	zero,r2,803e58 <_dtoa_r+0x918>
  803c30:	d9000f17 	ldw	r4,60(sp)
  803c34:	d8801017 	ldw	r2,64(sp)
  803c38:	d8c00a17 	ldw	r3,40(sp)
  803c3c:	2025883a 	mov	r18,r4
  803c40:	1027883a 	mov	r19,r2
  803c44:	d9000717 	ldw	r4,28(sp)
  803c48:	d8801817 	ldw	r2,96(sp)
  803c4c:	d8c00915 	stw	r3,36(sp)
  803c50:	d9000615 	stw	r4,24(sp)
  803c54:	d8801715 	stw	r2,92(sp)
  803c58:	d8c00217 	ldw	r3,8(sp)
  803c5c:	1800a716 	blt	r3,zero,803efc <_dtoa_r+0x9bc>
  803c60:	d9000917 	ldw	r4,36(sp)
  803c64:	00800384 	movi	r2,14
  803c68:	1100a416 	blt	r2,r4,803efc <_dtoa_r+0x9bc>
  803c6c:	200490fa 	slli	r2,r4,3
  803c70:	00c02074 	movhi	r3,129
  803c74:	18c0f004 	addi	r3,r3,960
  803c78:	10c5883a 	add	r2,r2,r3
  803c7c:	15000017 	ldw	r20,0(r2)
  803c80:	15400117 	ldw	r21,4(r2)
  803c84:	d8802317 	ldw	r2,140(sp)
  803c88:	10006016 	blt	r2,zero,803e0c <_dtoa_r+0x8cc>
  803c8c:	05800044 	movi	r22,1
  803c90:	00001106 	br	803cd8 <_dtoa_r+0x798>
  803c94:	0005883a 	mov	r2,zero
  803c98:	00d00934 	movhi	r3,16420
  803c9c:	18c00004 	addi	r3,r3,0
  803ca0:	400d883a 	mov	r6,r8
  803ca4:	180b883a 	mov	r5,r3
  803ca8:	480f883a 	mov	r7,r9
  803cac:	1009883a 	mov	r4,r2
  803cb0:	080836c0 	call	80836c <__muldf3>
  803cb4:	180b883a 	mov	r5,r3
  803cb8:	000d883a 	mov	r6,zero
  803cbc:	000f883a 	mov	r7,zero
  803cc0:	1009883a 	mov	r4,r2
  803cc4:	1025883a 	mov	r18,r2
  803cc8:	1827883a 	mov	r19,r3
  803ccc:	08089bc0 	call	8089bc <__eqdf2>
  803cd0:	103fbb26 	beq	r2,zero,803bc0 <_dtoa_r+0x680>
  803cd4:	b5800044 	addi	r22,r22,1
  803cd8:	a00d883a 	mov	r6,r20
  803cdc:	a80f883a 	mov	r7,r21
  803ce0:	9009883a 	mov	r4,r18
  803ce4:	980b883a 	mov	r5,r19
  803ce8:	080876c0 	call	80876c <__divdf3>
  803cec:	180b883a 	mov	r5,r3
  803cf0:	1009883a 	mov	r4,r2
  803cf4:	0808d480 	call	808d48 <__fixdfsi>
  803cf8:	1009883a 	mov	r4,r2
  803cfc:	102f883a 	mov	r23,r2
  803d00:	0808c780 	call	808c78 <__floatsidf>
  803d04:	180b883a 	mov	r5,r3
  803d08:	1009883a 	mov	r4,r2
  803d0c:	a00d883a 	mov	r6,r20
  803d10:	a80f883a 	mov	r7,r21
  803d14:	080836c0 	call	80836c <__muldf3>
  803d18:	180f883a 	mov	r7,r3
  803d1c:	9009883a 	mov	r4,r18
  803d20:	980b883a 	mov	r5,r19
  803d24:	100d883a 	mov	r6,r2
  803d28:	08082f40 	call	8082f4 <__subdf3>
  803d2c:	d9001717 	ldw	r4,92(sp)
  803d30:	1011883a 	mov	r8,r2
  803d34:	b8800c04 	addi	r2,r23,48
  803d38:	20800005 	stb	r2,0(r4)
  803d3c:	d8800617 	ldw	r2,24(sp)
  803d40:	21000044 	addi	r4,r4,1
  803d44:	1813883a 	mov	r9,r3
  803d48:	d9001715 	stw	r4,92(sp)
  803d4c:	b0bfd11e 	bne	r22,r2,803c94 <_dtoa_r+0x754>
  803d50:	4009883a 	mov	r4,r8
  803d54:	180b883a 	mov	r5,r3
  803d58:	400d883a 	mov	r6,r8
  803d5c:	180f883a 	mov	r7,r3
  803d60:	08082880 	call	808288 <__adddf3>
  803d64:	100d883a 	mov	r6,r2
  803d68:	a009883a 	mov	r4,r20
  803d6c:	a80b883a 	mov	r5,r21
  803d70:	180f883a 	mov	r7,r3
  803d74:	1021883a 	mov	r16,r2
  803d78:	1823883a 	mov	r17,r3
  803d7c:	0808bec0 	call	808bec <__ltdf2>
  803d80:	10000816 	blt	r2,zero,803da4 <_dtoa_r+0x864>
  803d84:	a80b883a 	mov	r5,r21
  803d88:	800d883a 	mov	r6,r16
  803d8c:	880f883a 	mov	r7,r17
  803d90:	a009883a 	mov	r4,r20
  803d94:	08089bc0 	call	8089bc <__eqdf2>
  803d98:	103f891e 	bne	r2,zero,803bc0 <_dtoa_r+0x680>
  803d9c:	b880004c 	andi	r2,r23,1
  803da0:	103f8726 	beq	r2,zero,803bc0 <_dtoa_r+0x680>
  803da4:	d8c01717 	ldw	r3,92(sp)
  803da8:	00800e44 	movi	r2,57
  803dac:	18ffffc4 	addi	r3,r3,-1
  803db0:	d8c01715 	stw	r3,92(sp)
  803db4:	18c00007 	ldb	r3,0(r3)
  803db8:	1882341e 	bne	r3,r2,80468c <_dtoa_r+0x114c>
  803dbc:	d9001717 	ldw	r4,92(sp)
  803dc0:	d8801817 	ldw	r2,96(sp)
  803dc4:	20822b26 	beq	r4,r2,804674 <_dtoa_r+0x1134>
  803dc8:	213fffc4 	addi	r4,r4,-1
  803dcc:	d9001715 	stw	r4,92(sp)
  803dd0:	20800007 	ldb	r2,0(r4)
  803dd4:	003ff806 	br	803db8 <_dtoa_r+0x878>
  803dd8:	1d85c83a 	sub	r2,r3,r22
  803ddc:	90a0983a 	sll	r16,r18,r2
  803de0:	003e4906 	br	803708 <_dtoa_r+0x1c8>
  803de4:	d8000c15 	stw	zero,48(sp)
  803de8:	d9002317 	ldw	r4,140(sp)
  803dec:	0102a70e 	bge	zero,r4,80488c <_dtoa_r+0x134c>
  803df0:	dd802317 	ldw	r22,140(sp)
  803df4:	dd800815 	stw	r22,32(sp)
  803df8:	dd800615 	stw	r22,24(sp)
  803dfc:	003edb06 	br	80396c <_dtoa_r+0x42c>
  803e00:	05800484 	movi	r22,18
  803e04:	d8002315 	stw	zero,140(sp)
  803e08:	003ed806 	br	80396c <_dtoa_r+0x42c>
  803e0c:	d8c00617 	ldw	r3,24(sp)
  803e10:	00ff9e16 	blt	zero,r3,803c8c <_dtoa_r+0x74c>
  803e14:	d8001615 	stw	zero,88(sp)
  803e18:	002f883a 	mov	r23,zero
  803e1c:	18000e16 	blt	r3,zero,803e58 <_dtoa_r+0x918>
  803e20:	0005883a 	mov	r2,zero
  803e24:	00d00534 	movhi	r3,16404
  803e28:	18c00004 	addi	r3,r3,0
  803e2c:	a80b883a 	mov	r5,r21
  803e30:	180f883a 	mov	r7,r3
  803e34:	a009883a 	mov	r4,r20
  803e38:	100d883a 	mov	r6,r2
  803e3c:	080836c0 	call	80836c <__muldf3>
  803e40:	180b883a 	mov	r5,r3
  803e44:	980f883a 	mov	r7,r19
  803e48:	1009883a 	mov	r4,r2
  803e4c:	900d883a 	mov	r6,r18
  803e50:	0808b600 	call	808b60 <__gedf2>
  803e54:	103f4316 	blt	r2,zero,803b64 <_dtoa_r+0x624>
  803e58:	d9002317 	ldw	r4,140(sp)
  803e5c:	0108303a 	nor	r4,zero,r4
  803e60:	d9000915 	stw	r4,36(sp)
  803e64:	003f4806 	br	803b88 <_dtoa_r+0x648>
  803e68:	d8800917 	ldw	r2,36(sp)
  803e6c:	00a9c83a 	sub	r20,zero,r2
  803e70:	a03f0a26 	beq	r20,zero,803a9c <_dtoa_r+0x55c>
  803e74:	a14003cc 	andi	r5,r20,15
  803e78:	280a90fa 	slli	r5,r5,3
  803e7c:	01002074 	movhi	r4,129
  803e80:	2100f004 	addi	r4,r4,960
  803e84:	a023d13a 	srai	r17,r20,4
  803e88:	290b883a 	add	r5,r5,r4
  803e8c:	28800017 	ldw	r2,0(r5)
  803e90:	28c00117 	ldw	r3,4(r5)
  803e94:	980f883a 	mov	r7,r19
  803e98:	900d883a 	mov	r6,r18
  803e9c:	180b883a 	mov	r5,r3
  803ea0:	1009883a 	mov	r4,r2
  803ea4:	080836c0 	call	80836c <__muldf3>
  803ea8:	1025883a 	mov	r18,r2
  803eac:	1827883a 	mov	r19,r3
  803eb0:	883efa26 	beq	r17,zero,803a9c <_dtoa_r+0x55c>
  803eb4:	04002074 	movhi	r16,129
  803eb8:	8400e604 	addi	r16,r16,920
  803ebc:	8880004c 	andi	r2,r17,1
  803ec0:	10000a26 	beq	r2,zero,803eec <_dtoa_r+0x9ac>
  803ec4:	80800017 	ldw	r2,0(r16)
  803ec8:	80c00117 	ldw	r3,4(r16)
  803ecc:	980f883a 	mov	r7,r19
  803ed0:	900d883a 	mov	r6,r18
  803ed4:	180b883a 	mov	r5,r3
  803ed8:	1009883a 	mov	r4,r2
  803edc:	080836c0 	call	80836c <__muldf3>
  803ee0:	b5800044 	addi	r22,r22,1
  803ee4:	1025883a 	mov	r18,r2
  803ee8:	1827883a 	mov	r19,r3
  803eec:	8823d07a 	srai	r17,r17,1
  803ef0:	84000204 	addi	r16,r16,8
  803ef4:	883ff11e 	bne	r17,zero,803ebc <_dtoa_r+0x97c>
  803ef8:	003ee806 	br	803a9c <_dtoa_r+0x55c>
  803efc:	d9000c17 	ldw	r4,48(sp)
  803f00:	dd000417 	ldw	r20,16(sp)
  803f04:	dc000517 	ldw	r16,20(sp)
  803f08:	202b003a 	cmpeq	r21,r4,zero
  803f0c:	d8001515 	stw	zero,84(sp)
  803f10:	d8001615 	stw	zero,88(sp)
  803f14:	a800131e 	bne	r21,zero,803f64 <_dtoa_r+0xa24>
  803f18:	d9000317 	ldw	r4,12(sp)
  803f1c:	00800044 	movi	r2,1
  803f20:	1101a216 	blt	r2,r4,8045ac <_dtoa_r+0x106c>
  803f24:	d8801317 	ldw	r2,76(sp)
  803f28:	1d810cc4 	addi	r22,r3,1075
  803f2c:	1000031e 	bne	r2,zero,803f3c <_dtoa_r+0x9fc>
  803f30:	d8800117 	ldw	r2,4(sp)
  803f34:	00c00d84 	movi	r3,54
  803f38:	18adc83a 	sub	r22,r3,r2
  803f3c:	e009883a 	mov	r4,fp
  803f40:	01400044 	movi	r5,1
  803f44:	0805ca80 	call	805ca8 <_i2b>
  803f48:	d8801615 	stw	r2,88(sp)
  803f4c:	d9000d17 	ldw	r4,52(sp)
  803f50:	d8800417 	ldw	r2,16(sp)
  803f54:	2589883a 	add	r4,r4,r22
  803f58:	1585883a 	add	r2,r2,r22
  803f5c:	d9000d15 	stw	r4,52(sp)
  803f60:	d8800415 	stw	r2,16(sp)
  803f64:	05000c0e 	bge	zero,r20,803f98 <_dtoa_r+0xa58>
  803f68:	d8c00d17 	ldw	r3,52(sp)
  803f6c:	00c00a0e 	bge	zero,r3,803f98 <_dtoa_r+0xa58>
  803f70:	182d883a 	mov	r22,r3
  803f74:	a0c0010e 	bge	r20,r3,803f7c <_dtoa_r+0xa3c>
  803f78:	a02d883a 	mov	r22,r20
  803f7c:	d9000d17 	ldw	r4,52(sp)
  803f80:	d8800417 	ldw	r2,16(sp)
  803f84:	a5a9c83a 	sub	r20,r20,r22
  803f88:	2589c83a 	sub	r4,r4,r22
  803f8c:	1585c83a 	sub	r2,r2,r22
  803f90:	d9000d15 	stw	r4,52(sp)
  803f94:	d8800415 	stw	r2,16(sp)
  803f98:	d8c00517 	ldw	r3,20(sp)
  803f9c:	00c0130e 	bge	zero,r3,803fec <_dtoa_r+0xaac>
  803fa0:	a801941e 	bne	r21,zero,8045f4 <_dtoa_r+0x10b4>
  803fa4:	04000e0e 	bge	zero,r16,803fe0 <_dtoa_r+0xaa0>
  803fa8:	d9401617 	ldw	r5,88(sp)
  803fac:	e009883a 	mov	r4,fp
  803fb0:	800d883a 	mov	r6,r16
  803fb4:	0805f380 	call	805f38 <_pow5mult>
  803fb8:	d9801417 	ldw	r6,80(sp)
  803fbc:	e009883a 	mov	r4,fp
  803fc0:	100b883a 	mov	r5,r2
  803fc4:	d8801615 	stw	r2,88(sp)
  803fc8:	0805ce40 	call	805ce4 <_multiply>
  803fcc:	d9401417 	ldw	r5,80(sp)
  803fd0:	1023883a 	mov	r17,r2
  803fd4:	e009883a 	mov	r4,fp
  803fd8:	080594c0 	call	80594c <_Bfree>
  803fdc:	dc401415 	stw	r17,80(sp)
  803fe0:	d9000517 	ldw	r4,20(sp)
  803fe4:	2423c83a 	sub	r17,r4,r16
  803fe8:	8801af1e 	bne	r17,zero,8046a8 <_dtoa_r+0x1168>
  803fec:	04000044 	movi	r16,1
  803ff0:	e009883a 	mov	r4,fp
  803ff4:	800b883a 	mov	r5,r16
  803ff8:	0805ca80 	call	805ca8 <_i2b>
  803ffc:	102f883a 	mov	r23,r2
  804000:	d8800e17 	ldw	r2,56(sp)
  804004:	0080050e 	bge	zero,r2,80401c <_dtoa_r+0xadc>
  804008:	b80b883a 	mov	r5,r23
  80400c:	e009883a 	mov	r4,fp
  804010:	100d883a 	mov	r6,r2
  804014:	0805f380 	call	805f38 <_pow5mult>
  804018:	102f883a 	mov	r23,r2
  80401c:	d8c00317 	ldw	r3,12(sp)
  804020:	0023883a 	mov	r17,zero
  804024:	80c00e16 	blt	r16,r3,804060 <_dtoa_r+0xb20>
  804028:	90000d1e 	bne	r18,zero,804060 <_dtoa_r+0xb20>
  80402c:	00800434 	movhi	r2,16
  804030:	10bfffc4 	addi	r2,r2,-1
  804034:	9884703a 	and	r2,r19,r2
  804038:	1000091e 	bne	r2,zero,804060 <_dtoa_r+0xb20>
  80403c:	989ffc2c 	andhi	r2,r19,32752
  804040:	10000726 	beq	r2,zero,804060 <_dtoa_r+0xb20>
  804044:	d9000417 	ldw	r4,16(sp)
  804048:	d8800d17 	ldw	r2,52(sp)
  80404c:	8023883a 	mov	r17,r16
  804050:	21000044 	addi	r4,r4,1
  804054:	10800044 	addi	r2,r2,1
  804058:	d9000415 	stw	r4,16(sp)
  80405c:	d8800d15 	stw	r2,52(sp)
  804060:	d8c00e17 	ldw	r3,56(sp)
  804064:	1800f41e 	bne	r3,zero,804438 <_dtoa_r+0xef8>
  804068:	d8c00d17 	ldw	r3,52(sp)
  80406c:	18800044 	addi	r2,r3,1
  804070:	158007cc 	andi	r22,r2,31
  804074:	b0000226 	beq	r22,zero,804080 <_dtoa_r+0xb40>
  804078:	00800804 	movi	r2,32
  80407c:	15adc83a 	sub	r22,r2,r22
  804080:	00800104 	movi	r2,4
  804084:	1580b20e 	bge	r2,r22,804350 <_dtoa_r+0xe10>
  804088:	d9000d17 	ldw	r4,52(sp)
  80408c:	d8800417 	ldw	r2,16(sp)
  804090:	b5bfff04 	addi	r22,r22,-4
  804094:	2589883a 	add	r4,r4,r22
  804098:	1585883a 	add	r2,r2,r22
  80409c:	d9000d15 	stw	r4,52(sp)
  8040a0:	d8800415 	stw	r2,16(sp)
  8040a4:	a5a9883a 	add	r20,r20,r22
  8040a8:	d8800417 	ldw	r2,16(sp)
  8040ac:	0080050e 	bge	zero,r2,8040c4 <_dtoa_r+0xb84>
  8040b0:	d9401417 	ldw	r5,80(sp)
  8040b4:	100d883a 	mov	r6,r2
  8040b8:	e009883a 	mov	r4,fp
  8040bc:	08060640 	call	806064 <_lshift>
  8040c0:	d8801415 	stw	r2,80(sp)
  8040c4:	d8c00d17 	ldw	r3,52(sp)
  8040c8:	00c0050e 	bge	zero,r3,8040e0 <_dtoa_r+0xba0>
  8040cc:	b80b883a 	mov	r5,r23
  8040d0:	180d883a 	mov	r6,r3
  8040d4:	e009883a 	mov	r4,fp
  8040d8:	08060640 	call	806064 <_lshift>
  8040dc:	102f883a 	mov	r23,r2
  8040e0:	d9000b17 	ldw	r4,44(sp)
  8040e4:	2000c31e 	bne	r4,zero,8043f4 <_dtoa_r+0xeb4>
  8040e8:	d9000617 	ldw	r4,24(sp)
  8040ec:	0101520e 	bge	zero,r4,804638 <_dtoa_r+0x10f8>
  8040f0:	05800044 	movi	r22,1
  8040f4:	a8004d1e 	bne	r21,zero,80422c <_dtoa_r+0xcec>
  8040f8:	0500050e 	bge	zero,r20,804110 <_dtoa_r+0xbd0>
  8040fc:	d9401617 	ldw	r5,88(sp)
  804100:	a00d883a 	mov	r6,r20
  804104:	e009883a 	mov	r4,fp
  804108:	08060640 	call	806064 <_lshift>
  80410c:	d8801615 	stw	r2,88(sp)
  804110:	d8801617 	ldw	r2,88(sp)
  804114:	d8801515 	stw	r2,84(sp)
  804118:	8801661e 	bne	r17,zero,8046b4 <_dtoa_r+0x1174>
  80411c:	94c0004c 	andi	r19,r18,1
  804120:	05800044 	movi	r22,1
  804124:	05400e44 	movi	r21,57
  804128:	d9001417 	ldw	r4,80(sp)
  80412c:	b80b883a 	mov	r5,r23
  804130:	05000044 	movi	r20,1
  804134:	08033140 	call	803314 <quorem>
  804138:	d9001417 	ldw	r4,80(sp)
  80413c:	d9401517 	ldw	r5,84(sp)
  804140:	14800c04 	addi	r18,r2,48
  804144:	080619c0 	call	80619c <__mcmp>
  804148:	d9801617 	ldw	r6,88(sp)
  80414c:	e009883a 	mov	r4,fp
  804150:	b80b883a 	mov	r5,r23
  804154:	1023883a 	mov	r17,r2
  804158:	08062000 	call	806200 <__mdiff>
  80415c:	1021883a 	mov	r16,r2
  804160:	10800317 	ldw	r2,12(r2)
  804164:	10006c26 	beq	r2,zero,804318 <_dtoa_r+0xdd8>
  804168:	800b883a 	mov	r5,r16
  80416c:	e009883a 	mov	r4,fp
  804170:	080594c0 	call	80594c <_Bfree>
  804174:	a000031e 	bne	r20,zero,804184 <_dtoa_r+0xc44>
  804178:	d9000317 	ldw	r4,12(sp)
  80417c:	2000011e 	bne	r4,zero,804184 <_dtoa_r+0xc44>
  804180:	98005d26 	beq	r19,zero,8042f8 <_dtoa_r+0xdb8>
  804184:	88004a16 	blt	r17,zero,8042b0 <_dtoa_r+0xd70>
  804188:	8800031e 	bne	r17,zero,804198 <_dtoa_r+0xc58>
  80418c:	d8c00317 	ldw	r3,12(sp)
  804190:	1800011e 	bne	r3,zero,804198 <_dtoa_r+0xc58>
  804194:	98004626 	beq	r19,zero,8042b0 <_dtoa_r+0xd70>
  804198:	0501a916 	blt	zero,r20,804840 <_dtoa_r+0x1300>
  80419c:	d9001717 	ldw	r4,92(sp)
  8041a0:	24800005 	stb	r18,0(r4)
  8041a4:	d8800617 	ldw	r2,24(sp)
  8041a8:	21000044 	addi	r4,r4,1
  8041ac:	d9001715 	stw	r4,92(sp)
  8041b0:	b0802926 	beq	r22,r2,804258 <_dtoa_r+0xd18>
  8041b4:	d9401417 	ldw	r5,80(sp)
  8041b8:	e009883a 	mov	r4,fp
  8041bc:	01800284 	movi	r6,10
  8041c0:	000f883a 	mov	r7,zero
  8041c4:	08059700 	call	805970 <_multadd>
  8041c8:	d8c01517 	ldw	r3,84(sp)
  8041cc:	d9001617 	ldw	r4,88(sp)
  8041d0:	d8801415 	stw	r2,80(sp)
  8041d4:	19005526 	beq	r3,r4,80432c <_dtoa_r+0xdec>
  8041d8:	d9401517 	ldw	r5,84(sp)
  8041dc:	e009883a 	mov	r4,fp
  8041e0:	01800284 	movi	r6,10
  8041e4:	000f883a 	mov	r7,zero
  8041e8:	08059700 	call	805970 <_multadd>
  8041ec:	d9401617 	ldw	r5,88(sp)
  8041f0:	e009883a 	mov	r4,fp
  8041f4:	01800284 	movi	r6,10
  8041f8:	000f883a 	mov	r7,zero
  8041fc:	d8801515 	stw	r2,84(sp)
  804200:	b5800044 	addi	r22,r22,1
  804204:	08059700 	call	805970 <_multadd>
  804208:	d8801615 	stw	r2,88(sp)
  80420c:	003fc606 	br	804128 <_dtoa_r+0xbe8>
  804210:	d9401417 	ldw	r5,80(sp)
  804214:	e009883a 	mov	r4,fp
  804218:	01800284 	movi	r6,10
  80421c:	000f883a 	mov	r7,zero
  804220:	08059700 	call	805970 <_multadd>
  804224:	d8801415 	stw	r2,80(sp)
  804228:	b5800044 	addi	r22,r22,1
  80422c:	d9001417 	ldw	r4,80(sp)
  804230:	b80b883a 	mov	r5,r23
  804234:	08033140 	call	803314 <quorem>
  804238:	14800c04 	addi	r18,r2,48
  80423c:	d8801717 	ldw	r2,92(sp)
  804240:	14800005 	stb	r18,0(r2)
  804244:	d8801717 	ldw	r2,92(sp)
  804248:	d8c00617 	ldw	r3,24(sp)
  80424c:	10800044 	addi	r2,r2,1
  804250:	d8801715 	stw	r2,92(sp)
  804254:	b0ffee16 	blt	r22,r3,804210 <_dtoa_r+0xcd0>
  804258:	d9401417 	ldw	r5,80(sp)
  80425c:	e009883a 	mov	r4,fp
  804260:	01800044 	movi	r6,1
  804264:	08060640 	call	806064 <_lshift>
  804268:	1009883a 	mov	r4,r2
  80426c:	b80b883a 	mov	r5,r23
  804270:	d8801415 	stw	r2,80(sp)
  804274:	080619c0 	call	80619c <__mcmp>
  804278:	0081770e 	bge	zero,r2,804858 <_dtoa_r+0x1318>
  80427c:	d9001717 	ldw	r4,92(sp)
  804280:	00800e44 	movi	r2,57
  804284:	213fffc4 	addi	r4,r4,-1
  804288:	d9001715 	stw	r4,92(sp)
  80428c:	20c00007 	ldb	r3,0(r4)
  804290:	1880391e 	bne	r3,r2,804378 <_dtoa_r+0xe38>
  804294:	d8801717 	ldw	r2,92(sp)
  804298:	d9001817 	ldw	r4,96(sp)
  80429c:	113e3126 	beq	r2,r4,803b64 <_dtoa_r+0x624>
  8042a0:	10bfffc4 	addi	r2,r2,-1
  8042a4:	d8801715 	stw	r2,92(sp)
  8042a8:	10800007 	ldb	r2,0(r2)
  8042ac:	003ff806 	br	804290 <_dtoa_r+0xd50>
  8042b0:	05000c0e 	bge	zero,r20,8042e4 <_dtoa_r+0xda4>
  8042b4:	d9401417 	ldw	r5,80(sp)
  8042b8:	e009883a 	mov	r4,fp
  8042bc:	01800044 	movi	r6,1
  8042c0:	08060640 	call	806064 <_lshift>
  8042c4:	1009883a 	mov	r4,r2
  8042c8:	b80b883a 	mov	r5,r23
  8042cc:	d8801415 	stw	r2,80(sp)
  8042d0:	080619c0 	call	80619c <__mcmp>
  8042d4:	00818a0e 	bge	zero,r2,804900 <_dtoa_r+0x13c0>
  8042d8:	94800044 	addi	r18,r18,1
  8042dc:	00800e84 	movi	r2,58
  8042e0:	90815826 	beq	r18,r2,804844 <_dtoa_r+0x1304>
  8042e4:	d9001717 	ldw	r4,92(sp)
  8042e8:	24800005 	stb	r18,0(r4)
  8042ec:	21000044 	addi	r4,r4,1
  8042f0:	d9001715 	stw	r4,92(sp)
  8042f4:	003e2406 	br	803b88 <_dtoa_r+0x648>
  8042f8:	95415226 	beq	r18,r21,804844 <_dtoa_r+0x1304>
  8042fc:	0440010e 	bge	zero,r17,804304 <_dtoa_r+0xdc4>
  804300:	94800044 	addi	r18,r18,1
  804304:	d8801717 	ldw	r2,92(sp)
  804308:	14800005 	stb	r18,0(r2)
  80430c:	10800044 	addi	r2,r2,1
  804310:	d8801715 	stw	r2,92(sp)
  804314:	003e1c06 	br	803b88 <_dtoa_r+0x648>
  804318:	d9001417 	ldw	r4,80(sp)
  80431c:	800b883a 	mov	r5,r16
  804320:	080619c0 	call	80619c <__mcmp>
  804324:	1029883a 	mov	r20,r2
  804328:	003f8f06 	br	804168 <_dtoa_r+0xc28>
  80432c:	200b883a 	mov	r5,r4
  804330:	01800284 	movi	r6,10
  804334:	e009883a 	mov	r4,fp
  804338:	000f883a 	mov	r7,zero
  80433c:	08059700 	call	805970 <_multadd>
  804340:	b5800044 	addi	r22,r22,1
  804344:	d8801615 	stw	r2,88(sp)
  804348:	d8801515 	stw	r2,84(sp)
  80434c:	003f7606 	br	804128 <_dtoa_r+0xbe8>
  804350:	008000c4 	movi	r2,3
  804354:	15bf5416 	blt	r2,r22,8040a8 <_dtoa_r+0xb68>
  804358:	d8c00d17 	ldw	r3,52(sp)
  80435c:	d9000417 	ldw	r4,16(sp)
  804360:	b5800704 	addi	r22,r22,28
  804364:	1d87883a 	add	r3,r3,r22
  804368:	2589883a 	add	r4,r4,r22
  80436c:	d8c00d15 	stw	r3,52(sp)
  804370:	d9000415 	stw	r4,16(sp)
  804374:	003f4b06 	br	8040a4 <_dtoa_r+0xb64>
  804378:	d8c01717 	ldw	r3,92(sp)
  80437c:	18800003 	ldbu	r2,0(r3)
  804380:	19000044 	addi	r4,r3,1
  804384:	d9001715 	stw	r4,92(sp)
  804388:	10800044 	addi	r2,r2,1
  80438c:	18800005 	stb	r2,0(r3)
  804390:	003dfd06 	br	803b88 <_dtoa_r+0x648>
  804394:	d8800417 	ldw	r2,16(sp)
  804398:	d8c00917 	ldw	r3,36(sp)
  80439c:	d8000e15 	stw	zero,56(sp)
  8043a0:	10c5c83a 	sub	r2,r2,r3
  8043a4:	00c9c83a 	sub	r4,zero,r3
  8043a8:	d8800415 	stw	r2,16(sp)
  8043ac:	d9000515 	stw	r4,20(sp)
  8043b0:	003d3b06 	br	8038a0 <_dtoa_r+0x360>
  8043b4:	0463c83a 	sub	r17,zero,r17
  8043b8:	dc400415 	stw	r17,16(sp)
  8043bc:	d8000d15 	stw	zero,52(sp)
  8043c0:	003d3006 	br	803884 <_dtoa_r+0x344>
  8043c4:	d9000917 	ldw	r4,36(sp)
  8043c8:	0808c780 	call	808c78 <__floatsidf>
  8043cc:	180b883a 	mov	r5,r3
  8043d0:	800d883a 	mov	r6,r16
  8043d4:	880f883a 	mov	r7,r17
  8043d8:	1009883a 	mov	r4,r2
  8043dc:	0808a480 	call	808a48 <__nedf2>
  8043e0:	103d0e26 	beq	r2,zero,80381c <_dtoa_r+0x2dc>
  8043e4:	d8800917 	ldw	r2,36(sp)
  8043e8:	10bfffc4 	addi	r2,r2,-1
  8043ec:	d8800915 	stw	r2,36(sp)
  8043f0:	003d0a06 	br	80381c <_dtoa_r+0x2dc>
  8043f4:	d9001417 	ldw	r4,80(sp)
  8043f8:	b80b883a 	mov	r5,r23
  8043fc:	080619c0 	call	80619c <__mcmp>
  804400:	103f390e 	bge	r2,zero,8040e8 <_dtoa_r+0xba8>
  804404:	d9401417 	ldw	r5,80(sp)
  804408:	e009883a 	mov	r4,fp
  80440c:	01800284 	movi	r6,10
  804410:	000f883a 	mov	r7,zero
  804414:	08059700 	call	805970 <_multadd>
  804418:	d8801415 	stw	r2,80(sp)
  80441c:	d8800917 	ldw	r2,36(sp)
  804420:	10bfffc4 	addi	r2,r2,-1
  804424:	d8800915 	stw	r2,36(sp)
  804428:	a8013926 	beq	r21,zero,804910 <_dtoa_r+0x13d0>
  80442c:	d8c00817 	ldw	r3,32(sp)
  804430:	d8c00615 	stw	r3,24(sp)
  804434:	003f2c06 	br	8040e8 <_dtoa_r+0xba8>
  804438:	b8800417 	ldw	r2,16(r23)
  80443c:	100490ba 	slli	r2,r2,2
  804440:	15c5883a 	add	r2,r2,r23
  804444:	11000417 	ldw	r4,16(r2)
  804448:	0805b900 	call	805b90 <_hi0bits>
  80444c:	d9000d17 	ldw	r4,52(sp)
  804450:	2085c83a 	sub	r2,r4,r2
  804454:	003f0606 	br	804070 <_dtoa_r+0xb30>
  804458:	d8800c17 	ldw	r2,48(sp)
  80445c:	1000a626 	beq	r2,zero,8046f8 <_dtoa_r+0x11b8>
  804460:	d8c00617 	ldw	r3,24(sp)
  804464:	01002074 	movhi	r4,129
  804468:	2100ee04 	addi	r4,r4,952
  80446c:	0005883a 	mov	r2,zero
  804470:	180c90fa 	slli	r6,r3,3
  804474:	00cff834 	movhi	r3,16352
  804478:	18c00004 	addi	r3,r3,0
  80447c:	180b883a 	mov	r5,r3
  804480:	310d883a 	add	r6,r6,r4
  804484:	32400117 	ldw	r9,4(r6)
  804488:	32000017 	ldw	r8,0(r6)
  80448c:	1009883a 	mov	r4,r2
  804490:	480f883a 	mov	r7,r9
  804494:	400d883a 	mov	r6,r8
  804498:	080876c0 	call	80876c <__divdf3>
  80449c:	d9801117 	ldw	r6,68(sp)
  8044a0:	180b883a 	mov	r5,r3
  8044a4:	a00f883a 	mov	r7,r20
  8044a8:	1009883a 	mov	r4,r2
  8044ac:	08082f40 	call	8082f4 <__subdf3>
  8044b0:	002d883a 	mov	r22,zero
  8044b4:	d8801115 	stw	r2,68(sp)
  8044b8:	d8c01215 	stw	r3,72(sp)
  8044bc:	00001106 	br	804504 <_dtoa_r+0xfc4>
  8044c0:	d9c01217 	ldw	r7,72(sp)
  8044c4:	d9801117 	ldw	r6,68(sp)
  8044c8:	04500934 	movhi	r17,16420
  8044cc:	8c400004 	addi	r17,r17,0
  8044d0:	0021883a 	mov	r16,zero
  8044d4:	8009883a 	mov	r4,r16
  8044d8:	880b883a 	mov	r5,r17
  8044dc:	080836c0 	call	80836c <__muldf3>
  8044e0:	0009883a 	mov	r4,zero
  8044e4:	880b883a 	mov	r5,r17
  8044e8:	a00d883a 	mov	r6,r20
  8044ec:	a80f883a 	mov	r7,r21
  8044f0:	d8801115 	stw	r2,68(sp)
  8044f4:	d8c01215 	stw	r3,72(sp)
  8044f8:	080836c0 	call	80836c <__muldf3>
  8044fc:	1025883a 	mov	r18,r2
  804500:	1827883a 	mov	r19,r3
  804504:	980b883a 	mov	r5,r19
  804508:	9009883a 	mov	r4,r18
  80450c:	0808d480 	call	808d48 <__fixdfsi>
  804510:	1009883a 	mov	r4,r2
  804514:	102f883a 	mov	r23,r2
  804518:	0808c780 	call	808c78 <__floatsidf>
  80451c:	980b883a 	mov	r5,r19
  804520:	180f883a 	mov	r7,r3
  804524:	9009883a 	mov	r4,r18
  804528:	100d883a 	mov	r6,r2
  80452c:	08082f40 	call	8082f4 <__subdf3>
  804530:	182b883a 	mov	r21,r3
  804534:	d8c01717 	ldw	r3,92(sp)
  804538:	1029883a 	mov	r20,r2
  80453c:	b8800c04 	addi	r2,r23,48
  804540:	18800005 	stb	r2,0(r3)
  804544:	d9801117 	ldw	r6,68(sp)
  804548:	d9c01217 	ldw	r7,72(sp)
  80454c:	18c00044 	addi	r3,r3,1
  804550:	a009883a 	mov	r4,r20
  804554:	a80b883a 	mov	r5,r21
  804558:	d8c01715 	stw	r3,92(sp)
  80455c:	0808bec0 	call	808bec <__ltdf2>
  804560:	103d9716 	blt	r2,zero,803bc0 <_dtoa_r+0x680>
  804564:	0005883a 	mov	r2,zero
  804568:	00cffc34 	movhi	r3,16368
  80456c:	18c00004 	addi	r3,r3,0
  804570:	180b883a 	mov	r5,r3
  804574:	1009883a 	mov	r4,r2
  804578:	a00d883a 	mov	r6,r20
  80457c:	a80f883a 	mov	r7,r21
  804580:	08082f40 	call	8082f4 <__subdf3>
  804584:	d9801117 	ldw	r6,68(sp)
  804588:	d9c01217 	ldw	r7,72(sp)
  80458c:	180b883a 	mov	r5,r3
  804590:	1009883a 	mov	r4,r2
  804594:	0808bec0 	call	808bec <__ltdf2>
  804598:	103e0216 	blt	r2,zero,803da4 <_dtoa_r+0x864>
  80459c:	d9000617 	ldw	r4,24(sp)
  8045a0:	b5800044 	addi	r22,r22,1
  8045a4:	b13fc616 	blt	r22,r4,8044c0 <_dtoa_r+0xf80>
  8045a8:	003da106 	br	803c30 <_dtoa_r+0x6f0>
  8045ac:	d8c00617 	ldw	r3,24(sp)
  8045b0:	d9000517 	ldw	r4,20(sp)
  8045b4:	1c7fffc4 	addi	r17,r3,-1
  8045b8:	2461c83a 	sub	r16,r4,r17
  8045bc:	2440070e 	bge	r4,r17,8045dc <_dtoa_r+0x109c>
  8045c0:	d8800e17 	ldw	r2,56(sp)
  8045c4:	8923c83a 	sub	r17,r17,r4
  8045c8:	2449883a 	add	r4,r4,r17
  8045cc:	1445883a 	add	r2,r2,r17
  8045d0:	d9000515 	stw	r4,20(sp)
  8045d4:	d8800e15 	stw	r2,56(sp)
  8045d8:	0021883a 	mov	r16,zero
  8045dc:	dd800617 	ldw	r22,24(sp)
  8045e0:	b03e560e 	bge	r22,zero,803f3c <_dtoa_r+0x9fc>
  8045e4:	d8c00417 	ldw	r3,16(sp)
  8045e8:	1da9c83a 	sub	r20,r3,r22
  8045ec:	002d883a 	mov	r22,zero
  8045f0:	003e5206 	br	803f3c <_dtoa_r+0x9fc>
  8045f4:	d9401417 	ldw	r5,80(sp)
  8045f8:	d9800517 	ldw	r6,20(sp)
  8045fc:	e009883a 	mov	r4,fp
  804600:	0805f380 	call	805f38 <_pow5mult>
  804604:	d8801415 	stw	r2,80(sp)
  804608:	003e7806 	br	803fec <_dtoa_r+0xaac>
  80460c:	0005883a 	mov	r2,zero
  804610:	00d07c34 	movhi	r3,16880
  804614:	18c00004 	addi	r3,r3,0
  804618:	480b883a 	mov	r5,r9
  80461c:	4009883a 	mov	r4,r8
  804620:	180f883a 	mov	r7,r3
  804624:	100d883a 	mov	r6,r2
  804628:	08082880 	call	808288 <__adddf3>
  80462c:	1011883a 	mov	r8,r2
  804630:	1813883a 	mov	r9,r3
  804634:	003c3906 	br	80371c <_dtoa_r+0x1dc>
  804638:	d8c00317 	ldw	r3,12(sp)
  80463c:	00800084 	movi	r2,2
  804640:	10feab0e 	bge	r2,r3,8040f0 <_dtoa_r+0xbb0>
  804644:	203e0416 	blt	r4,zero,803e58 <_dtoa_r+0x918>
  804648:	b80b883a 	mov	r5,r23
  80464c:	e009883a 	mov	r4,fp
  804650:	01800144 	movi	r6,5
  804654:	000f883a 	mov	r7,zero
  804658:	08059700 	call	805970 <_multadd>
  80465c:	d9001417 	ldw	r4,80(sp)
  804660:	100b883a 	mov	r5,r2
  804664:	102f883a 	mov	r23,r2
  804668:	080619c0 	call	80619c <__mcmp>
  80466c:	00bd3d16 	blt	zero,r2,803b64 <_dtoa_r+0x624>
  804670:	003df906 	br	803e58 <_dtoa_r+0x918>
  804674:	d8800917 	ldw	r2,36(sp)
  804678:	d8c01817 	ldw	r3,96(sp)
  80467c:	10800044 	addi	r2,r2,1
  804680:	d8800915 	stw	r2,36(sp)
  804684:	00800c04 	movi	r2,48
  804688:	18800005 	stb	r2,0(r3)
  80468c:	d8c01717 	ldw	r3,92(sp)
  804690:	18800003 	ldbu	r2,0(r3)
  804694:	19000044 	addi	r4,r3,1
  804698:	d9001715 	stw	r4,92(sp)
  80469c:	10800044 	addi	r2,r2,1
  8046a0:	18800005 	stb	r2,0(r3)
  8046a4:	003d4606 	br	803bc0 <_dtoa_r+0x680>
  8046a8:	d9401417 	ldw	r5,80(sp)
  8046ac:	880d883a 	mov	r6,r17
  8046b0:	003fd206 	br	8045fc <_dtoa_r+0x10bc>
  8046b4:	11400117 	ldw	r5,4(r2)
  8046b8:	e009883a 	mov	r4,fp
  8046bc:	080589c0 	call	80589c <_Balloc>
  8046c0:	d8c01517 	ldw	r3,84(sp)
  8046c4:	11000304 	addi	r4,r2,12
  8046c8:	d8801615 	stw	r2,88(sp)
  8046cc:	19800417 	ldw	r6,16(r3)
  8046d0:	19400304 	addi	r5,r3,12
  8046d4:	300c90ba 	slli	r6,r6,2
  8046d8:	31800204 	addi	r6,r6,8
  8046dc:	080563c0 	call	80563c <memcpy>
  8046e0:	d9401617 	ldw	r5,88(sp)
  8046e4:	e009883a 	mov	r4,fp
  8046e8:	01800044 	movi	r6,1
  8046ec:	08060640 	call	806064 <_lshift>
  8046f0:	d8801615 	stw	r2,88(sp)
  8046f4:	003e8906 	br	80411c <_dtoa_r+0xbdc>
  8046f8:	d8c00617 	ldw	r3,24(sp)
  8046fc:	01002074 	movhi	r4,129
  804700:	2100ee04 	addi	r4,r4,952
  804704:	d9801117 	ldw	r6,68(sp)
  804708:	180a90fa 	slli	r5,r3,3
  80470c:	a00f883a 	mov	r7,r20
  804710:	05800044 	movi	r22,1
  804714:	290b883a 	add	r5,r5,r4
  804718:	28800017 	ldw	r2,0(r5)
  80471c:	28c00117 	ldw	r3,4(r5)
  804720:	1009883a 	mov	r4,r2
  804724:	180b883a 	mov	r5,r3
  804728:	080836c0 	call	80836c <__muldf3>
  80472c:	d8801115 	stw	r2,68(sp)
  804730:	d8c01215 	stw	r3,72(sp)
  804734:	00000b06 	br	804764 <_dtoa_r+0x1224>
  804738:	0005883a 	mov	r2,zero
  80473c:	00d00934 	movhi	r3,16420
  804740:	18c00004 	addi	r3,r3,0
  804744:	800d883a 	mov	r6,r16
  804748:	180b883a 	mov	r5,r3
  80474c:	880f883a 	mov	r7,r17
  804750:	1009883a 	mov	r4,r2
  804754:	080836c0 	call	80836c <__muldf3>
  804758:	1025883a 	mov	r18,r2
  80475c:	b5800044 	addi	r22,r22,1
  804760:	1827883a 	mov	r19,r3
  804764:	980b883a 	mov	r5,r19
  804768:	9009883a 	mov	r4,r18
  80476c:	0808d480 	call	808d48 <__fixdfsi>
  804770:	1009883a 	mov	r4,r2
  804774:	102f883a 	mov	r23,r2
  804778:	0808c780 	call	808c78 <__floatsidf>
  80477c:	980b883a 	mov	r5,r19
  804780:	9009883a 	mov	r4,r18
  804784:	180f883a 	mov	r7,r3
  804788:	100d883a 	mov	r6,r2
  80478c:	08082f40 	call	8082f4 <__subdf3>
  804790:	1823883a 	mov	r17,r3
  804794:	d8c01717 	ldw	r3,92(sp)
  804798:	1021883a 	mov	r16,r2
  80479c:	b8800c04 	addi	r2,r23,48
  8047a0:	18800005 	stb	r2,0(r3)
  8047a4:	d9000617 	ldw	r4,24(sp)
  8047a8:	18c00044 	addi	r3,r3,1
  8047ac:	d8c01715 	stw	r3,92(sp)
  8047b0:	b13fe11e 	bne	r22,r4,804738 <_dtoa_r+0x11f8>
  8047b4:	d9801117 	ldw	r6,68(sp)
  8047b8:	d9c01217 	ldw	r7,72(sp)
  8047bc:	0029883a 	mov	r20,zero
  8047c0:	054ff834 	movhi	r21,16352
  8047c4:	ad400004 	addi	r21,r21,0
  8047c8:	a009883a 	mov	r4,r20
  8047cc:	a80b883a 	mov	r5,r21
  8047d0:	08082880 	call	808288 <__adddf3>
  8047d4:	180b883a 	mov	r5,r3
  8047d8:	1009883a 	mov	r4,r2
  8047dc:	800d883a 	mov	r6,r16
  8047e0:	880f883a 	mov	r7,r17
  8047e4:	0808bec0 	call	808bec <__ltdf2>
  8047e8:	103d6e16 	blt	r2,zero,803da4 <_dtoa_r+0x864>
  8047ec:	d9c01217 	ldw	r7,72(sp)
  8047f0:	d9801117 	ldw	r6,68(sp)
  8047f4:	0009883a 	mov	r4,zero
  8047f8:	a80b883a 	mov	r5,r21
  8047fc:	08082f40 	call	8082f4 <__subdf3>
  804800:	180b883a 	mov	r5,r3
  804804:	800d883a 	mov	r6,r16
  804808:	880f883a 	mov	r7,r17
  80480c:	1009883a 	mov	r4,r2
  804810:	0808ad40 	call	808ad4 <__gtdf2>
  804814:	00bd060e 	bge	zero,r2,803c30 <_dtoa_r+0x6f0>
  804818:	00c00c04 	movi	r3,48
  80481c:	d8801717 	ldw	r2,92(sp)
  804820:	10bfffc4 	addi	r2,r2,-1
  804824:	d8801715 	stw	r2,92(sp)
  804828:	10800007 	ldb	r2,0(r2)
  80482c:	10fffb26 	beq	r2,r3,80481c <_dtoa_r+0x12dc>
  804830:	d8c01717 	ldw	r3,92(sp)
  804834:	18c00044 	addi	r3,r3,1
  804838:	d8c01715 	stw	r3,92(sp)
  80483c:	003ce006 	br	803bc0 <_dtoa_r+0x680>
  804840:	9540151e 	bne	r18,r21,804898 <_dtoa_r+0x1358>
  804844:	d8801717 	ldw	r2,92(sp)
  804848:	15400005 	stb	r21,0(r2)
  80484c:	10800044 	addi	r2,r2,1
  804850:	d8801715 	stw	r2,92(sp)
  804854:	003e8906 	br	80427c <_dtoa_r+0xd3c>
  804858:	1000021e 	bne	r2,zero,804864 <_dtoa_r+0x1324>
  80485c:	9080004c 	andi	r2,r18,1
  804860:	103e861e 	bne	r2,zero,80427c <_dtoa_r+0xd3c>
  804864:	00c00c04 	movi	r3,48
  804868:	d8801717 	ldw	r2,92(sp)
  80486c:	10bfffc4 	addi	r2,r2,-1
  804870:	d8801715 	stw	r2,92(sp)
  804874:	10800007 	ldb	r2,0(r2)
  804878:	10fffb26 	beq	r2,r3,804868 <_dtoa_r+0x1328>
  80487c:	d8c01717 	ldw	r3,92(sp)
  804880:	18c00044 	addi	r3,r3,1
  804884:	d8c01715 	stw	r3,92(sp)
  804888:	003cbf06 	br	803b88 <_dtoa_r+0x648>
  80488c:	00800044 	movi	r2,1
  804890:	d8802315 	stw	r2,140(sp)
  804894:	003d5606 	br	803df0 <_dtoa_r+0x8b0>
  804898:	d8c01717 	ldw	r3,92(sp)
  80489c:	90800044 	addi	r2,r18,1
  8048a0:	18800005 	stb	r2,0(r3)
  8048a4:	003ff606 	br	804880 <_dtoa_r+0x1340>
  8048a8:	d9000617 	ldw	r4,24(sp)
  8048ac:	013c860e 	bge	zero,r4,803ac8 <_dtoa_r+0x588>
  8048b0:	d8800817 	ldw	r2,32(sp)
  8048b4:	00bcde0e 	bge	zero,r2,803c30 <_dtoa_r+0x6f0>
  8048b8:	0005883a 	mov	r2,zero
  8048bc:	00d00934 	movhi	r3,16420
  8048c0:	18c00004 	addi	r3,r3,0
  8048c4:	980f883a 	mov	r7,r19
  8048c8:	180b883a 	mov	r5,r3
  8048cc:	900d883a 	mov	r6,r18
  8048d0:	1009883a 	mov	r4,r2
  8048d4:	080836c0 	call	80836c <__muldf3>
  8048d8:	180b883a 	mov	r5,r3
  8048dc:	d8c00917 	ldw	r3,36(sp)
  8048e0:	d9000817 	ldw	r4,32(sp)
  8048e4:	1025883a 	mov	r18,r2
  8048e8:	18ffffc4 	addi	r3,r3,-1
  8048ec:	2827883a 	mov	r19,r5
  8048f0:	b5800044 	addi	r22,r22,1
  8048f4:	d8c00915 	stw	r3,36(sp)
  8048f8:	d9000615 	stw	r4,24(sp)
  8048fc:	003c7206 	br	803ac8 <_dtoa_r+0x588>
  804900:	103e781e 	bne	r2,zero,8042e4 <_dtoa_r+0xda4>
  804904:	9080004c 	andi	r2,r18,1
  804908:	103e7626 	beq	r2,zero,8042e4 <_dtoa_r+0xda4>
  80490c:	003e7206 	br	8042d8 <_dtoa_r+0xd98>
  804910:	d9401617 	ldw	r5,88(sp)
  804914:	e009883a 	mov	r4,fp
  804918:	01800284 	movi	r6,10
  80491c:	000f883a 	mov	r7,zero
  804920:	08059700 	call	805970 <_multadd>
  804924:	d8801615 	stw	r2,88(sp)
  804928:	003ec006 	br	80442c <_dtoa_r+0xeec>

0080492c <fflush>:
  80492c:	defffc04 	addi	sp,sp,-16
  804930:	dc400115 	stw	r17,4(sp)
  804934:	dfc00315 	stw	ra,12(sp)
  804938:	dc000215 	stw	r16,8(sp)
  80493c:	dc800015 	stw	r18,0(sp)
  804940:	2023883a 	mov	r17,r4
  804944:	20002826 	beq	r4,zero,8049e8 <fflush+0xbc>
  804948:	d1200a17 	ldw	r4,-32728(gp)
  80494c:	20800e17 	ldw	r2,56(r4)
  804950:	10002326 	beq	r2,zero,8049e0 <fflush+0xb4>
  804954:	88c0030f 	ldh	r3,12(r17)
  804958:	1880020c 	andi	r2,r3,8
  80495c:	10001826 	beq	r2,zero,8049c0 <fflush+0x94>
  804960:	8c800417 	ldw	r18,16(r17)
  804964:	90001626 	beq	r18,zero,8049c0 <fflush+0x94>
  804968:	88800017 	ldw	r2,0(r17)
  80496c:	18c000cc 	andi	r3,r3,3
  804970:	8c800015 	stw	r18,0(r17)
  804974:	14a1c83a 	sub	r16,r2,r18
  804978:	0005883a 	mov	r2,zero
  80497c:	1800011e 	bne	r3,zero,804984 <fflush+0x58>
  804980:	88800517 	ldw	r2,20(r17)
  804984:	88800215 	stw	r2,8(r17)
  804988:	04000d0e 	bge	zero,r16,8049c0 <fflush+0x94>
  80498c:	88c00917 	ldw	r3,36(r17)
  804990:	89000717 	ldw	r4,28(r17)
  804994:	900b883a 	mov	r5,r18
  804998:	800d883a 	mov	r6,r16
  80499c:	183ee83a 	callr	r3
  8049a0:	80a1c83a 	sub	r16,r16,r2
  8049a4:	90a5883a 	add	r18,r18,r2
  8049a8:	00bff716 	blt	zero,r2,804988 <fflush+0x5c>
  8049ac:	8880030b 	ldhu	r2,12(r17)
  8049b0:	00ffffc4 	movi	r3,-1
  8049b4:	10801014 	ori	r2,r2,64
  8049b8:	8880030d 	sth	r2,12(r17)
  8049bc:	00000106 	br	8049c4 <fflush+0x98>
  8049c0:	0007883a 	mov	r3,zero
  8049c4:	1805883a 	mov	r2,r3
  8049c8:	dfc00317 	ldw	ra,12(sp)
  8049cc:	dc000217 	ldw	r16,8(sp)
  8049d0:	dc400117 	ldw	r17,4(sp)
  8049d4:	dc800017 	ldw	r18,0(sp)
  8049d8:	dec00404 	addi	sp,sp,16
  8049dc:	f800283a 	ret
  8049e0:	0804a900 	call	804a90 <__sinit>
  8049e4:	003fdb06 	br	804954 <fflush+0x28>
  8049e8:	d1200a17 	ldw	r4,-32728(gp)
  8049ec:	01402034 	movhi	r5,128
  8049f0:	29524b04 	addi	r5,r5,18732
  8049f4:	02002034 	movhi	r8,128
  8049f8:	4214a304 	addi	r8,r8,21132
  8049fc:	dfc00317 	ldw	ra,12(sp)
  804a00:	dc000217 	ldw	r16,8(sp)
  804a04:	dc400117 	ldw	r17,4(sp)
  804a08:	dc800017 	ldw	r18,0(sp)
  804a0c:	dec00404 	addi	sp,sp,16
  804a10:	4000683a 	jmp	r8

00804a14 <std>:
  804a14:	00802034 	movhi	r2,128
  804a18:	109bce04 	addi	r2,r2,28472
  804a1c:	20800b15 	stw	r2,44(r4)
  804a20:	00802034 	movhi	r2,128
  804a24:	109b9004 	addi	r2,r2,28224
  804a28:	20800915 	stw	r2,36(r4)
  804a2c:	00c02034 	movhi	r3,128
  804a30:	18db7404 	addi	r3,r3,28112
  804a34:	00802034 	movhi	r2,128
  804a38:	109bb004 	addi	r2,r2,28352
  804a3c:	2140030d 	sth	r5,12(r4)
  804a40:	2180038d 	sth	r6,14(r4)
  804a44:	20c00815 	stw	r3,32(r4)
  804a48:	20800a15 	stw	r2,40(r4)
  804a4c:	20000015 	stw	zero,0(r4)
  804a50:	20000115 	stw	zero,4(r4)
  804a54:	20000215 	stw	zero,8(r4)
  804a58:	20000415 	stw	zero,16(r4)
  804a5c:	20000515 	stw	zero,20(r4)
  804a60:	20000615 	stw	zero,24(r4)
  804a64:	21000715 	stw	r4,28(r4)
  804a68:	f800283a 	ret

00804a6c <_cleanup_r>:
  804a6c:	01402034 	movhi	r5,128
  804a70:	29524b04 	addi	r5,r5,18732
  804a74:	02002034 	movhi	r8,128
  804a78:	4214a304 	addi	r8,r8,21132
  804a7c:	4000683a 	jmp	r8

00804a80 <_cleanup>:
  804a80:	d1200a17 	ldw	r4,-32728(gp)
  804a84:	02002034 	movhi	r8,128
  804a88:	42129b04 	addi	r8,r8,19052
  804a8c:	4000683a 	jmp	r8

00804a90 <__sinit>:
  804a90:	defffc04 	addi	sp,sp,-16
  804a94:	dfc00315 	stw	ra,12(sp)
  804a98:	dc400215 	stw	r17,8(sp)
  804a9c:	dcc00115 	stw	r19,4(sp)
  804aa0:	dd400015 	stw	r21,0(sp)
  804aa4:	2023883a 	mov	r17,r4
  804aa8:	21000117 	ldw	r4,4(r4)
  804aac:	00802034 	movhi	r2,128
  804ab0:	10929b04 	addi	r2,r2,19052
  804ab4:	00c000c4 	movi	r3,3
  804ab8:	05400044 	movi	r21,1
  804abc:	89409a04 	addi	r5,r17,616
  804ac0:	88800f15 	stw	r2,60(r17)
  804ac4:	88c09815 	stw	r3,608(r17)
  804ac8:	89409915 	stw	r5,612(r17)
  804acc:	880f883a 	mov	r7,r17
  804ad0:	8d400e15 	stw	r21,56(r17)
  804ad4:	88009715 	stw	zero,604(r17)
  804ad8:	01400104 	movi	r5,4
  804adc:	000d883a 	mov	r6,zero
  804ae0:	0804a140 	call	804a14 <std>
  804ae4:	89000217 	ldw	r4,8(r17)
  804ae8:	04c00284 	movi	r19,10
  804aec:	a80d883a 	mov	r6,r21
  804af0:	980b883a 	mov	r5,r19
  804af4:	880f883a 	mov	r7,r17
  804af8:	0804a140 	call	804a14 <std>
  804afc:	89000317 	ldw	r4,12(r17)
  804b00:	980b883a 	mov	r5,r19
  804b04:	880f883a 	mov	r7,r17
  804b08:	01800084 	movi	r6,2
  804b0c:	02002034 	movhi	r8,128
  804b10:	42128504 	addi	r8,r8,18964
  804b14:	dfc00317 	ldw	ra,12(sp)
  804b18:	dc400217 	ldw	r17,8(sp)
  804b1c:	dcc00117 	ldw	r19,4(sp)
  804b20:	dd400017 	ldw	r21,0(sp)
  804b24:	dec00404 	addi	sp,sp,16
  804b28:	4000683a 	jmp	r8

00804b2c <_malloc_trim_r>:
  804b2c:	defffb04 	addi	sp,sp,-20
  804b30:	dcc00015 	stw	r19,0(sp)
  804b34:	04c02074 	movhi	r19,129
  804b38:	9cc19204 	addi	r19,r19,1608
  804b3c:	dc000315 	stw	r16,12(sp)
  804b40:	dc400215 	stw	r17,8(sp)
  804b44:	dc800115 	stw	r18,4(sp)
  804b48:	2823883a 	mov	r17,r5
  804b4c:	2021883a 	mov	r16,r4
  804b50:	dfc00415 	stw	ra,16(sp)
  804b54:	0809a8c0 	call	809a8c <__malloc_lock>
  804b58:	98800217 	ldw	r2,8(r19)
  804b5c:	8009883a 	mov	r4,r16
  804b60:	000b883a 	mov	r5,zero
  804b64:	10c00117 	ldw	r3,4(r2)
  804b68:	00bfff04 	movi	r2,-4
  804b6c:	18a4703a 	and	r18,r3,r2
  804b70:	9463c83a 	sub	r17,r18,r17
  804b74:	8c43fbc4 	addi	r17,r17,4079
  804b78:	8822d33a 	srli	r17,r17,12
  804b7c:	00840004 	movi	r2,4096
  804b80:	8c7fffc4 	addi	r17,r17,-1
  804b84:	8822933a 	slli	r17,r17,12
  804b88:	88800616 	blt	r17,r2,804ba4 <_malloc_trim_r+0x78>
  804b8c:	0800e280 	call	800e28 <_sbrk_r>
  804b90:	98c00217 	ldw	r3,8(r19)
  804b94:	8009883a 	mov	r4,r16
  804b98:	044bc83a 	sub	r5,zero,r17
  804b9c:	1c87883a 	add	r3,r3,r18
  804ba0:	18800926 	beq	r3,r2,804bc8 <_malloc_trim_r+0x9c>
  804ba4:	0809aa80 	call	809aa8 <__malloc_unlock>
  804ba8:	0005883a 	mov	r2,zero
  804bac:	dfc00417 	ldw	ra,16(sp)
  804bb0:	dc000317 	ldw	r16,12(sp)
  804bb4:	dc400217 	ldw	r17,8(sp)
  804bb8:	dc800117 	ldw	r18,4(sp)
  804bbc:	dcc00017 	ldw	r19,0(sp)
  804bc0:	dec00504 	addi	sp,sp,20
  804bc4:	f800283a 	ret
  804bc8:	8009883a 	mov	r4,r16
  804bcc:	0800e280 	call	800e28 <_sbrk_r>
  804bd0:	944dc83a 	sub	r6,r18,r17
  804bd4:	00ffffc4 	movi	r3,-1
  804bd8:	8009883a 	mov	r4,r16
  804bdc:	000b883a 	mov	r5,zero
  804be0:	01c02074 	movhi	r7,129
  804be4:	39c18804 	addi	r7,r7,1568
  804be8:	31800054 	ori	r6,r6,1
  804bec:	10c00926 	beq	r2,r3,804c14 <_malloc_trim_r+0xe8>
  804bf0:	38800017 	ldw	r2,0(r7)
  804bf4:	98c00217 	ldw	r3,8(r19)
  804bf8:	8009883a 	mov	r4,r16
  804bfc:	1445c83a 	sub	r2,r2,r17
  804c00:	38800015 	stw	r2,0(r7)
  804c04:	19800115 	stw	r6,4(r3)
  804c08:	0809aa80 	call	809aa8 <__malloc_unlock>
  804c0c:	00800044 	movi	r2,1
  804c10:	003fe606 	br	804bac <_malloc_trim_r+0x80>
  804c14:	0800e280 	call	800e28 <_sbrk_r>
  804c18:	99400217 	ldw	r5,8(r19)
  804c1c:	100d883a 	mov	r6,r2
  804c20:	8009883a 	mov	r4,r16
  804c24:	1165c83a 	sub	r18,r2,r5
  804c28:	008003c4 	movi	r2,15
  804c2c:	90c00054 	ori	r3,r18,1
  804c30:	14bfdc0e 	bge	r2,r18,804ba4 <_malloc_trim_r+0x78>
  804c34:	28c00115 	stw	r3,4(r5)
  804c38:	d0e00717 	ldw	r3,-32740(gp)
  804c3c:	00802074 	movhi	r2,129
  804c40:	10818804 	addi	r2,r2,1568
  804c44:	30c7c83a 	sub	r3,r6,r3
  804c48:	10c00015 	stw	r3,0(r2)
  804c4c:	003fd506 	br	804ba4 <_malloc_trim_r+0x78>

00804c50 <_free_r>:
  804c50:	defffd04 	addi	sp,sp,-12
  804c54:	dc000115 	stw	r16,4(sp)
  804c58:	dc400015 	stw	r17,0(sp)
  804c5c:	dfc00215 	stw	ra,8(sp)
  804c60:	2821883a 	mov	r16,r5
  804c64:	2023883a 	mov	r17,r4
  804c68:	28003226 	beq	r5,zero,804d34 <_free_r+0xe4>
  804c6c:	0809a8c0 	call	809a8c <__malloc_lock>
  804c70:	82bffe04 	addi	r10,r16,-8
  804c74:	51400117 	ldw	r5,4(r10)
  804c78:	00bfff84 	movi	r2,-2
  804c7c:	03002074 	movhi	r12,129
  804c80:	63019204 	addi	r12,r12,1608
  804c84:	2892703a 	and	r9,r5,r2
  804c88:	524d883a 	add	r6,r10,r9
  804c8c:	30c00117 	ldw	r3,4(r6)
  804c90:	61000217 	ldw	r4,8(r12)
  804c94:	00bfff04 	movi	r2,-4
  804c98:	1896703a 	and	r11,r3,r2
  804c9c:	21804e26 	beq	r4,r6,804dd8 <_free_r+0x188>
  804ca0:	2880004c 	andi	r2,r5,1
  804ca4:	32c00115 	stw	r11,4(r6)
  804ca8:	000b883a 	mov	r5,zero
  804cac:	1000091e 	bne	r2,zero,804cd4 <_free_r+0x84>
  804cb0:	50c00017 	ldw	r3,0(r10)
  804cb4:	60800204 	addi	r2,r12,8
  804cb8:	50d5c83a 	sub	r10,r10,r3
  804cbc:	51000217 	ldw	r4,8(r10)
  804cc0:	48d3883a 	add	r9,r9,r3
  804cc4:	20807426 	beq	r4,r2,804e98 <_free_r+0x248>
  804cc8:	52000317 	ldw	r8,12(r10)
  804ccc:	41000215 	stw	r4,8(r8)
  804cd0:	22000315 	stw	r8,12(r4)
  804cd4:	32c7883a 	add	r3,r6,r11
  804cd8:	18800117 	ldw	r2,4(r3)
  804cdc:	2808c03a 	cmpne	r4,r5,zero
  804ce0:	1080004c 	andi	r2,r2,1
  804ce4:	1000061e 	bne	r2,zero,804d00 <_free_r+0xb0>
  804ce8:	4ad3883a 	add	r9,r9,r11
  804cec:	20001626 	beq	r4,zero,804d48 <_free_r+0xf8>
  804cf0:	30c00217 	ldw	r3,8(r6)
  804cf4:	32000317 	ldw	r8,12(r6)
  804cf8:	40c00215 	stw	r3,8(r8)
  804cfc:	1a000315 	stw	r8,12(r3)
  804d00:	48800054 	ori	r2,r9,1
  804d04:	5247883a 	add	r3,r10,r9
  804d08:	50800115 	stw	r2,4(r10)
  804d0c:	1a400015 	stw	r9,0(r3)
  804d10:	20001726 	beq	r4,zero,804d70 <_free_r+0x120>
  804d14:	8809883a 	mov	r4,r17
  804d18:	02002074 	movhi	r8,129
  804d1c:	4226aa04 	addi	r8,r8,-25944
  804d20:	dfc00217 	ldw	ra,8(sp)
  804d24:	dc000117 	ldw	r16,4(sp)
  804d28:	dc400017 	ldw	r17,0(sp)
  804d2c:	dec00304 	addi	sp,sp,12
  804d30:	4000683a 	jmp	r8
  804d34:	dfc00217 	ldw	ra,8(sp)
  804d38:	dc000117 	ldw	r16,4(sp)
  804d3c:	dc400017 	ldw	r17,0(sp)
  804d40:	dec00304 	addi	sp,sp,12
  804d44:	f800283a 	ret
  804d48:	30c00217 	ldw	r3,8(r6)
  804d4c:	00802074 	movhi	r2,129
  804d50:	10819404 	addi	r2,r2,1616
  804d54:	18bfe71e 	bne	r3,r2,804cf4 <_free_r+0xa4>
  804d58:	1a800315 	stw	r10,12(r3)
  804d5c:	1a800215 	stw	r10,8(r3)
  804d60:	01000044 	movi	r4,1
  804d64:	50c00215 	stw	r3,8(r10)
  804d68:	50c00315 	stw	r3,12(r10)
  804d6c:	003fe406 	br	804d00 <_free_r+0xb0>
  804d70:	00807fc4 	movi	r2,511
  804d74:	12402b36 	bltu	r2,r9,804e24 <_free_r+0x1d4>
  804d78:	4806d0fa 	srli	r3,r9,3
  804d7c:	01802074 	movhi	r6,129
  804d80:	31819204 	addi	r6,r6,1608
  804d84:	00800044 	movi	r2,1
  804d88:	180890fa 	slli	r4,r3,3
  804d8c:	1807d0ba 	srai	r3,r3,2
  804d90:	31400117 	ldw	r5,4(r6)
  804d94:	2191883a 	add	r8,r4,r6
  804d98:	41c00217 	ldw	r7,8(r8)
  804d9c:	10c4983a 	sll	r2,r2,r3
  804da0:	52000315 	stw	r8,12(r10)
  804da4:	51c00215 	stw	r7,8(r10)
  804da8:	288ab03a 	or	r5,r5,r2
  804dac:	3a800315 	stw	r10,12(r7)
  804db0:	31400115 	stw	r5,4(r6)
  804db4:	42800215 	stw	r10,8(r8)
  804db8:	8809883a 	mov	r4,r17
  804dbc:	02002074 	movhi	r8,129
  804dc0:	4226aa04 	addi	r8,r8,-25944
  804dc4:	dfc00217 	ldw	ra,8(sp)
  804dc8:	dc000117 	ldw	r16,4(sp)
  804dcc:	dc400017 	ldw	r17,0(sp)
  804dd0:	dec00304 	addi	sp,sp,12
  804dd4:	4000683a 	jmp	r8
  804dd8:	2880004c 	andi	r2,r5,1
  804ddc:	4ad3883a 	add	r9,r9,r11
  804de0:	1000071e 	bne	r2,zero,804e00 <_free_r+0x1b0>
  804de4:	50c00017 	ldw	r3,0(r10)
  804de8:	50d5c83a 	sub	r10,r10,r3
  804dec:	52000317 	ldw	r8,12(r10)
  804df0:	51c00217 	ldw	r7,8(r10)
  804df4:	48d3883a 	add	r9,r9,r3
  804df8:	41c00215 	stw	r7,8(r8)
  804dfc:	3a000315 	stw	r8,12(r7)
  804e00:	d0a00917 	ldw	r2,-32732(gp)
  804e04:	48c00054 	ori	r3,r9,1
  804e08:	62800215 	stw	r10,8(r12)
  804e0c:	50c00115 	stw	r3,4(r10)
  804e10:	48bfc036 	bltu	r9,r2,804d14 <_free_r+0xc4>
  804e14:	d1600817 	ldw	r5,-32736(gp)
  804e18:	8809883a 	mov	r4,r17
  804e1c:	0804b2c0 	call	804b2c <_malloc_trim_r>
  804e20:	003fbc06 	br	804d14 <_free_r+0xc4>
  804e24:	4808d27a 	srli	r4,r9,9
  804e28:	4806d0fa 	srli	r3,r9,3
  804e2c:	2000151e 	bne	r4,zero,804e84 <_free_r+0x234>
  804e30:	180490fa 	slli	r2,r3,3
  804e34:	01402074 	movhi	r5,129
  804e38:	29419204 	addi	r5,r5,1608
  804e3c:	1311883a 	add	r8,r2,r12
  804e40:	41c00217 	ldw	r7,8(r8)
  804e44:	3a001e26 	beq	r7,r8,804ec0 <_free_r+0x270>
  804e48:	38800117 	ldw	r2,4(r7)
  804e4c:	00ffff04 	movi	r3,-4
  804e50:	10c4703a 	and	r2,r2,r3
  804e54:	4880052e 	bgeu	r9,r2,804e6c <_free_r+0x21c>
  804e58:	39c00217 	ldw	r7,8(r7)
  804e5c:	3a000326 	beq	r7,r8,804e6c <_free_r+0x21c>
  804e60:	38800117 	ldw	r2,4(r7)
  804e64:	10c4703a 	and	r2,r2,r3
  804e68:	48bffb36 	bltu	r9,r2,804e58 <_free_r+0x208>
  804e6c:	3a000317 	ldw	r8,12(r7)
  804e70:	52000315 	stw	r8,12(r10)
  804e74:	51c00215 	stw	r7,8(r10)
  804e78:	3a800315 	stw	r10,12(r7)
  804e7c:	42800215 	stw	r10,8(r8)
  804e80:	003fcd06 	br	804db8 <_free_r+0x168>
  804e84:	00800104 	movi	r2,4
  804e88:	11000536 	bltu	r2,r4,804ea0 <_free_r+0x250>
  804e8c:	4804d1ba 	srli	r2,r9,6
  804e90:	10c00e04 	addi	r3,r2,56
  804e94:	003fe606 	br	804e30 <_free_r+0x1e0>
  804e98:	01400044 	movi	r5,1
  804e9c:	003f8d06 	br	804cd4 <_free_r+0x84>
  804ea0:	00800504 	movi	r2,20
  804ea4:	20c016c4 	addi	r3,r4,91
  804ea8:	113fe12e 	bgeu	r2,r4,804e30 <_free_r+0x1e0>
  804eac:	00801504 	movi	r2,84
  804eb0:	11000a36 	bltu	r2,r4,804edc <_free_r+0x28c>
  804eb4:	4804d33a 	srli	r2,r9,12
  804eb8:	10c01b84 	addi	r3,r2,110
  804ebc:	003fdc06 	br	804e30 <_free_r+0x1e0>
  804ec0:	1805d0ba 	srai	r2,r3,2
  804ec4:	00c00044 	movi	r3,1
  804ec8:	29000117 	ldw	r4,4(r5)
  804ecc:	1886983a 	sll	r3,r3,r2
  804ed0:	20c8b03a 	or	r4,r4,r3
  804ed4:	29000115 	stw	r4,4(r5)
  804ed8:	003fe506 	br	804e70 <_free_r+0x220>
  804edc:	00805504 	movi	r2,340
  804ee0:	11000336 	bltu	r2,r4,804ef0 <_free_r+0x2a0>
  804ee4:	4804d3fa 	srli	r2,r9,15
  804ee8:	10c01dc4 	addi	r3,r2,119
  804eec:	003fd006 	br	804e30 <_free_r+0x1e0>
  804ef0:	00815504 	movi	r2,1364
  804ef4:	00c01f84 	movi	r3,126
  804ef8:	113fcd36 	bltu	r2,r4,804e30 <_free_r+0x1e0>
  804efc:	4804d4ba 	srli	r2,r9,18
  804f00:	10c01f04 	addi	r3,r2,124
  804f04:	003fca06 	br	804e30 <_free_r+0x1e0>

00804f08 <__sfvwrite>:
  804f08:	defff704 	addi	sp,sp,-36
  804f0c:	dd000315 	stw	r20,12(sp)
  804f10:	dd400215 	stw	r21,8(sp)
  804f14:	dfc00815 	stw	ra,32(sp)
  804f18:	dc000715 	stw	r16,28(sp)
  804f1c:	dc400615 	stw	r17,24(sp)
  804f20:	dc800515 	stw	r18,20(sp)
  804f24:	dcc00415 	stw	r19,16(sp)
  804f28:	dd800115 	stw	r22,4(sp)
  804f2c:	ddc00015 	stw	r23,0(sp)
  804f30:	2c000217 	ldw	r16,8(r5)
  804f34:	282b883a 	mov	r21,r5
  804f38:	2029883a 	mov	r20,r4
  804f3c:	0007883a 	mov	r3,zero
  804f40:	80002426 	beq	r16,zero,804fd4 <__sfvwrite+0xcc>
  804f44:	20c0030b 	ldhu	r3,12(r4)
  804f48:	1880020c 	andi	r2,r3,8
  804f4c:	10000226 	beq	r2,zero,804f58 <__sfvwrite+0x50>
  804f50:	20800417 	ldw	r2,16(r4)
  804f54:	1000041e 	bne	r2,zero,804f68 <__sfvwrite+0x60>
  804f58:	08032080 	call	803208 <__swsetup>
  804f5c:	00ffffc4 	movi	r3,-1
  804f60:	10001c1e 	bne	r2,zero,804fd4 <__sfvwrite+0xcc>
  804f64:	a0c0030b 	ldhu	r3,12(r20)
  804f68:	193fffcc 	andi	r4,r3,65535
  804f6c:	2080008c 	andi	r2,r4,2
  804f70:	ac800017 	ldw	r18,0(r21)
  804f74:	0021883a 	mov	r16,zero
  804f78:	10002226 	beq	r2,zero,805004 <__sfvwrite+0xfc>
  804f7c:	8000041e 	bne	r16,zero,804f90 <__sfvwrite+0x88>
  804f80:	94000117 	ldw	r16,4(r18)
  804f84:	94c00017 	ldw	r19,0(r18)
  804f88:	94800204 	addi	r18,r18,8
  804f8c:	803ffc26 	beq	r16,zero,804f80 <__sfvwrite+0x78>
  804f90:	00810004 	movi	r2,1024
  804f94:	a1000717 	ldw	r4,28(r20)
  804f98:	800d883a 	mov	r6,r16
  804f9c:	1400012e 	bgeu	r2,r16,804fa4 <__sfvwrite+0x9c>
  804fa0:	100d883a 	mov	r6,r2
  804fa4:	a0c00917 	ldw	r3,36(r20)
  804fa8:	980b883a 	mov	r5,r19
  804fac:	183ee83a 	callr	r3
  804fb0:	1023883a 	mov	r17,r2
  804fb4:	00806b0e 	bge	zero,r2,805164 <__sfvwrite+0x25c>
  804fb8:	a8800217 	ldw	r2,8(r21)
  804fbc:	9c67883a 	add	r19,r19,r17
  804fc0:	8461c83a 	sub	r16,r16,r17
  804fc4:	1445c83a 	sub	r2,r2,r17
  804fc8:	a8800215 	stw	r2,8(r21)
  804fcc:	103feb1e 	bne	r2,zero,804f7c <__sfvwrite+0x74>
  804fd0:	0007883a 	mov	r3,zero
  804fd4:	1805883a 	mov	r2,r3
  804fd8:	dfc00817 	ldw	ra,32(sp)
  804fdc:	dc000717 	ldw	r16,28(sp)
  804fe0:	dc400617 	ldw	r17,24(sp)
  804fe4:	dc800517 	ldw	r18,20(sp)
  804fe8:	dcc00417 	ldw	r19,16(sp)
  804fec:	dd000317 	ldw	r20,12(sp)
  804ff0:	dd400217 	ldw	r21,8(sp)
  804ff4:	dd800117 	ldw	r22,4(sp)
  804ff8:	ddc00017 	ldw	r23,0(sp)
  804ffc:	dec00904 	addi	sp,sp,36
  805000:	f800283a 	ret
  805004:	2080004c 	andi	r2,r4,1
  805008:	002f883a 	mov	r23,zero
  80500c:	1000461e 	bne	r2,zero,805128 <__sfvwrite+0x220>
  805010:	8000041e 	bne	r16,zero,805024 <__sfvwrite+0x11c>
  805014:	94000117 	ldw	r16,4(r18)
  805018:	94c00017 	ldw	r19,0(r18)
  80501c:	94800204 	addi	r18,r18,8
  805020:	803ffc26 	beq	r16,zero,805014 <__sfvwrite+0x10c>
  805024:	18ffffcc 	andi	r3,r3,65535
  805028:	1880800c 	andi	r2,r3,512
  80502c:	a4400217 	ldw	r17,8(r20)
  805030:	10006226 	beq	r2,zero,8051bc <__sfvwrite+0x2b4>
  805034:	8c00022e 	bgeu	r17,r16,805040 <__sfvwrite+0x138>
  805038:	1880200c 	andi	r2,r3,128
  80503c:	10004e1e 	bne	r2,zero,805178 <__sfvwrite+0x270>
  805040:	8440012e 	bgeu	r16,r17,805048 <__sfvwrite+0x140>
  805044:	8023883a 	mov	r17,r16
  805048:	a1000017 	ldw	r4,0(r20)
  80504c:	880d883a 	mov	r6,r17
  805050:	980b883a 	mov	r5,r19
  805054:	08056f80 	call	8056f8 <memmove>
  805058:	a0c00217 	ldw	r3,8(r20)
  80505c:	a0800017 	ldw	r2,0(r20)
  805060:	1c47c83a 	sub	r3,r3,r17
  805064:	1445883a 	add	r2,r2,r17
  805068:	8023883a 	mov	r17,r16
  80506c:	a0c00215 	stw	r3,8(r20)
  805070:	a0800015 	stw	r2,0(r20)
  805074:	a8800217 	ldw	r2,8(r21)
  805078:	9c67883a 	add	r19,r19,r17
  80507c:	8461c83a 	sub	r16,r16,r17
  805080:	1445c83a 	sub	r2,r2,r17
  805084:	a8800215 	stw	r2,8(r21)
  805088:	103fd126 	beq	r2,zero,804fd0 <__sfvwrite+0xc8>
  80508c:	a0c0030b 	ldhu	r3,12(r20)
  805090:	003fdf06 	br	805010 <__sfvwrite+0x108>
  805094:	b804c03a 	cmpne	r2,r23,zero
  805098:	1000091e 	bne	r2,zero,8050c0 <__sfvwrite+0x1b8>
  80509c:	9809883a 	mov	r4,r19
  8050a0:	01400284 	movi	r5,10
  8050a4:	800d883a 	mov	r6,r16
  8050a8:	08055700 	call	805570 <memchr>
  8050ac:	85800044 	addi	r22,r16,1
  8050b0:	10000226 	beq	r2,zero,8050bc <__sfvwrite+0x1b4>
  8050b4:	14c5c83a 	sub	r2,r2,r19
  8050b8:	15800044 	addi	r22,r2,1
  8050bc:	05c00044 	movi	r23,1
  8050c0:	b00b883a 	mov	r5,r22
  8050c4:	8580012e 	bgeu	r16,r22,8050cc <__sfvwrite+0x1c4>
  8050c8:	800b883a 	mov	r5,r16
  8050cc:	a0c00217 	ldw	r3,8(r20)
  8050d0:	a1c00517 	ldw	r7,20(r20)
  8050d4:	a1000017 	ldw	r4,0(r20)
  8050d8:	a0800417 	ldw	r2,16(r20)
  8050dc:	19e3883a 	add	r17,r3,r7
  8050e0:	1100012e 	bgeu	r2,r4,8050e8 <__sfvwrite+0x1e0>
  8050e4:	89401616 	blt	r17,r5,805140 <__sfvwrite+0x238>
  8050e8:	29c04c16 	blt	r5,r7,80521c <__sfvwrite+0x314>
  8050ec:	a0c00917 	ldw	r3,36(r20)
  8050f0:	a1000717 	ldw	r4,28(r20)
  8050f4:	380d883a 	mov	r6,r7
  8050f8:	980b883a 	mov	r5,r19
  8050fc:	183ee83a 	callr	r3
  805100:	1023883a 	mov	r17,r2
  805104:	0080170e 	bge	zero,r2,805164 <__sfvwrite+0x25c>
  805108:	b46dc83a 	sub	r22,r22,r17
  80510c:	b0005026 	beq	r22,zero,805250 <__sfvwrite+0x348>
  805110:	a8800217 	ldw	r2,8(r21)
  805114:	9c67883a 	add	r19,r19,r17
  805118:	8461c83a 	sub	r16,r16,r17
  80511c:	1445c83a 	sub	r2,r2,r17
  805120:	a8800215 	stw	r2,8(r21)
  805124:	103faa26 	beq	r2,zero,804fd0 <__sfvwrite+0xc8>
  805128:	803fda1e 	bne	r16,zero,805094 <__sfvwrite+0x18c>
  80512c:	94000117 	ldw	r16,4(r18)
  805130:	94c00017 	ldw	r19,0(r18)
  805134:	94800204 	addi	r18,r18,8
  805138:	803ffc26 	beq	r16,zero,80512c <__sfvwrite+0x224>
  80513c:	003fd706 	br	80509c <__sfvwrite+0x194>
  805140:	980b883a 	mov	r5,r19
  805144:	880d883a 	mov	r6,r17
  805148:	08056f80 	call	8056f8 <memmove>
  80514c:	a0c00017 	ldw	r3,0(r20)
  805150:	a009883a 	mov	r4,r20
  805154:	1c47883a 	add	r3,r3,r17
  805158:	a0c00015 	stw	r3,0(r20)
  80515c:	080492c0 	call	80492c <fflush>
  805160:	103fe926 	beq	r2,zero,805108 <__sfvwrite+0x200>
  805164:	a080030b 	ldhu	r2,12(r20)
  805168:	00ffffc4 	movi	r3,-1
  80516c:	10801014 	ori	r2,r2,64
  805170:	a080030d 	sth	r2,12(r20)
  805174:	003f9706 	br	804fd4 <__sfvwrite+0xcc>
  805178:	a0800417 	ldw	r2,16(r20)
  80517c:	a0c00017 	ldw	r3,0(r20)
  805180:	d1200a17 	ldw	r4,-32728(gp)
  805184:	100b883a 	mov	r5,r2
  805188:	18a3c83a 	sub	r17,r3,r2
  80518c:	8c2d883a 	add	r22,r17,r16
  805190:	b00d883a 	mov	r6,r22
  805194:	08068080 	call	806808 <_realloc_r>
  805198:	1009883a 	mov	r4,r2
  80519c:	103ff126 	beq	r2,zero,805164 <__sfvwrite+0x25c>
  8051a0:	1445883a 	add	r2,r2,r17
  8051a4:	8023883a 	mov	r17,r16
  8051a8:	a0800015 	stw	r2,0(r20)
  8051ac:	a5800515 	stw	r22,20(r20)
  8051b0:	a1000415 	stw	r4,16(r20)
  8051b4:	a4000215 	stw	r16,8(r20)
  8051b8:	003fa106 	br	805040 <__sfvwrite+0x138>
  8051bc:	a1000017 	ldw	r4,0(r20)
  8051c0:	a0800417 	ldw	r2,16(r20)
  8051c4:	1100012e 	bgeu	r2,r4,8051cc <__sfvwrite+0x2c4>
  8051c8:	8c002636 	bltu	r17,r16,805264 <__sfvwrite+0x35c>
  8051cc:	a4400517 	ldw	r17,20(r20)
  8051d0:	84400836 	bltu	r16,r17,8051f4 <__sfvwrite+0x2ec>
  8051d4:	a0c00917 	ldw	r3,36(r20)
  8051d8:	a1000717 	ldw	r4,28(r20)
  8051dc:	880d883a 	mov	r6,r17
  8051e0:	980b883a 	mov	r5,r19
  8051e4:	183ee83a 	callr	r3
  8051e8:	1023883a 	mov	r17,r2
  8051ec:	00bfa116 	blt	zero,r2,805074 <__sfvwrite+0x16c>
  8051f0:	003fdc06 	br	805164 <__sfvwrite+0x25c>
  8051f4:	a1000017 	ldw	r4,0(r20)
  8051f8:	980b883a 	mov	r5,r19
  8051fc:	800d883a 	mov	r6,r16
  805200:	08056f80 	call	8056f8 <memmove>
  805204:	a0c00217 	ldw	r3,8(r20)
  805208:	a0800017 	ldw	r2,0(r20)
  80520c:	8023883a 	mov	r17,r16
  805210:	1c07c83a 	sub	r3,r3,r16
  805214:	1405883a 	add	r2,r2,r16
  805218:	003f9406 	br	80506c <__sfvwrite+0x164>
  80521c:	a1000017 	ldw	r4,0(r20)
  805220:	2823883a 	mov	r17,r5
  805224:	880d883a 	mov	r6,r17
  805228:	980b883a 	mov	r5,r19
  80522c:	08056f80 	call	8056f8 <memmove>
  805230:	a0c00217 	ldw	r3,8(r20)
  805234:	a0800017 	ldw	r2,0(r20)
  805238:	b46dc83a 	sub	r22,r22,r17
  80523c:	1c47c83a 	sub	r3,r3,r17
  805240:	1445883a 	add	r2,r2,r17
  805244:	a0c00215 	stw	r3,8(r20)
  805248:	a0800015 	stw	r2,0(r20)
  80524c:	b03fb01e 	bne	r22,zero,805110 <__sfvwrite+0x208>
  805250:	a009883a 	mov	r4,r20
  805254:	080492c0 	call	80492c <fflush>
  805258:	103fc21e 	bne	r2,zero,805164 <__sfvwrite+0x25c>
  80525c:	002f883a 	mov	r23,zero
  805260:	003fab06 	br	805110 <__sfvwrite+0x208>
  805264:	980b883a 	mov	r5,r19
  805268:	880d883a 	mov	r6,r17
  80526c:	08056f80 	call	8056f8 <memmove>
  805270:	a0c00017 	ldw	r3,0(r20)
  805274:	a009883a 	mov	r4,r20
  805278:	1c47883a 	add	r3,r3,r17
  80527c:	a0c00015 	stw	r3,0(r20)
  805280:	080492c0 	call	80492c <fflush>
  805284:	103f7b26 	beq	r2,zero,805074 <__sfvwrite+0x16c>
  805288:	003fb606 	br	805164 <__sfvwrite+0x25c>

0080528c <_fwalk>:
  80528c:	d0a00a17 	ldw	r2,-32728(gp)
  805290:	defffa04 	addi	sp,sp,-24
  805294:	dcc00115 	stw	r19,4(sp)
  805298:	dd000015 	stw	r20,0(sp)
  80529c:	dfc00515 	stw	ra,20(sp)
  8052a0:	dc000415 	stw	r16,16(sp)
  8052a4:	dc400315 	stw	r17,12(sp)
  8052a8:	dc800215 	stw	r18,8(sp)
  8052ac:	2829883a 	mov	r20,r5
  8052b0:	0027883a 	mov	r19,zero
  8052b4:	20801126 	beq	r4,r2,8052fc <_fwalk+0x70>
  8052b8:	24809704 	addi	r18,r4,604
  8052bc:	90000f26 	beq	r18,zero,8052fc <_fwalk+0x70>
  8052c0:	94400117 	ldw	r17,4(r18)
  8052c4:	94000217 	ldw	r16,8(r18)
  8052c8:	8c7fffc4 	addi	r17,r17,-1
  8052cc:	88000816 	blt	r17,zero,8052f0 <_fwalk+0x64>
  8052d0:	8080030f 	ldh	r2,12(r16)
  8052d4:	8009883a 	mov	r4,r16
  8052d8:	8c7fffc4 	addi	r17,r17,-1
  8052dc:	84001704 	addi	r16,r16,92
  8052e0:	103ffa26 	beq	r2,zero,8052cc <_fwalk+0x40>
  8052e4:	a03ee83a 	callr	r20
  8052e8:	98a6b03a 	or	r19,r19,r2
  8052ec:	883ff80e 	bge	r17,zero,8052d0 <_fwalk+0x44>
  8052f0:	94800017 	ldw	r18,0(r18)
  8052f4:	903ff21e 	bne	r18,zero,8052c0 <_fwalk+0x34>
  8052f8:	d0a00a17 	ldw	r2,-32728(gp)
  8052fc:	14809704 	addi	r18,r2,604
  805300:	90000e26 	beq	r18,zero,80533c <_fwalk+0xb0>
  805304:	94400117 	ldw	r17,4(r18)
  805308:	94000217 	ldw	r16,8(r18)
  80530c:	8c7fffc4 	addi	r17,r17,-1
  805310:	88000816 	blt	r17,zero,805334 <_fwalk+0xa8>
  805314:	8080030f 	ldh	r2,12(r16)
  805318:	8009883a 	mov	r4,r16
  80531c:	8c7fffc4 	addi	r17,r17,-1
  805320:	84001704 	addi	r16,r16,92
  805324:	103ffa26 	beq	r2,zero,805310 <_fwalk+0x84>
  805328:	a03ee83a 	callr	r20
  80532c:	98a6b03a 	or	r19,r19,r2
  805330:	883ff80e 	bge	r17,zero,805314 <_fwalk+0x88>
  805334:	94800017 	ldw	r18,0(r18)
  805338:	903ff21e 	bne	r18,zero,805304 <_fwalk+0x78>
  80533c:	9805883a 	mov	r2,r19
  805340:	dfc00517 	ldw	ra,20(sp)
  805344:	dc000417 	ldw	r16,16(sp)
  805348:	dc400317 	ldw	r17,12(sp)
  80534c:	dc800217 	ldw	r18,8(sp)
  805350:	dcc00117 	ldw	r19,4(sp)
  805354:	dd000017 	ldw	r20,0(sp)
  805358:	dec00604 	addi	sp,sp,24
  80535c:	f800283a 	ret

00805360 <_setlocale_r>:
  805360:	defffc04 	addi	sp,sp,-16
  805364:	dc000215 	stw	r16,8(sp)
  805368:	dc400115 	stw	r17,4(sp)
  80536c:	dc800015 	stw	r18,0(sp)
  805370:	2023883a 	mov	r17,r4
  805374:	2825883a 	mov	r18,r5
  805378:	dfc00315 	stw	ra,12(sp)
  80537c:	3021883a 	mov	r16,r6
  805380:	3009883a 	mov	r4,r6
  805384:	01402074 	movhi	r5,129
  805388:	2940cc04 	addi	r5,r5,816
  80538c:	30000726 	beq	r6,zero,8053ac <_setlocale_r+0x4c>
  805390:	0806f4c0 	call	806f4c <strcmp>
  805394:	8009883a 	mov	r4,r16
  805398:	01402074 	movhi	r5,129
  80539c:	2940b404 	addi	r5,r5,720
  8053a0:	10000b1e 	bne	r2,zero,8053d0 <_setlocale_r+0x70>
  8053a4:	8c000d15 	stw	r16,52(r17)
  8053a8:	8c800c15 	stw	r18,48(r17)
  8053ac:	00c02074 	movhi	r3,129
  8053b0:	18c0cc04 	addi	r3,r3,816
  8053b4:	1805883a 	mov	r2,r3
  8053b8:	dfc00317 	ldw	ra,12(sp)
  8053bc:	dc000217 	ldw	r16,8(sp)
  8053c0:	dc400117 	ldw	r17,4(sp)
  8053c4:	dc800017 	ldw	r18,0(sp)
  8053c8:	dec00404 	addi	sp,sp,16
  8053cc:	f800283a 	ret
  8053d0:	0806f4c0 	call	806f4c <strcmp>
  8053d4:	0007883a 	mov	r3,zero
  8053d8:	103ff61e 	bne	r2,zero,8053b4 <_setlocale_r+0x54>
  8053dc:	8c000d15 	stw	r16,52(r17)
  8053e0:	8c800c15 	stw	r18,48(r17)
  8053e4:	003ff106 	br	8053ac <_setlocale_r+0x4c>

008053e8 <__locale_charset>:
  8053e8:	d0a00f17 	ldw	r2,-32708(gp)
  8053ec:	f800283a 	ret

008053f0 <_localeconv_r>:
  8053f0:	00802074 	movhi	r2,129
  8053f4:	1080d004 	addi	r2,r2,832
  8053f8:	f800283a 	ret

008053fc <setlocale>:
  8053fc:	2007883a 	mov	r3,r4
  805400:	d1200a17 	ldw	r4,-32728(gp)
  805404:	280d883a 	mov	r6,r5
  805408:	02002034 	movhi	r8,128
  80540c:	4214d804 	addi	r8,r8,21344
  805410:	180b883a 	mov	r5,r3
  805414:	4000683a 	jmp	r8

00805418 <localeconv>:
  805418:	d1200a17 	ldw	r4,-32728(gp)
  80541c:	02002034 	movhi	r8,128
  805420:	4214fc04 	addi	r8,r8,21488
  805424:	4000683a 	jmp	r8

00805428 <__smakebuf>:
  805428:	deffee04 	addi	sp,sp,-72
  80542c:	dc001015 	stw	r16,64(sp)
  805430:	dfc01115 	stw	ra,68(sp)
  805434:	dc400f15 	stw	r17,60(sp)
  805438:	20c0030b 	ldhu	r3,12(r4)
  80543c:	2021883a 	mov	r16,r4
  805440:	1880008c 	andi	r2,r3,2
  805444:	10000a26 	beq	r2,zero,805470 <__smakebuf+0x48>
  805448:	20c010c4 	addi	r3,r4,67
  80544c:	00800044 	movi	r2,1
  805450:	20800515 	stw	r2,20(r4)
  805454:	20c00415 	stw	r3,16(r4)
  805458:	20c00015 	stw	r3,0(r4)
  80545c:	dfc01117 	ldw	ra,68(sp)
  805460:	dc001017 	ldw	r16,64(sp)
  805464:	dc400f17 	ldw	r17,60(sp)
  805468:	dec01204 	addi	sp,sp,72
  80546c:	f800283a 	ret
  805470:	2140038f 	ldh	r5,14(r4)
  805474:	28001f16 	blt	r5,zero,8054f4 <__smakebuf+0xcc>
  805478:	d1200a17 	ldw	r4,-32728(gp)
  80547c:	d80d883a 	mov	r6,sp
  805480:	08071e40 	call	8071e4 <_fstat_r>
  805484:	10001a16 	blt	r2,zero,8054f0 <__smakebuf+0xc8>
  805488:	d8800117 	ldw	r2,4(sp)
  80548c:	00e00014 	movui	r3,32768
  805490:	04410004 	movi	r17,1024
  805494:	10bc000c 	andi	r2,r2,61440
  805498:	11080020 	cmpeqi	r4,r2,8192
  80549c:	10c02c26 	beq	r2,r3,805550 <__smakebuf+0x128>
  8054a0:	8080030b 	ldhu	r2,12(r16)
  8054a4:	10820014 	ori	r2,r2,2048
  8054a8:	8080030d 	sth	r2,12(r16)
  8054ac:	20001426 	beq	r4,zero,805500 <__smakebuf+0xd8>
  8054b0:	8100038f 	ldh	r4,14(r16)
  8054b4:	08096f80 	call	8096f8 <isatty>
  8054b8:	10001126 	beq	r2,zero,805500 <__smakebuf+0xd8>
  8054bc:	8080030b 	ldhu	r2,12(r16)
  8054c0:	810010c4 	addi	r4,r16,67
  8054c4:	00c00044 	movi	r3,1
  8054c8:	10800094 	ori	r2,r2,2
  8054cc:	80c00515 	stw	r3,20(r16)
  8054d0:	8080030d 	sth	r2,12(r16)
  8054d4:	81000415 	stw	r4,16(r16)
  8054d8:	81000015 	stw	r4,0(r16)
  8054dc:	dfc01117 	ldw	ra,68(sp)
  8054e0:	dc001017 	ldw	r16,64(sp)
  8054e4:	dc400f17 	ldw	r17,60(sp)
  8054e8:	dec01204 	addi	sp,sp,72
  8054ec:	f800283a 	ret
  8054f0:	80c0030b 	ldhu	r3,12(r16)
  8054f4:	18820014 	ori	r2,r3,2048
  8054f8:	04410004 	movi	r17,1024
  8054fc:	8080030d 	sth	r2,12(r16)
  805500:	d1200a17 	ldw	r4,-32728(gp)
  805504:	01410004 	movi	r5,1024
  805508:	080073c0 	call	80073c <_malloc_r>
  80550c:	100b883a 	mov	r5,r2
  805510:	103fea26 	beq	r2,zero,8054bc <__smakebuf+0x94>
  805514:	8080030b 	ldhu	r2,12(r16)
  805518:	d0e00a17 	ldw	r3,-32728(gp)
  80551c:	01002034 	movhi	r4,128
  805520:	21129b04 	addi	r4,r4,19052
  805524:	10802014 	ori	r2,r2,128
  805528:	19000f15 	stw	r4,60(r3)
  80552c:	84400515 	stw	r17,20(r16)
  805530:	8080030d 	sth	r2,12(r16)
  805534:	81400415 	stw	r5,16(r16)
  805538:	81400015 	stw	r5,0(r16)
  80553c:	dfc01117 	ldw	ra,68(sp)
  805540:	dc001017 	ldw	r16,64(sp)
  805544:	dc400f17 	ldw	r17,60(sp)
  805548:	dec01204 	addi	sp,sp,72
  80554c:	f800283a 	ret
  805550:	80c00a17 	ldw	r3,40(r16)
  805554:	00802034 	movhi	r2,128
  805558:	109bb004 	addi	r2,r2,28352
  80555c:	18bfd01e 	bne	r3,r2,8054a0 <__smakebuf+0x78>
  805560:	8080030b 	ldhu	r2,12(r16)
  805564:	84401315 	stw	r17,76(r16)
  805568:	1444b03a 	or	r2,r2,r17
  80556c:	003fce06 	br	8054a8 <__smakebuf+0x80>

00805570 <memchr>:
  805570:	020000c4 	movi	r8,3
  805574:	29403fcc 	andi	r5,r5,255
  805578:	4180022e 	bgeu	r8,r6,805584 <memchr+0x14>
  80557c:	2204703a 	and	r2,r4,r8
  805580:	10000b26 	beq	r2,zero,8055b0 <memchr+0x40>
  805584:	31bfffc4 	addi	r6,r6,-1
  805588:	00bfffc4 	movi	r2,-1
  80558c:	30800626 	beq	r6,r2,8055a8 <memchr+0x38>
  805590:	1007883a 	mov	r3,r2
  805594:	20800003 	ldbu	r2,0(r4)
  805598:	31bfffc4 	addi	r6,r6,-1
  80559c:	11402526 	beq	r2,r5,805634 <memchr+0xc4>
  8055a0:	21000044 	addi	r4,r4,1
  8055a4:	30fffb1e 	bne	r6,r3,805594 <memchr+0x24>
  8055a8:	0005883a 	mov	r2,zero
  8055ac:	f800283a 	ret
  8055b0:	200f883a 	mov	r7,r4
  8055b4:	0013883a 	mov	r9,zero
  8055b8:	0007883a 	mov	r3,zero
  8055bc:	4804923a 	slli	r2,r9,8
  8055c0:	18c00044 	addi	r3,r3,1
  8055c4:	1153883a 	add	r9,r2,r5
  8055c8:	40fffc2e 	bgeu	r8,r3,8055bc <memchr+0x4c>
  8055cc:	028000c4 	movi	r10,3
  8055d0:	5180162e 	bgeu	r10,r6,80562c <memchr+0xbc>
  8055d4:	033fbff4 	movhi	r12,65279
  8055d8:	633fbfc4 	addi	r12,r12,-257
  8055dc:	02e02074 	movhi	r11,32897
  8055e0:	5ae02004 	addi	r11,r11,-32640
  8055e4:	38800017 	ldw	r2,0(r7)
  8055e8:	1244f03a 	xor	r2,r2,r9
  8055ec:	0086303a 	nor	r3,zero,r2
  8055f0:	1305883a 	add	r2,r2,r12
  8055f4:	10c4703a 	and	r2,r2,r3
  8055f8:	12c4703a 	and	r2,r2,r11
  8055fc:	10000826 	beq	r2,zero,805620 <memchr+0xb0>
  805600:	3809883a 	mov	r4,r7
  805604:	0007883a 	mov	r3,zero
  805608:	020000c4 	movi	r8,3
  80560c:	20800003 	ldbu	r2,0(r4)
  805610:	18c00044 	addi	r3,r3,1
  805614:	11400726 	beq	r2,r5,805634 <memchr+0xc4>
  805618:	21000044 	addi	r4,r4,1
  80561c:	40fffb2e 	bgeu	r8,r3,80560c <memchr+0x9c>
  805620:	31bfff04 	addi	r6,r6,-4
  805624:	39c00104 	addi	r7,r7,4
  805628:	51bfee36 	bltu	r10,r6,8055e4 <memchr+0x74>
  80562c:	3809883a 	mov	r4,r7
  805630:	003fd406 	br	805584 <memchr+0x14>
  805634:	2005883a 	mov	r2,r4
  805638:	f800283a 	ret

0080563c <memcpy>:
  80563c:	020003c4 	movi	r8,15
  805640:	2007883a 	mov	r3,r4
  805644:	4180032e 	bgeu	r8,r6,805654 <memcpy+0x18>
  805648:	2904b03a 	or	r2,r5,r4
  80564c:	108000cc 	andi	r2,r2,3
  805650:	10000c26 	beq	r2,zero,805684 <memcpy+0x48>
  805654:	31bfffc4 	addi	r6,r6,-1
  805658:	00bfffc4 	movi	r2,-1
  80565c:	30800726 	beq	r6,r2,80567c <memcpy+0x40>
  805660:	100f883a 	mov	r7,r2
  805664:	28800003 	ldbu	r2,0(r5)
  805668:	31bfffc4 	addi	r6,r6,-1
  80566c:	29400044 	addi	r5,r5,1
  805670:	18800005 	stb	r2,0(r3)
  805674:	18c00044 	addi	r3,r3,1
  805678:	31fffa1e 	bne	r6,r7,805664 <memcpy+0x28>
  80567c:	2005883a 	mov	r2,r4
  805680:	f800283a 	ret
  805684:	200f883a 	mov	r7,r4
  805688:	28800017 	ldw	r2,0(r5)
  80568c:	29400104 	addi	r5,r5,4
  805690:	31bffc04 	addi	r6,r6,-16
  805694:	38800015 	stw	r2,0(r7)
  805698:	28c00017 	ldw	r3,0(r5)
  80569c:	39c00104 	addi	r7,r7,4
  8056a0:	29400104 	addi	r5,r5,4
  8056a4:	38c00015 	stw	r3,0(r7)
  8056a8:	28800017 	ldw	r2,0(r5)
  8056ac:	39c00104 	addi	r7,r7,4
  8056b0:	29400104 	addi	r5,r5,4
  8056b4:	38800015 	stw	r2,0(r7)
  8056b8:	28c00017 	ldw	r3,0(r5)
  8056bc:	39c00104 	addi	r7,r7,4
  8056c0:	29400104 	addi	r5,r5,4
  8056c4:	38c00015 	stw	r3,0(r7)
  8056c8:	39c00104 	addi	r7,r7,4
  8056cc:	41bfee36 	bltu	r8,r6,805688 <memcpy+0x4c>
  8056d0:	00c000c4 	movi	r3,3
  8056d4:	1980062e 	bgeu	r3,r6,8056f0 <memcpy+0xb4>
  8056d8:	28800017 	ldw	r2,0(r5)
  8056dc:	31bfff04 	addi	r6,r6,-4
  8056e0:	29400104 	addi	r5,r5,4
  8056e4:	38800015 	stw	r2,0(r7)
  8056e8:	39c00104 	addi	r7,r7,4
  8056ec:	19bffa36 	bltu	r3,r6,8056d8 <memcpy+0x9c>
  8056f0:	3807883a 	mov	r3,r7
  8056f4:	003fd706 	br	805654 <memcpy+0x18>

008056f8 <memmove>:
  8056f8:	2811883a 	mov	r8,r5
  8056fc:	2007883a 	mov	r3,r4
  805700:	300f883a 	mov	r7,r6
  805704:	29000f2e 	bgeu	r5,r4,805744 <memmove+0x4c>
  805708:	2985883a 	add	r2,r5,r6
  80570c:	20800d2e 	bgeu	r4,r2,805744 <memmove+0x4c>
  805710:	2187883a 	add	r3,r4,r6
  805714:	31ffffc4 	addi	r7,r6,-1
  805718:	01bfffc4 	movi	r6,-1
  80571c:	100b883a 	mov	r5,r2
  805720:	39800626 	beq	r7,r6,80573c <memmove+0x44>
  805724:	297fffc4 	addi	r5,r5,-1
  805728:	28800003 	ldbu	r2,0(r5)
  80572c:	18ffffc4 	addi	r3,r3,-1
  805730:	39ffffc4 	addi	r7,r7,-1
  805734:	18800005 	stb	r2,0(r3)
  805738:	39bffa1e 	bne	r7,r6,805724 <memmove+0x2c>
  80573c:	2005883a 	mov	r2,r4
  805740:	f800283a 	ret
  805744:	024003c4 	movi	r9,15
  805748:	49800c36 	bltu	r9,r6,80577c <memmove+0x84>
  80574c:	39ffffc4 	addi	r7,r7,-1
  805750:	00bfffc4 	movi	r2,-1
  805754:	38bff926 	beq	r7,r2,80573c <memmove+0x44>
  805758:	100d883a 	mov	r6,r2
  80575c:	28800003 	ldbu	r2,0(r5)
  805760:	39ffffc4 	addi	r7,r7,-1
  805764:	29400044 	addi	r5,r5,1
  805768:	18800005 	stb	r2,0(r3)
  80576c:	18c00044 	addi	r3,r3,1
  805770:	39bffa1e 	bne	r7,r6,80575c <memmove+0x64>
  805774:	2005883a 	mov	r2,r4
  805778:	f800283a 	ret
  80577c:	4104b03a 	or	r2,r8,r4
  805780:	108000cc 	andi	r2,r2,3
  805784:	103ff11e 	bne	r2,zero,80574c <memmove+0x54>
  805788:	400b883a 	mov	r5,r8
  80578c:	200d883a 	mov	r6,r4
  805790:	28800017 	ldw	r2,0(r5)
  805794:	29400104 	addi	r5,r5,4
  805798:	39fffc04 	addi	r7,r7,-16
  80579c:	30800015 	stw	r2,0(r6)
  8057a0:	28c00017 	ldw	r3,0(r5)
  8057a4:	31800104 	addi	r6,r6,4
  8057a8:	29400104 	addi	r5,r5,4
  8057ac:	30c00015 	stw	r3,0(r6)
  8057b0:	28800017 	ldw	r2,0(r5)
  8057b4:	31800104 	addi	r6,r6,4
  8057b8:	29400104 	addi	r5,r5,4
  8057bc:	30800015 	stw	r2,0(r6)
  8057c0:	28c00017 	ldw	r3,0(r5)
  8057c4:	31800104 	addi	r6,r6,4
  8057c8:	29400104 	addi	r5,r5,4
  8057cc:	30c00015 	stw	r3,0(r6)
  8057d0:	31800104 	addi	r6,r6,4
  8057d4:	49ffee36 	bltu	r9,r7,805790 <memmove+0x98>
  8057d8:	00c000c4 	movi	r3,3
  8057dc:	19c0062e 	bgeu	r3,r7,8057f8 <memmove+0x100>
  8057e0:	28800017 	ldw	r2,0(r5)
  8057e4:	39ffff04 	addi	r7,r7,-4
  8057e8:	29400104 	addi	r5,r5,4
  8057ec:	30800015 	stw	r2,0(r6)
  8057f0:	31800104 	addi	r6,r6,4
  8057f4:	19fffa36 	bltu	r3,r7,8057e0 <memmove+0xe8>
  8057f8:	3007883a 	mov	r3,r6
  8057fc:	003fd306 	br	80574c <memmove+0x54>

00805800 <memset>:
  805800:	008000c4 	movi	r2,3
  805804:	29403fcc 	andi	r5,r5,255
  805808:	2007883a 	mov	r3,r4
  80580c:	11801a2e 	bgeu	r2,r6,805878 <memset+0x78>
  805810:	2084703a 	and	r2,r4,r2
  805814:	1000181e 	bne	r2,zero,805878 <memset+0x78>
  805818:	2806923a 	slli	r3,r5,8
  80581c:	200f883a 	mov	r7,r4
  805820:	1946b03a 	or	r3,r3,r5
  805824:	1804943a 	slli	r2,r3,16
  805828:	1886b03a 	or	r3,r3,r2
  80582c:	008003c4 	movi	r2,15
  805830:	11800a2e 	bgeu	r2,r6,80585c <memset+0x5c>
  805834:	38c00015 	stw	r3,0(r7)
  805838:	39c00104 	addi	r7,r7,4
  80583c:	38c00015 	stw	r3,0(r7)
  805840:	39c00104 	addi	r7,r7,4
  805844:	38c00015 	stw	r3,0(r7)
  805848:	39c00104 	addi	r7,r7,4
  80584c:	38c00015 	stw	r3,0(r7)
  805850:	31bffc04 	addi	r6,r6,-16
  805854:	39c00104 	addi	r7,r7,4
  805858:	11bff636 	bltu	r2,r6,805834 <memset+0x34>
  80585c:	008000c4 	movi	r2,3
  805860:	1180042e 	bgeu	r2,r6,805874 <memset+0x74>
  805864:	38c00015 	stw	r3,0(r7)
  805868:	31bfff04 	addi	r6,r6,-4
  80586c:	39c00104 	addi	r7,r7,4
  805870:	11bffc36 	bltu	r2,r6,805864 <memset+0x64>
  805874:	3807883a 	mov	r3,r7
  805878:	31bfffc4 	addi	r6,r6,-1
  80587c:	00bfffc4 	movi	r2,-1
  805880:	30800426 	beq	r6,r2,805894 <memset+0x94>
  805884:	19400005 	stb	r5,0(r3)
  805888:	31bfffc4 	addi	r6,r6,-1
  80588c:	18c00044 	addi	r3,r3,1
  805890:	30bffc1e 	bne	r6,r2,805884 <memset+0x84>
  805894:	2005883a 	mov	r2,r4
  805898:	f800283a 	ret

0080589c <_Balloc>:
  80589c:	defffc04 	addi	sp,sp,-16
  8058a0:	dc000215 	stw	r16,8(sp)
  8058a4:	dc400115 	stw	r17,4(sp)
  8058a8:	dfc00315 	stw	ra,12(sp)
  8058ac:	dc800015 	stw	r18,0(sp)
  8058b0:	20c01317 	ldw	r3,76(r4)
  8058b4:	2823883a 	mov	r17,r5
  8058b8:	2021883a 	mov	r16,r4
  8058bc:	01800404 	movi	r6,16
  8058c0:	01400104 	movi	r5,4
  8058c4:	18001426 	beq	r3,zero,805918 <_Balloc+0x7c>
  8058c8:	01400044 	movi	r5,1
  8058cc:	880490ba 	slli	r2,r17,2
  8058d0:	2c64983a 	sll	r18,r5,r17
  8058d4:	8009883a 	mov	r4,r16
  8058d8:	10cf883a 	add	r7,r2,r3
  8058dc:	900c90ba 	slli	r6,r18,2
  8058e0:	38c00017 	ldw	r3,0(r7)
  8058e4:	31800504 	addi	r6,r6,20
  8058e8:	18001126 	beq	r3,zero,805930 <_Balloc+0x94>
  8058ec:	18800017 	ldw	r2,0(r3)
  8058f0:	38800015 	stw	r2,0(r7)
  8058f4:	18000415 	stw	zero,16(r3)
  8058f8:	18000315 	stw	zero,12(r3)
  8058fc:	1805883a 	mov	r2,r3
  805900:	dfc00317 	ldw	ra,12(sp)
  805904:	dc000217 	ldw	r16,8(sp)
  805908:	dc400117 	ldw	r17,4(sp)
  80590c:	dc800017 	ldw	r18,0(sp)
  805910:	dec00404 	addi	sp,sp,16
  805914:	f800283a 	ret
  805918:	08070c40 	call	8070c4 <_calloc_r>
  80591c:	1007883a 	mov	r3,r2
  805920:	80801315 	stw	r2,76(r16)
  805924:	0005883a 	mov	r2,zero
  805928:	183fe71e 	bne	r3,zero,8058c8 <_Balloc+0x2c>
  80592c:	003ff406 	br	805900 <_Balloc+0x64>
  805930:	08070c40 	call	8070c4 <_calloc_r>
  805934:	1007883a 	mov	r3,r2
  805938:	0005883a 	mov	r2,zero
  80593c:	183ff026 	beq	r3,zero,805900 <_Balloc+0x64>
  805940:	1c400115 	stw	r17,4(r3)
  805944:	1c800215 	stw	r18,8(r3)
  805948:	003fea06 	br	8058f4 <_Balloc+0x58>

0080594c <_Bfree>:
  80594c:	28000726 	beq	r5,zero,80596c <_Bfree+0x20>
  805950:	28800117 	ldw	r2,4(r5)
  805954:	21001317 	ldw	r4,76(r4)
  805958:	100490ba 	slli	r2,r2,2
  80595c:	1105883a 	add	r2,r2,r4
  805960:	10c00017 	ldw	r3,0(r2)
  805964:	28c00015 	stw	r3,0(r5)
  805968:	11400015 	stw	r5,0(r2)
  80596c:	f800283a 	ret

00805970 <_multadd>:
  805970:	defff604 	addi	sp,sp,-40
  805974:	df000815 	stw	fp,32(sp)
  805978:	dc800515 	stw	r18,20(sp)
  80597c:	dcc00415 	stw	r19,16(sp)
  805980:	dd000315 	stw	r20,12(sp)
  805984:	dd400215 	stw	r21,8(sp)
  805988:	ddc00015 	stw	r23,0(sp)
  80598c:	dfc00915 	stw	ra,36(sp)
  805990:	dc000715 	stw	r16,28(sp)
  805994:	dc400615 	stw	r17,24(sp)
  805998:	dd800115 	stw	r22,4(sp)
  80599c:	2d800417 	ldw	r22,16(r5)
  8059a0:	282f883a 	mov	r23,r5
  8059a4:	2039883a 	mov	fp,r4
  8059a8:	302b883a 	mov	r21,r6
  8059ac:	3829883a 	mov	r20,r7
  8059b0:	2c800504 	addi	r18,r5,20
  8059b4:	0027883a 	mov	r19,zero
  8059b8:	94400017 	ldw	r17,0(r18)
  8059bc:	a80b883a 	mov	r5,r21
  8059c0:	9cc00044 	addi	r19,r19,1
  8059c4:	893fffcc 	andi	r4,r17,65535
  8059c8:	08006ec0 	call	8006ec <__mulsi3>
  8059cc:	8808d43a 	srli	r4,r17,16
  8059d0:	1521883a 	add	r16,r2,r20
  8059d4:	a80b883a 	mov	r5,r21
  8059d8:	08006ec0 	call	8006ec <__mulsi3>
  8059dc:	8008d43a 	srli	r4,r16,16
  8059e0:	843fffcc 	andi	r16,r16,65535
  8059e4:	1105883a 	add	r2,r2,r4
  8059e8:	1006943a 	slli	r3,r2,16
  8059ec:	1028d43a 	srli	r20,r2,16
  8059f0:	1c07883a 	add	r3,r3,r16
  8059f4:	90c00015 	stw	r3,0(r18)
  8059f8:	94800104 	addi	r18,r18,4
  8059fc:	9dbfee16 	blt	r19,r22,8059b8 <_multadd+0x48>
  805a00:	a0000726 	beq	r20,zero,805a20 <_multadd+0xb0>
  805a04:	b8800217 	ldw	r2,8(r23)
  805a08:	b080120e 	bge	r22,r2,805a54 <_multadd+0xe4>
  805a0c:	b00490ba 	slli	r2,r22,2
  805a10:	b5800044 	addi	r22,r22,1
  805a14:	bd800415 	stw	r22,16(r23)
  805a18:	15c5883a 	add	r2,r2,r23
  805a1c:	15000515 	stw	r20,20(r2)
  805a20:	b805883a 	mov	r2,r23
  805a24:	dfc00917 	ldw	ra,36(sp)
  805a28:	df000817 	ldw	fp,32(sp)
  805a2c:	dc000717 	ldw	r16,28(sp)
  805a30:	dc400617 	ldw	r17,24(sp)
  805a34:	dc800517 	ldw	r18,20(sp)
  805a38:	dcc00417 	ldw	r19,16(sp)
  805a3c:	dd000317 	ldw	r20,12(sp)
  805a40:	dd400217 	ldw	r21,8(sp)
  805a44:	dd800117 	ldw	r22,4(sp)
  805a48:	ddc00017 	ldw	r23,0(sp)
  805a4c:	dec00a04 	addi	sp,sp,40
  805a50:	f800283a 	ret
  805a54:	b9400117 	ldw	r5,4(r23)
  805a58:	e009883a 	mov	r4,fp
  805a5c:	29400044 	addi	r5,r5,1
  805a60:	080589c0 	call	80589c <_Balloc>
  805a64:	b9800417 	ldw	r6,16(r23)
  805a68:	b9400304 	addi	r5,r23,12
  805a6c:	11000304 	addi	r4,r2,12
  805a70:	300c90ba 	slli	r6,r6,2
  805a74:	1023883a 	mov	r17,r2
  805a78:	31800204 	addi	r6,r6,8
  805a7c:	080563c0 	call	80563c <memcpy>
  805a80:	b80b883a 	mov	r5,r23
  805a84:	e009883a 	mov	r4,fp
  805a88:	080594c0 	call	80594c <_Bfree>
  805a8c:	882f883a 	mov	r23,r17
  805a90:	003fde06 	br	805a0c <_multadd+0x9c>

00805a94 <_s2b>:
  805a94:	defffa04 	addi	sp,sp,-24
  805a98:	dc000415 	stw	r16,16(sp)
  805a9c:	dc800215 	stw	r18,8(sp)
  805aa0:	2821883a 	mov	r16,r5
  805aa4:	2025883a 	mov	r18,r4
  805aa8:	01400244 	movi	r5,9
  805aac:	39000204 	addi	r4,r7,8
  805ab0:	dcc00115 	stw	r19,4(sp)
  805ab4:	dd000015 	stw	r20,0(sp)
  805ab8:	dfc00515 	stw	ra,20(sp)
  805abc:	dc400315 	stw	r17,12(sp)
  805ac0:	3827883a 	mov	r19,r7
  805ac4:	3029883a 	mov	r20,r6
  805ac8:	08006300 	call	800630 <__divsi3>
  805acc:	00c00044 	movi	r3,1
  805ad0:	000b883a 	mov	r5,zero
  805ad4:	1880030e 	bge	r3,r2,805ae4 <_s2b+0x50>
  805ad8:	18c7883a 	add	r3,r3,r3
  805adc:	29400044 	addi	r5,r5,1
  805ae0:	18bffd16 	blt	r3,r2,805ad8 <_s2b+0x44>
  805ae4:	9009883a 	mov	r4,r18
  805ae8:	080589c0 	call	80589c <_Balloc>
  805aec:	1009883a 	mov	r4,r2
  805af0:	d8800617 	ldw	r2,24(sp)
  805af4:	00c00044 	movi	r3,1
  805af8:	04400244 	movi	r17,9
  805afc:	20800515 	stw	r2,20(r4)
  805b00:	20c00415 	stw	r3,16(r4)
  805b04:	8d00170e 	bge	r17,r20,805b64 <_s2b+0xd0>
  805b08:	8461883a 	add	r16,r16,r17
  805b0c:	81c00007 	ldb	r7,0(r16)
  805b10:	200b883a 	mov	r5,r4
  805b14:	01800284 	movi	r6,10
  805b18:	9009883a 	mov	r4,r18
  805b1c:	39fff404 	addi	r7,r7,-48
  805b20:	08059700 	call	805970 <_multadd>
  805b24:	8c400044 	addi	r17,r17,1
  805b28:	1009883a 	mov	r4,r2
  805b2c:	84000044 	addi	r16,r16,1
  805b30:	8d3ff616 	blt	r17,r20,805b0c <_s2b+0x78>
  805b34:	84000044 	addi	r16,r16,1
  805b38:	8cc00c0e 	bge	r17,r19,805b6c <_s2b+0xd8>
  805b3c:	81c00007 	ldb	r7,0(r16)
  805b40:	200b883a 	mov	r5,r4
  805b44:	01800284 	movi	r6,10
  805b48:	9009883a 	mov	r4,r18
  805b4c:	39fff404 	addi	r7,r7,-48
  805b50:	08059700 	call	805970 <_multadd>
  805b54:	1009883a 	mov	r4,r2
  805b58:	8c400044 	addi	r17,r17,1
  805b5c:	84000044 	addi	r16,r16,1
  805b60:	003ff506 	br	805b38 <_s2b+0xa4>
  805b64:	84000284 	addi	r16,r16,10
  805b68:	8cfff416 	blt	r17,r19,805b3c <_s2b+0xa8>
  805b6c:	2005883a 	mov	r2,r4
  805b70:	dfc00517 	ldw	ra,20(sp)
  805b74:	dc000417 	ldw	r16,16(sp)
  805b78:	dc400317 	ldw	r17,12(sp)
  805b7c:	dc800217 	ldw	r18,8(sp)
  805b80:	dcc00117 	ldw	r19,4(sp)
  805b84:	dd000017 	ldw	r20,0(sp)
  805b88:	dec00604 	addi	sp,sp,24
  805b8c:	f800283a 	ret

00805b90 <_hi0bits>:
  805b90:	20bfffec 	andhi	r2,r4,65535
  805b94:	0007883a 	mov	r3,zero
  805b98:	1000021e 	bne	r2,zero,805ba4 <_hi0bits+0x14>
  805b9c:	2008943a 	slli	r4,r4,16
  805ba0:	00c00404 	movi	r3,16
  805ba4:	20bfc02c 	andhi	r2,r4,65280
  805ba8:	1000021e 	bne	r2,zero,805bb4 <_hi0bits+0x24>
  805bac:	2008923a 	slli	r4,r4,8
  805bb0:	18c00204 	addi	r3,r3,8
  805bb4:	20bc002c 	andhi	r2,r4,61440
  805bb8:	1000021e 	bne	r2,zero,805bc4 <_hi0bits+0x34>
  805bbc:	2008913a 	slli	r4,r4,4
  805bc0:	18c00104 	addi	r3,r3,4
  805bc4:	20b0002c 	andhi	r2,r4,49152
  805bc8:	1000021e 	bne	r2,zero,805bd4 <_hi0bits+0x44>
  805bcc:	200890ba 	slli	r4,r4,2
  805bd0:	18c00084 	addi	r3,r3,2
  805bd4:	20000416 	blt	r4,zero,805be8 <_hi0bits+0x58>
  805bd8:	2090002c 	andhi	r2,r4,16384
  805bdc:	18c00044 	addi	r3,r3,1
  805be0:	01000804 	movi	r4,32
  805be4:	10000126 	beq	r2,zero,805bec <_hi0bits+0x5c>
  805be8:	1809883a 	mov	r4,r3
  805bec:	2005883a 	mov	r2,r4
  805bf0:	f800283a 	ret

00805bf4 <_lo0bits>:
  805bf4:	20c00017 	ldw	r3,0(r4)
  805bf8:	188001cc 	andi	r2,r3,7
  805bfc:	10000a26 	beq	r2,zero,805c28 <_lo0bits+0x34>
  805c00:	1880004c 	andi	r2,r3,1
  805c04:	000b883a 	mov	r5,zero
  805c08:	1000051e 	bne	r2,zero,805c20 <_lo0bits+0x2c>
  805c0c:	1880008c 	andi	r2,r3,2
  805c10:	10002126 	beq	r2,zero,805c98 <_lo0bits+0xa4>
  805c14:	1804d07a 	srli	r2,r3,1
  805c18:	01400044 	movi	r5,1
  805c1c:	20800015 	stw	r2,0(r4)
  805c20:	2805883a 	mov	r2,r5
  805c24:	f800283a 	ret
  805c28:	18bfffcc 	andi	r2,r3,65535
  805c2c:	000d883a 	mov	r6,zero
  805c30:	10001626 	beq	r2,zero,805c8c <_lo0bits+0x98>
  805c34:	18803fcc 	andi	r2,r3,255
  805c38:	1000021e 	bne	r2,zero,805c44 <_lo0bits+0x50>
  805c3c:	1806d23a 	srli	r3,r3,8
  805c40:	31800204 	addi	r6,r6,8
  805c44:	188003cc 	andi	r2,r3,15
  805c48:	1000021e 	bne	r2,zero,805c54 <_lo0bits+0x60>
  805c4c:	1806d13a 	srli	r3,r3,4
  805c50:	31800104 	addi	r6,r6,4
  805c54:	188000cc 	andi	r2,r3,3
  805c58:	1000021e 	bne	r2,zero,805c64 <_lo0bits+0x70>
  805c5c:	1806d0ba 	srli	r3,r3,2
  805c60:	31800084 	addi	r6,r6,2
  805c64:	1880004c 	andi	r2,r3,1
  805c68:	1000041e 	bne	r2,zero,805c7c <_lo0bits+0x88>
  805c6c:	1806d07a 	srli	r3,r3,1
  805c70:	31800044 	addi	r6,r6,1
  805c74:	01400804 	movi	r5,32
  805c78:	183fe926 	beq	r3,zero,805c20 <_lo0bits+0x2c>
  805c7c:	300b883a 	mov	r5,r6
  805c80:	2805883a 	mov	r2,r5
  805c84:	20c00015 	stw	r3,0(r4)
  805c88:	f800283a 	ret
  805c8c:	1806d43a 	srli	r3,r3,16
  805c90:	01800404 	movi	r6,16
  805c94:	003fe706 	br	805c34 <_lo0bits+0x40>
  805c98:	1804d0ba 	srli	r2,r3,2
  805c9c:	01400084 	movi	r5,2
  805ca0:	20800015 	stw	r2,0(r4)
  805ca4:	003fde06 	br	805c20 <_lo0bits+0x2c>

00805ca8 <_i2b>:
  805ca8:	defffd04 	addi	sp,sp,-12
  805cac:	dc000115 	stw	r16,4(sp)
  805cb0:	04000044 	movi	r16,1
  805cb4:	dc800015 	stw	r18,0(sp)
  805cb8:	2825883a 	mov	r18,r5
  805cbc:	800b883a 	mov	r5,r16
  805cc0:	dfc00215 	stw	ra,8(sp)
  805cc4:	080589c0 	call	80589c <_Balloc>
  805cc8:	14000415 	stw	r16,16(r2)
  805ccc:	14800515 	stw	r18,20(r2)
  805cd0:	dfc00217 	ldw	ra,8(sp)
  805cd4:	dc000117 	ldw	r16,4(sp)
  805cd8:	dc800017 	ldw	r18,0(sp)
  805cdc:	dec00304 	addi	sp,sp,12
  805ce0:	f800283a 	ret

00805ce4 <_multiply>:
  805ce4:	deffee04 	addi	sp,sp,-72
  805ce8:	dc000f15 	stw	r16,60(sp)
  805cec:	dfc01115 	stw	ra,68(sp)
  805cf0:	df001015 	stw	fp,64(sp)
  805cf4:	dc400e15 	stw	r17,56(sp)
  805cf8:	dc800d15 	stw	r18,52(sp)
  805cfc:	dcc00c15 	stw	r19,48(sp)
  805d00:	dd000b15 	stw	r20,44(sp)
  805d04:	dd400a15 	stw	r21,40(sp)
  805d08:	dd800915 	stw	r22,36(sp)
  805d0c:	ddc00815 	stw	r23,32(sp)
  805d10:	2c800417 	ldw	r18,16(r5)
  805d14:	34400417 	ldw	r17,16(r6)
  805d18:	2821883a 	mov	r16,r5
  805d1c:	9440050e 	bge	r18,r17,805d34 <_multiply+0x50>
  805d20:	8825883a 	mov	r18,r17
  805d24:	2c400417 	ldw	r17,16(r5)
  805d28:	3021883a 	mov	r16,r6
  805d2c:	d9400015 	stw	r5,0(sp)
  805d30:	280d883a 	mov	r6,r5
  805d34:	80800217 	ldw	r2,8(r16)
  805d38:	9447883a 	add	r3,r18,r17
  805d3c:	d8c00115 	stw	r3,4(sp)
  805d40:	81400117 	ldw	r5,4(r16)
  805d44:	10c0010e 	bge	r2,r3,805d4c <_multiply+0x68>
  805d48:	29400044 	addi	r5,r5,1
  805d4c:	d9800715 	stw	r6,28(sp)
  805d50:	080589c0 	call	80589c <_Balloc>
  805d54:	d8800015 	stw	r2,0(sp)
  805d58:	d8800117 	ldw	r2,4(sp)
  805d5c:	d8c00017 	ldw	r3,0(sp)
  805d60:	d9800717 	ldw	r6,28(sp)
  805d64:	100490ba 	slli	r2,r2,2
  805d68:	18c00504 	addi	r3,r3,20
  805d6c:	d8c00615 	stw	r3,24(sp)
  805d70:	d8800515 	stw	r2,20(sp)
  805d74:	10c5883a 	add	r2,r2,r3
  805d78:	1827883a 	mov	r19,r3
  805d7c:	d8800215 	stw	r2,8(sp)
  805d80:	1880042e 	bgeu	r3,r2,805d94 <_multiply+0xb0>
  805d84:	d8c00217 	ldw	r3,8(sp)
  805d88:	98000015 	stw	zero,0(r19)
  805d8c:	9cc00104 	addi	r19,r19,4
  805d90:	98fffc36 	bltu	r19,r3,805d84 <_multiply+0xa0>
  805d94:	880490ba 	slli	r2,r17,2
  805d98:	900690ba 	slli	r3,r18,2
  805d9c:	35c00504 	addi	r23,r6,20
  805da0:	15c5883a 	add	r2,r2,r23
  805da4:	84000504 	addi	r16,r16,20
  805da8:	d8800315 	stw	r2,12(sp)
  805dac:	1c39883a 	add	fp,r3,r16
  805db0:	d8800617 	ldw	r2,24(sp)
  805db4:	d8c00317 	ldw	r3,12(sp)
  805db8:	dc000215 	stw	r16,8(sp)
  805dbc:	d8800415 	stw	r2,16(sp)
  805dc0:	b8c0402e 	bgeu	r23,r3,805ec4 <_multiply+0x1e0>
  805dc4:	b8800017 	ldw	r2,0(r23)
  805dc8:	15bfffcc 	andi	r22,r2,65535
  805dcc:	b0001a26 	beq	r22,zero,805e38 <_multiply+0x154>
  805dd0:	dcc00217 	ldw	r19,8(sp)
  805dd4:	dc800417 	ldw	r18,16(sp)
  805dd8:	002b883a 	mov	r21,zero
  805ddc:	9c400017 	ldw	r17,0(r19)
  805de0:	b00b883a 	mov	r5,r22
  805de4:	9cc00104 	addi	r19,r19,4
  805de8:	893fffcc 	andi	r4,r17,65535
  805dec:	08006ec0 	call	8006ec <__mulsi3>
  805df0:	94000017 	ldw	r16,0(r18)
  805df4:	8808d43a 	srli	r4,r17,16
  805df8:	b00b883a 	mov	r5,r22
  805dfc:	80ffffcc 	andi	r3,r16,65535
  805e00:	10c5883a 	add	r2,r2,r3
  805e04:	1563883a 	add	r17,r2,r21
  805e08:	8020d43a 	srli	r16,r16,16
  805e0c:	882ad43a 	srli	r21,r17,16
  805e10:	08006ec0 	call	8006ec <__mulsi3>
  805e14:	1405883a 	add	r2,r2,r16
  805e18:	9440000d 	sth	r17,0(r18)
  805e1c:	1563883a 	add	r17,r2,r21
  805e20:	9440008d 	sth	r17,2(r18)
  805e24:	882ad43a 	srli	r21,r17,16
  805e28:	94800104 	addi	r18,r18,4
  805e2c:	9f3feb36 	bltu	r19,fp,805ddc <_multiply+0xf8>
  805e30:	95400015 	stw	r21,0(r18)
  805e34:	b8800017 	ldw	r2,0(r23)
  805e38:	102cd43a 	srli	r22,r2,16
  805e3c:	b0001b26 	beq	r22,zero,805eac <_multiply+0x1c8>
  805e40:	dc800417 	ldw	r18,16(sp)
  805e44:	dcc00217 	ldw	r19,8(sp)
  805e48:	002b883a 	mov	r21,zero
  805e4c:	94400017 	ldw	r17,0(r18)
  805e50:	8829883a 	mov	r20,r17
  805e54:	9c000017 	ldw	r16,0(r19)
  805e58:	b00b883a 	mov	r5,r22
  805e5c:	9cc00104 	addi	r19,r19,4
  805e60:	813fffcc 	andi	r4,r16,65535
  805e64:	08006ec0 	call	8006ec <__mulsi3>
  805e68:	a006d43a 	srli	r3,r20,16
  805e6c:	8008d43a 	srli	r4,r16,16
  805e70:	9440000d 	sth	r17,0(r18)
  805e74:	10c5883a 	add	r2,r2,r3
  805e78:	1563883a 	add	r17,r2,r21
  805e7c:	9440008d 	sth	r17,2(r18)
  805e80:	b00b883a 	mov	r5,r22
  805e84:	94800104 	addi	r18,r18,4
  805e88:	08006ec0 	call	8006ec <__mulsi3>
  805e8c:	95000017 	ldw	r20,0(r18)
  805e90:	882ad43a 	srli	r21,r17,16
  805e94:	a0ffffcc 	andi	r3,r20,65535
  805e98:	10c5883a 	add	r2,r2,r3
  805e9c:	1563883a 	add	r17,r2,r21
  805ea0:	882ad43a 	srli	r21,r17,16
  805ea4:	9f3feb36 	bltu	r19,fp,805e54 <_multiply+0x170>
  805ea8:	94400015 	stw	r17,0(r18)
  805eac:	d8800417 	ldw	r2,16(sp)
  805eb0:	bdc00104 	addi	r23,r23,4
  805eb4:	10800104 	addi	r2,r2,4
  805eb8:	d8800415 	stw	r2,16(sp)
  805ebc:	d8c00317 	ldw	r3,12(sp)
  805ec0:	b8ffc036 	bltu	r23,r3,805dc4 <_multiply+0xe0>
  805ec4:	d8800517 	ldw	r2,20(sp)
  805ec8:	d8c00617 	ldw	r3,24(sp)
  805ecc:	10e5883a 	add	r18,r2,r3
  805ed0:	d8800117 	ldw	r2,4(sp)
  805ed4:	0080080e 	bge	zero,r2,805ef8 <_multiply+0x214>
  805ed8:	94bfff04 	addi	r18,r18,-4
  805edc:	90800017 	ldw	r2,0(r18)
  805ee0:	1000051e 	bne	r2,zero,805ef8 <_multiply+0x214>
  805ee4:	d8c00117 	ldw	r3,4(sp)
  805ee8:	94bfff04 	addi	r18,r18,-4
  805eec:	18ffffc4 	addi	r3,r3,-1
  805ef0:	d8c00115 	stw	r3,4(sp)
  805ef4:	00fff916 	blt	zero,r3,805edc <_multiply+0x1f8>
  805ef8:	d8800117 	ldw	r2,4(sp)
  805efc:	d8c00017 	ldw	r3,0(sp)
  805f00:	18800415 	stw	r2,16(r3)
  805f04:	1805883a 	mov	r2,r3
  805f08:	dfc01117 	ldw	ra,68(sp)
  805f0c:	df001017 	ldw	fp,64(sp)
  805f10:	dc000f17 	ldw	r16,60(sp)
  805f14:	dc400e17 	ldw	r17,56(sp)
  805f18:	dc800d17 	ldw	r18,52(sp)
  805f1c:	dcc00c17 	ldw	r19,48(sp)
  805f20:	dd000b17 	ldw	r20,44(sp)
  805f24:	dd400a17 	ldw	r21,40(sp)
  805f28:	dd800917 	ldw	r22,36(sp)
  805f2c:	ddc00817 	ldw	r23,32(sp)
  805f30:	dec01204 	addi	sp,sp,72
  805f34:	f800283a 	ret

00805f38 <_pow5mult>:
  805f38:	defffa04 	addi	sp,sp,-24
  805f3c:	308000cc 	andi	r2,r6,3
  805f40:	dc800215 	stw	r18,8(sp)
  805f44:	dcc00115 	stw	r19,4(sp)
  805f48:	dd000015 	stw	r20,0(sp)
  805f4c:	dfc00515 	stw	ra,20(sp)
  805f50:	dc000415 	stw	r16,16(sp)
  805f54:	dc400315 	stw	r17,12(sp)
  805f58:	3025883a 	mov	r18,r6
  805f5c:	2027883a 	mov	r19,r4
  805f60:	2829883a 	mov	r20,r5
  805f64:	10002a1e 	bne	r2,zero,806010 <_pow5mult+0xd8>
  805f68:	9025d0ba 	srai	r18,r18,2
  805f6c:	90001f26 	beq	r18,zero,805fec <_pow5mult+0xb4>
  805f70:	9c001217 	ldw	r16,72(r19)
  805f74:	80003426 	beq	r16,zero,806048 <_pow5mult+0x110>
  805f78:	9080004c 	andi	r2,r18,1
  805f7c:	800d883a 	mov	r6,r16
  805f80:	9809883a 	mov	r4,r19
  805f84:	a00b883a 	mov	r5,r20
  805f88:	9025d07a 	srai	r18,r18,1
  805f8c:	10000d1e 	bne	r2,zero,805fc4 <_pow5mult+0x8c>
  805f90:	800b883a 	mov	r5,r16
  805f94:	800d883a 	mov	r6,r16
  805f98:	9809883a 	mov	r4,r19
  805f9c:	90001326 	beq	r18,zero,805fec <_pow5mult+0xb4>
  805fa0:	80800017 	ldw	r2,0(r16)
  805fa4:	10002326 	beq	r2,zero,806034 <_pow5mult+0xfc>
  805fa8:	1021883a 	mov	r16,r2
  805fac:	9080004c 	andi	r2,r18,1
  805fb0:	800d883a 	mov	r6,r16
  805fb4:	9809883a 	mov	r4,r19
  805fb8:	a00b883a 	mov	r5,r20
  805fbc:	9025d07a 	srai	r18,r18,1
  805fc0:	103ff326 	beq	r2,zero,805f90 <_pow5mult+0x58>
  805fc4:	0805ce40 	call	805ce4 <_multiply>
  805fc8:	a00b883a 	mov	r5,r20
  805fcc:	9809883a 	mov	r4,r19
  805fd0:	1023883a 	mov	r17,r2
  805fd4:	080594c0 	call	80594c <_Bfree>
  805fd8:	8829883a 	mov	r20,r17
  805fdc:	800b883a 	mov	r5,r16
  805fe0:	800d883a 	mov	r6,r16
  805fe4:	9809883a 	mov	r4,r19
  805fe8:	903fed1e 	bne	r18,zero,805fa0 <_pow5mult+0x68>
  805fec:	a005883a 	mov	r2,r20
  805ff0:	dfc00517 	ldw	ra,20(sp)
  805ff4:	dc000417 	ldw	r16,16(sp)
  805ff8:	dc400317 	ldw	r17,12(sp)
  805ffc:	dc800217 	ldw	r18,8(sp)
  806000:	dcc00117 	ldw	r19,4(sp)
  806004:	dd000017 	ldw	r20,0(sp)
  806008:	dec00604 	addi	sp,sp,24
  80600c:	f800283a 	ret
  806010:	100490ba 	slli	r2,r2,2
  806014:	00c02074 	movhi	r3,129
  806018:	18c12104 	addi	r3,r3,1156
  80601c:	000f883a 	mov	r7,zero
  806020:	10c5883a 	add	r2,r2,r3
  806024:	11800017 	ldw	r6,0(r2)
  806028:	08059700 	call	805970 <_multadd>
  80602c:	1029883a 	mov	r20,r2
  806030:	003fcd06 	br	805f68 <_pow5mult+0x30>
  806034:	0805ce40 	call	805ce4 <_multiply>
  806038:	80800015 	stw	r2,0(r16)
  80603c:	1021883a 	mov	r16,r2
  806040:	10000015 	stw	zero,0(r2)
  806044:	003fd906 	br	805fac <_pow5mult+0x74>
  806048:	9809883a 	mov	r4,r19
  80604c:	01409c44 	movi	r5,625
  806050:	0805ca80 	call	805ca8 <_i2b>
  806054:	98801215 	stw	r2,72(r19)
  806058:	1021883a 	mov	r16,r2
  80605c:	10000015 	stw	zero,0(r2)
  806060:	003fc506 	br	805f78 <_pow5mult+0x40>

00806064 <_lshift>:
  806064:	defff904 	addi	sp,sp,-28
  806068:	dc000515 	stw	r16,20(sp)
  80606c:	dc400415 	stw	r17,16(sp)
  806070:	dc800315 	stw	r18,12(sp)
  806074:	dcc00215 	stw	r19,8(sp)
  806078:	dd400015 	stw	r21,0(sp)
  80607c:	dfc00615 	stw	ra,24(sp)
  806080:	dd000115 	stw	r20,4(sp)
  806084:	28800417 	ldw	r2,16(r5)
  806088:	3021d17a 	srai	r16,r6,5
  80608c:	28c00217 	ldw	r3,8(r5)
  806090:	2827883a 	mov	r19,r5
  806094:	1405883a 	add	r2,r2,r16
  806098:	14800044 	addi	r18,r2,1
  80609c:	3023883a 	mov	r17,r6
  8060a0:	202b883a 	mov	r21,r4
  8060a4:	29400117 	ldw	r5,4(r5)
  8060a8:	1c80030e 	bge	r3,r18,8060b8 <_lshift+0x54>
  8060ac:	18c7883a 	add	r3,r3,r3
  8060b0:	29400044 	addi	r5,r5,1
  8060b4:	1cbffd16 	blt	r3,r18,8060ac <_lshift+0x48>
  8060b8:	a809883a 	mov	r4,r21
  8060bc:	080589c0 	call	80589c <_Balloc>
  8060c0:	1029883a 	mov	r20,r2
  8060c4:	11800504 	addi	r6,r2,20
  8060c8:	0007883a 	mov	r3,zero
  8060cc:	0400040e 	bge	zero,r16,8060e0 <_lshift+0x7c>
  8060d0:	18c00044 	addi	r3,r3,1
  8060d4:	30000015 	stw	zero,0(r6)
  8060d8:	31800104 	addi	r6,r6,4
  8060dc:	1c3ffc16 	blt	r3,r16,8060d0 <_lshift+0x6c>
  8060e0:	98800417 	ldw	r2,16(r19)
  8060e4:	99000504 	addi	r4,r19,20
  8060e8:	8c4007cc 	andi	r17,r17,31
  8060ec:	100490ba 	slli	r2,r2,2
  8060f0:	110f883a 	add	r7,r2,r4
  8060f4:	88001e26 	beq	r17,zero,806170 <_lshift+0x10c>
  8060f8:	00800804 	movi	r2,32
  8060fc:	144bc83a 	sub	r5,r2,r17
  806100:	0007883a 	mov	r3,zero
  806104:	20800017 	ldw	r2,0(r4)
  806108:	1444983a 	sll	r2,r2,r17
  80610c:	10c4b03a 	or	r2,r2,r3
  806110:	30800015 	stw	r2,0(r6)
  806114:	20c00017 	ldw	r3,0(r4)
  806118:	21000104 	addi	r4,r4,4
  80611c:	31800104 	addi	r6,r6,4
  806120:	1946d83a 	srl	r3,r3,r5
  806124:	21fff736 	bltu	r4,r7,806104 <_lshift+0xa0>
  806128:	30c00015 	stw	r3,0(r6)
  80612c:	18000126 	beq	r3,zero,806134 <_lshift+0xd0>
  806130:	94800044 	addi	r18,r18,1
  806134:	90bfffc4 	addi	r2,r18,-1
  806138:	a0800415 	stw	r2,16(r20)
  80613c:	a809883a 	mov	r4,r21
  806140:	980b883a 	mov	r5,r19
  806144:	080594c0 	call	80594c <_Bfree>
  806148:	a005883a 	mov	r2,r20
  80614c:	dfc00617 	ldw	ra,24(sp)
  806150:	dc000517 	ldw	r16,20(sp)
  806154:	dc400417 	ldw	r17,16(sp)
  806158:	dc800317 	ldw	r18,12(sp)
  80615c:	dcc00217 	ldw	r19,8(sp)
  806160:	dd000117 	ldw	r20,4(sp)
  806164:	dd400017 	ldw	r21,0(sp)
  806168:	dec00704 	addi	sp,sp,28
  80616c:	f800283a 	ret
  806170:	20800017 	ldw	r2,0(r4)
  806174:	21000104 	addi	r4,r4,4
  806178:	30800015 	stw	r2,0(r6)
  80617c:	31800104 	addi	r6,r6,4
  806180:	21ffec2e 	bgeu	r4,r7,806134 <_lshift+0xd0>
  806184:	20800017 	ldw	r2,0(r4)
  806188:	21000104 	addi	r4,r4,4
  80618c:	30800015 	stw	r2,0(r6)
  806190:	31800104 	addi	r6,r6,4
  806194:	21fff636 	bltu	r4,r7,806170 <_lshift+0x10c>
  806198:	003fe606 	br	806134 <_lshift+0xd0>

0080619c <__mcmp>:
  80619c:	20800417 	ldw	r2,16(r4)
  8061a0:	28c00417 	ldw	r3,16(r5)
  8061a4:	10c5c83a 	sub	r2,r2,r3
  8061a8:	100d883a 	mov	r6,r2
  8061ac:	10000c1e 	bne	r2,zero,8061e0 <__mcmp+0x44>
  8061b0:	180690ba 	slli	r3,r3,2
  8061b4:	21000504 	addi	r4,r4,20
  8061b8:	28800504 	addi	r2,r5,20
  8061bc:	1885883a 	add	r2,r3,r2
  8061c0:	1907883a 	add	r3,r3,r4
  8061c4:	18ffff04 	addi	r3,r3,-4
  8061c8:	10bfff04 	addi	r2,r2,-4
  8061cc:	19800017 	ldw	r6,0(r3)
  8061d0:	11400017 	ldw	r5,0(r2)
  8061d4:	3140041e 	bne	r6,r5,8061e8 <__mcmp+0x4c>
  8061d8:	20fffa36 	bltu	r4,r3,8061c4 <__mcmp+0x28>
  8061dc:	000d883a 	mov	r6,zero
  8061e0:	3005883a 	mov	r2,r6
  8061e4:	f800283a 	ret
  8061e8:	00bfffc4 	movi	r2,-1
  8061ec:	31400136 	bltu	r6,r5,8061f4 <__mcmp+0x58>
  8061f0:	00800044 	movi	r2,1
  8061f4:	100d883a 	mov	r6,r2
  8061f8:	3005883a 	mov	r2,r6
  8061fc:	f800283a 	ret

00806200 <__mdiff>:
  806200:	defffb04 	addi	sp,sp,-20
  806204:	dc400215 	stw	r17,8(sp)
  806208:	2823883a 	mov	r17,r5
  80620c:	dcc00015 	stw	r19,0(sp)
  806210:	300b883a 	mov	r5,r6
  806214:	2027883a 	mov	r19,r4
  806218:	8809883a 	mov	r4,r17
  80621c:	dc800115 	stw	r18,4(sp)
  806220:	dfc00415 	stw	ra,16(sp)
  806224:	dc000315 	stw	r16,12(sp)
  806228:	3025883a 	mov	r18,r6
  80622c:	080619c0 	call	80619c <__mcmp>
  806230:	10004026 	beq	r2,zero,806334 <__mdiff+0x134>
  806234:	10004e16 	blt	r2,zero,806370 <__mdiff+0x170>
  806238:	0021883a 	mov	r16,zero
  80623c:	89400117 	ldw	r5,4(r17)
  806240:	9809883a 	mov	r4,r19
  806244:	080589c0 	call	80589c <_Balloc>
  806248:	1019883a 	mov	r12,r2
  80624c:	8a800417 	ldw	r10,16(r17)
  806250:	90800417 	ldw	r2,16(r18)
  806254:	8a000504 	addi	r8,r17,20
  806258:	500690ba 	slli	r3,r10,2
  80625c:	100490ba 	slli	r2,r2,2
  806260:	91800504 	addi	r6,r18,20
  806264:	64000315 	stw	r16,12(r12)
  806268:	1a1b883a 	add	r13,r3,r8
  80626c:	1197883a 	add	r11,r2,r6
  806270:	61c00504 	addi	r7,r12,20
  806274:	0013883a 	mov	r9,zero
  806278:	41000017 	ldw	r4,0(r8)
  80627c:	31400017 	ldw	r5,0(r6)
  806280:	31800104 	addi	r6,r6,4
  806284:	20bfffcc 	andi	r2,r4,65535
  806288:	28ffffcc 	andi	r3,r5,65535
  80628c:	10c5c83a 	sub	r2,r2,r3
  806290:	1245883a 	add	r2,r2,r9
  806294:	2008d43a 	srli	r4,r4,16
  806298:	280ad43a 	srli	r5,r5,16
  80629c:	1013d43a 	srai	r9,r2,16
  8062a0:	3880000d 	sth	r2,0(r7)
  8062a4:	2149c83a 	sub	r4,r4,r5
  8062a8:	2247883a 	add	r3,r4,r9
  8062ac:	38c0008d 	sth	r3,2(r7)
  8062b0:	42000104 	addi	r8,r8,4
  8062b4:	39c00104 	addi	r7,r7,4
  8062b8:	1813d43a 	srai	r9,r3,16
  8062bc:	32ffee36 	bltu	r6,r11,806278 <__mdiff+0x78>
  8062c0:	43400c2e 	bgeu	r8,r13,8062f4 <__mdiff+0xf4>
  8062c4:	40c00017 	ldw	r3,0(r8)
  8062c8:	42000104 	addi	r8,r8,4
  8062cc:	18bfffcc 	andi	r2,r3,65535
  8062d0:	1245883a 	add	r2,r2,r9
  8062d4:	1013d43a 	srai	r9,r2,16
  8062d8:	1806d43a 	srli	r3,r3,16
  8062dc:	3880000d 	sth	r2,0(r7)
  8062e0:	1a47883a 	add	r3,r3,r9
  8062e4:	38c0008d 	sth	r3,2(r7)
  8062e8:	1813d43a 	srai	r9,r3,16
  8062ec:	39c00104 	addi	r7,r7,4
  8062f0:	437ff436 	bltu	r8,r13,8062c4 <__mdiff+0xc4>
  8062f4:	39ffff04 	addi	r7,r7,-4
  8062f8:	38800017 	ldw	r2,0(r7)
  8062fc:	1000041e 	bne	r2,zero,806310 <__mdiff+0x110>
  806300:	39ffff04 	addi	r7,r7,-4
  806304:	38800017 	ldw	r2,0(r7)
  806308:	52bfffc4 	addi	r10,r10,-1
  80630c:	103ffc26 	beq	r2,zero,806300 <__mdiff+0x100>
  806310:	6005883a 	mov	r2,r12
  806314:	62800415 	stw	r10,16(r12)
  806318:	dfc00417 	ldw	ra,16(sp)
  80631c:	dc000317 	ldw	r16,12(sp)
  806320:	dc400217 	ldw	r17,8(sp)
  806324:	dc800117 	ldw	r18,4(sp)
  806328:	dcc00017 	ldw	r19,0(sp)
  80632c:	dec00504 	addi	sp,sp,20
  806330:	f800283a 	ret
  806334:	9809883a 	mov	r4,r19
  806338:	000b883a 	mov	r5,zero
  80633c:	080589c0 	call	80589c <_Balloc>
  806340:	1019883a 	mov	r12,r2
  806344:	00800044 	movi	r2,1
  806348:	60800415 	stw	r2,16(r12)
  80634c:	6005883a 	mov	r2,r12
  806350:	60000515 	stw	zero,20(r12)
  806354:	dfc00417 	ldw	ra,16(sp)
  806358:	dc000317 	ldw	r16,12(sp)
  80635c:	dc400217 	ldw	r17,8(sp)
  806360:	dc800117 	ldw	r18,4(sp)
  806364:	dcc00017 	ldw	r19,0(sp)
  806368:	dec00504 	addi	sp,sp,20
  80636c:	f800283a 	ret
  806370:	8819883a 	mov	r12,r17
  806374:	04000044 	movi	r16,1
  806378:	9023883a 	mov	r17,r18
  80637c:	6025883a 	mov	r18,r12
  806380:	003fae06 	br	80623c <__mdiff+0x3c>

00806384 <_ulp>:
  806384:	295ffc2c 	andhi	r5,r5,32752
  806388:	013f3034 	movhi	r4,64704
  80638c:	21000004 	addi	r4,r4,0
  806390:	290b883a 	add	r5,r5,r4
  806394:	0145c83a 	sub	r2,zero,r5
  806398:	000d883a 	mov	r6,zero
  80639c:	280f883a 	mov	r7,r5
  8063a0:	0140030e 	bge	zero,r5,8063b0 <_ulp+0x2c>
  8063a4:	3005883a 	mov	r2,r6
  8063a8:	3807883a 	mov	r3,r7
  8063ac:	f800283a 	ret
  8063b0:	100bd53a 	srai	r5,r2,20
  8063b4:	008004c4 	movi	r2,19
  8063b8:	01000044 	movi	r4,1
  8063bc:	11400c0e 	bge	r2,r5,8063f0 <_ulp+0x6c>
  8063c0:	008007c4 	movi	r2,31
  8063c4:	297ffb04 	addi	r5,r5,-20
  8063c8:	1147c83a 	sub	r3,r2,r5
  8063cc:	00800784 	movi	r2,30
  8063d0:	000f883a 	mov	r7,zero
  8063d4:	11400216 	blt	r2,r5,8063e0 <_ulp+0x5c>
  8063d8:	00800044 	movi	r2,1
  8063dc:	10c8983a 	sll	r4,r2,r3
  8063e0:	200d883a 	mov	r6,r4
  8063e4:	3005883a 	mov	r2,r6
  8063e8:	3807883a 	mov	r3,r7
  8063ec:	f800283a 	ret
  8063f0:	00800234 	movhi	r2,8
  8063f4:	10800004 	addi	r2,r2,0
  8063f8:	114fd83a 	sra	r7,r2,r5
  8063fc:	000d883a 	mov	r6,zero
  806400:	3005883a 	mov	r2,r6
  806404:	3807883a 	mov	r3,r7
  806408:	f800283a 	ret

0080640c <_b2d>:
  80640c:	defff904 	addi	sp,sp,-28
  806410:	dc000515 	stw	r16,20(sp)
  806414:	dc400415 	stw	r17,16(sp)
  806418:	dd400015 	stw	r21,0(sp)
  80641c:	dfc00615 	stw	ra,24(sp)
  806420:	dc800315 	stw	r18,12(sp)
  806424:	dcc00215 	stw	r19,8(sp)
  806428:	dd000115 	stw	r20,4(sp)
  80642c:	20800417 	ldw	r2,16(r4)
  806430:	25400504 	addi	r21,r4,20
  806434:	2823883a 	mov	r17,r5
  806438:	100490ba 	slli	r2,r2,2
  80643c:	1561883a 	add	r16,r2,r21
  806440:	843fff04 	addi	r16,r16,-4
  806444:	85000017 	ldw	r20,0(r16)
  806448:	a009883a 	mov	r4,r20
  80644c:	0805b900 	call	805b90 <_hi0bits>
  806450:	100b883a 	mov	r5,r2
  806454:	00800804 	movi	r2,32
  806458:	1145c83a 	sub	r2,r2,r5
  80645c:	00c00284 	movi	r3,10
  806460:	88800015 	stw	r2,0(r17)
  806464:	1940240e 	bge	r3,r5,8064f8 <_b2d+0xec>
  806468:	0009883a 	mov	r4,zero
  80646c:	ac001136 	bltu	r21,r16,8064b4 <_b2d+0xa8>
  806470:	297ffd44 	addi	r5,r5,-11
  806474:	28001326 	beq	r5,zero,8064c4 <_b2d+0xb8>
  806478:	00800804 	movi	r2,32
  80647c:	1145c83a 	sub	r2,r2,r5
  806480:	a146983a 	sll	r3,r20,r5
  806484:	2084d83a 	srl	r2,r4,r2
  806488:	0029883a 	mov	r20,zero
  80648c:	1886b03a 	or	r3,r3,r2
  806490:	1ccffc34 	orhi	r19,r3,16368
  806494:	ac00012e 	bgeu	r21,r16,80649c <_b2d+0x90>
  806498:	853fff17 	ldw	r20,-4(r16)
  80649c:	00800804 	movi	r2,32
  8064a0:	1145c83a 	sub	r2,r2,r5
  8064a4:	a084d83a 	srl	r2,r20,r2
  8064a8:	2146983a 	sll	r3,r4,r5
  8064ac:	18a4b03a 	or	r18,r3,r2
  8064b0:	00000606 	br	8064cc <_b2d+0xc0>
  8064b4:	843fff04 	addi	r16,r16,-4
  8064b8:	297ffd44 	addi	r5,r5,-11
  8064bc:	81000017 	ldw	r4,0(r16)
  8064c0:	283fed1e 	bne	r5,zero,806478 <_b2d+0x6c>
  8064c4:	a4cffc34 	orhi	r19,r20,16368
  8064c8:	2025883a 	mov	r18,r4
  8064cc:	9005883a 	mov	r2,r18
  8064d0:	9807883a 	mov	r3,r19
  8064d4:	dfc00617 	ldw	ra,24(sp)
  8064d8:	dc000517 	ldw	r16,20(sp)
  8064dc:	dc400417 	ldw	r17,16(sp)
  8064e0:	dc800317 	ldw	r18,12(sp)
  8064e4:	dcc00217 	ldw	r19,8(sp)
  8064e8:	dd000117 	ldw	r20,4(sp)
  8064ec:	dd400017 	ldw	r21,0(sp)
  8064f0:	dec00704 	addi	sp,sp,28
  8064f4:	f800283a 	ret
  8064f8:	008002c4 	movi	r2,11
  8064fc:	1145c83a 	sub	r2,r2,r5
  806500:	a084d83a 	srl	r2,r20,r2
  806504:	0009883a 	mov	r4,zero
  806508:	14cffc34 	orhi	r19,r2,16368
  80650c:	ac00012e 	bgeu	r21,r16,806514 <_b2d+0x108>
  806510:	813fff17 	ldw	r4,-4(r16)
  806514:	00c002c4 	movi	r3,11
  806518:	1947c83a 	sub	r3,r3,r5
  80651c:	28800544 	addi	r2,r5,21
  806520:	a084983a 	sll	r2,r20,r2
  806524:	20c6d83a 	srl	r3,r4,r3
  806528:	18a4b03a 	or	r18,r3,r2
  80652c:	003fe706 	br	8064cc <_b2d+0xc0>

00806530 <_d2b>:
  806530:	defff404 	addi	sp,sp,-48
  806534:	dd000515 	stw	r20,20(sp)
  806538:	05000044 	movi	r20,1
  80653c:	dc000915 	stw	r16,36(sp)
  806540:	2821883a 	mov	r16,r5
  806544:	a00b883a 	mov	r5,r20
  806548:	df000a15 	stw	fp,40(sp)
  80654c:	dc400815 	stw	r17,32(sp)
  806550:	dc800715 	stw	r18,28(sp)
  806554:	3023883a 	mov	r17,r6
  806558:	dcc00615 	stw	r19,24(sp)
  80655c:	dd400415 	stw	r21,16(sp)
  806560:	dd800315 	stw	r22,12(sp)
  806564:	ddc00215 	stw	r23,8(sp)
  806568:	dfc00b15 	stw	ra,44(sp)
  80656c:	382f883a 	mov	r23,r7
  806570:	df000c17 	ldw	fp,48(sp)
  806574:	080589c0 	call	80589c <_Balloc>
  806578:	1027883a 	mov	r19,r2
  80657c:	00e00034 	movhi	r3,32768
  806580:	18ffffc4 	addi	r3,r3,-1
  806584:	00800434 	movhi	r2,16
  806588:	10bfffc4 	addi	r2,r2,-1
  80658c:	8888703a 	and	r4,r17,r2
  806590:	1c62703a 	and	r17,r3,r17
  806594:	882cd53a 	srli	r22,r17,20
  806598:	9c800504 	addi	r18,r19,20
  80659c:	b02b003a 	cmpeq	r21,r22,zero
  8065a0:	a800011e 	bne	r21,zero,8065a8 <_d2b+0x78>
  8065a4:	21000434 	orhi	r4,r4,16
  8065a8:	d9000115 	stw	r4,4(sp)
  8065ac:	80002226 	beq	r16,zero,806638 <_d2b+0x108>
  8065b0:	d809883a 	mov	r4,sp
  8065b4:	dc000015 	stw	r16,0(sp)
  8065b8:	0805bf40 	call	805bf4 <_lo0bits>
  8065bc:	100d883a 	mov	r6,r2
  8065c0:	10002f1e 	bne	r2,zero,806680 <_d2b+0x150>
  8065c4:	d8800017 	ldw	r2,0(sp)
  8065c8:	90800015 	stw	r2,0(r18)
  8065cc:	d9000117 	ldw	r4,4(sp)
  8065d0:	2005003a 	cmpeq	r2,r4,zero
  8065d4:	00c00084 	movi	r3,2
  8065d8:	1885c83a 	sub	r2,r3,r2
  8065dc:	100b883a 	mov	r5,r2
  8065e0:	91000115 	stw	r4,4(r18)
  8065e4:	98800415 	stw	r2,16(r19)
  8065e8:	a8001b1e 	bne	r21,zero,806658 <_d2b+0x128>
  8065ec:	b185883a 	add	r2,r22,r6
  8065f0:	10bef344 	addi	r2,r2,-1075
  8065f4:	00c00d44 	movi	r3,53
  8065f8:	b8800015 	stw	r2,0(r23)
  8065fc:	1987c83a 	sub	r3,r3,r6
  806600:	e0c00015 	stw	r3,0(fp)
  806604:	9805883a 	mov	r2,r19
  806608:	dfc00b17 	ldw	ra,44(sp)
  80660c:	df000a17 	ldw	fp,40(sp)
  806610:	dc000917 	ldw	r16,36(sp)
  806614:	dc400817 	ldw	r17,32(sp)
  806618:	dc800717 	ldw	r18,28(sp)
  80661c:	dcc00617 	ldw	r19,24(sp)
  806620:	dd000517 	ldw	r20,20(sp)
  806624:	dd400417 	ldw	r21,16(sp)
  806628:	dd800317 	ldw	r22,12(sp)
  80662c:	ddc00217 	ldw	r23,8(sp)
  806630:	dec00c04 	addi	sp,sp,48
  806634:	f800283a 	ret
  806638:	d9000104 	addi	r4,sp,4
  80663c:	0805bf40 	call	805bf4 <_lo0bits>
  806640:	d8c00117 	ldw	r3,4(sp)
  806644:	9d000415 	stw	r20,16(r19)
  806648:	a00b883a 	mov	r5,r20
  80664c:	90c00015 	stw	r3,0(r18)
  806650:	11800804 	addi	r6,r2,32
  806654:	a83fe526 	beq	r21,zero,8065ec <_d2b+0xbc>
  806658:	280490ba 	slli	r2,r5,2
  80665c:	30fef384 	addi	r3,r6,-1074
  806660:	2820917a 	slli	r16,r5,5
  806664:	1485883a 	add	r2,r2,r18
  806668:	113fff17 	ldw	r4,-4(r2)
  80666c:	b8c00015 	stw	r3,0(r23)
  806670:	0805b900 	call	805b90 <_hi0bits>
  806674:	80a1c83a 	sub	r16,r16,r2
  806678:	e4000015 	stw	r16,0(fp)
  80667c:	003fe106 	br	806604 <_d2b+0xd4>
  806680:	00c00804 	movi	r3,32
  806684:	1887c83a 	sub	r3,r3,r2
  806688:	d8800117 	ldw	r2,4(sp)
  80668c:	d9000017 	ldw	r4,0(sp)
  806690:	10c4983a 	sll	r2,r2,r3
  806694:	1104b03a 	or	r2,r2,r4
  806698:	90800015 	stw	r2,0(r18)
  80669c:	d8c00117 	ldw	r3,4(sp)
  8066a0:	1988d83a 	srl	r4,r3,r6
  8066a4:	d9000115 	stw	r4,4(sp)
  8066a8:	003fc906 	br	8065d0 <_d2b+0xa0>

008066ac <_ratio>:
  8066ac:	defff904 	addi	sp,sp,-28
  8066b0:	dc400515 	stw	r17,20(sp)
  8066b4:	2823883a 	mov	r17,r5
  8066b8:	d80b883a 	mov	r5,sp
  8066bc:	dfc00615 	stw	ra,24(sp)
  8066c0:	dc800415 	stw	r18,16(sp)
  8066c4:	dcc00315 	stw	r19,12(sp)
  8066c8:	2025883a 	mov	r18,r4
  8066cc:	dd000215 	stw	r20,8(sp)
  8066d0:	080640c0 	call	80640c <_b2d>
  8066d4:	8809883a 	mov	r4,r17
  8066d8:	d9400104 	addi	r5,sp,4
  8066dc:	1027883a 	mov	r19,r2
  8066e0:	1829883a 	mov	r20,r3
  8066e4:	080640c0 	call	80640c <_b2d>
  8066e8:	89000417 	ldw	r4,16(r17)
  8066ec:	91c00417 	ldw	r7,16(r18)
  8066f0:	d9800117 	ldw	r6,4(sp)
  8066f4:	1813883a 	mov	r9,r3
  8066f8:	390fc83a 	sub	r7,r7,r4
  8066fc:	1009883a 	mov	r4,r2
  806700:	d8800017 	ldw	r2,0(sp)
  806704:	380e917a 	slli	r7,r7,5
  806708:	2011883a 	mov	r8,r4
  80670c:	1185c83a 	sub	r2,r2,r6
  806710:	11c5883a 	add	r2,r2,r7
  806714:	100c953a 	slli	r6,r2,20
  806718:	00800d0e 	bge	zero,r2,806750 <_ratio+0xa4>
  80671c:	3529883a 	add	r20,r6,r20
  806720:	a00b883a 	mov	r5,r20
  806724:	480f883a 	mov	r7,r9
  806728:	9809883a 	mov	r4,r19
  80672c:	400d883a 	mov	r6,r8
  806730:	080876c0 	call	80876c <__divdf3>
  806734:	dfc00617 	ldw	ra,24(sp)
  806738:	dc400517 	ldw	r17,20(sp)
  80673c:	dc800417 	ldw	r18,16(sp)
  806740:	dcc00317 	ldw	r19,12(sp)
  806744:	dd000217 	ldw	r20,8(sp)
  806748:	dec00704 	addi	sp,sp,28
  80674c:	f800283a 	ret
  806750:	1993c83a 	sub	r9,r3,r6
  806754:	003ff206 	br	806720 <_ratio+0x74>

00806758 <_mprec_log10>:
  806758:	defffe04 	addi	sp,sp,-8
  80675c:	008005c4 	movi	r2,23
  806760:	dc000015 	stw	r16,0(sp)
  806764:	dfc00115 	stw	ra,4(sp)
  806768:	2021883a 	mov	r16,r4
  80676c:	0011883a 	mov	r8,zero
  806770:	024ffc34 	movhi	r9,16368
  806774:	4a400004 	addi	r9,r9,0
  806778:	11000e16 	blt	r2,r4,8067b4 <_mprec_log10+0x5c>
  80677c:	200490fa 	slli	r2,r4,3
  806780:	01402074 	movhi	r5,129
  806784:	2940f004 	addi	r5,r5,960
  806788:	1145883a 	add	r2,r2,r5
  80678c:	10c00017 	ldw	r3,0(r2)
  806790:	11000117 	ldw	r4,4(r2)
  806794:	180d883a 	mov	r6,r3
  806798:	200f883a 	mov	r7,r4
  80679c:	3807883a 	mov	r3,r7
  8067a0:	3005883a 	mov	r2,r6
  8067a4:	dfc00117 	ldw	ra,4(sp)
  8067a8:	dc000017 	ldw	r16,0(sp)
  8067ac:	dec00204 	addi	sp,sp,8
  8067b0:	f800283a 	ret
  8067b4:	04000c0e 	bge	zero,r16,8067e8 <_mprec_log10+0x90>
  8067b8:	0005883a 	mov	r2,zero
  8067bc:	00d00934 	movhi	r3,16420
  8067c0:	18c00004 	addi	r3,r3,0
  8067c4:	480b883a 	mov	r5,r9
  8067c8:	4009883a 	mov	r4,r8
  8067cc:	180f883a 	mov	r7,r3
  8067d0:	100d883a 	mov	r6,r2
  8067d4:	080836c0 	call	80836c <__muldf3>
  8067d8:	843fffc4 	addi	r16,r16,-1
  8067dc:	1011883a 	mov	r8,r2
  8067e0:	1813883a 	mov	r9,r3
  8067e4:	043ff416 	blt	zero,r16,8067b8 <_mprec_log10+0x60>
  8067e8:	400d883a 	mov	r6,r8
  8067ec:	480f883a 	mov	r7,r9
  8067f0:	3807883a 	mov	r3,r7
  8067f4:	3005883a 	mov	r2,r6
  8067f8:	dfc00117 	ldw	ra,4(sp)
  8067fc:	dc000017 	ldw	r16,0(sp)
  806800:	dec00204 	addi	sp,sp,8
  806804:	f800283a 	ret

00806808 <_realloc_r>:
  806808:	defff404 	addi	sp,sp,-48
  80680c:	dc400815 	stw	r17,32(sp)
  806810:	dd800315 	stw	r22,12(sp)
  806814:	dfc00b15 	stw	ra,44(sp)
  806818:	df000a15 	stw	fp,40(sp)
  80681c:	dc000915 	stw	r16,36(sp)
  806820:	dc800715 	stw	r18,28(sp)
  806824:	dcc00615 	stw	r19,24(sp)
  806828:	dd000515 	stw	r20,20(sp)
  80682c:	dd400415 	stw	r21,16(sp)
  806830:	ddc00215 	stw	r23,8(sp)
  806834:	2823883a 	mov	r17,r5
  806838:	202d883a 	mov	r22,r4
  80683c:	28007826 	beq	r5,zero,806a20 <_realloc_r+0x218>
  806840:	2c3ffe04 	addi	r16,r5,-8
  806844:	d9800115 	stw	r6,4(sp)
  806848:	0809a8c0 	call	809a8c <__malloc_lock>
  80684c:	81400117 	ldw	r5,4(r16)
  806850:	d9800117 	ldw	r6,4(sp)
  806854:	00bfff04 	movi	r2,-4
  806858:	28a4703a 	and	r18,r5,r2
  80685c:	30c002c4 	addi	r3,r6,11
  806860:	00800584 	movi	r2,22
  806864:	8027883a 	mov	r19,r16
  806868:	9013883a 	mov	r9,r18
  80686c:	05000404 	movi	r20,16
  806870:	10c05b36 	bltu	r2,r3,8069e0 <_realloc_r+0x1d8>
  806874:	a1805d36 	bltu	r20,r6,8069ec <_realloc_r+0x1e4>
  806878:	9500a80e 	bge	r18,r20,806b1c <_realloc_r+0x314>
  80687c:	07002074 	movhi	fp,129
  806880:	e7019204 	addi	fp,fp,1608
  806884:	e2000217 	ldw	r8,8(fp)
  806888:	8489883a 	add	r4,r16,r18
  80688c:	e015883a 	mov	r10,fp
  806890:	4100c326 	beq	r8,r4,806ba0 <_realloc_r+0x398>
  806894:	21c00117 	ldw	r7,4(r4)
  806898:	00bfff84 	movi	r2,-2
  80689c:	3884703a 	and	r2,r7,r2
  8068a0:	1105883a 	add	r2,r2,r4
  8068a4:	10c00117 	ldw	r3,4(r2)
  8068a8:	18c0004c 	andi	r3,r3,1
  8068ac:	1800b91e 	bne	r3,zero,806b94 <_realloc_r+0x38c>
  8068b0:	00bfff04 	movi	r2,-4
  8068b4:	388e703a 	and	r7,r7,r2
  8068b8:	4100c526 	beq	r8,r4,806bd0 <_realloc_r+0x3c8>
  8068bc:	3c85883a 	add	r2,r7,r18
  8068c0:	1500bd0e 	bge	r2,r20,806bb8 <_realloc_r+0x3b0>
  8068c4:	2880004c 	andi	r2,r5,1
  8068c8:	10000e1e 	bne	r2,zero,806904 <_realloc_r+0xfc>
  8068cc:	80800017 	ldw	r2,0(r16)
  8068d0:	80afc83a 	sub	r23,r16,r2
  8068d4:	b8c00117 	ldw	r3,4(r23)
  8068d8:	00bfff04 	movi	r2,-4
  8068dc:	188a703a 	and	r5,r3,r2
  8068e0:	20000526 	beq	r4,zero,8068f8 <_realloc_r+0xf0>
  8068e4:	e0800217 	ldw	r2,8(fp)
  8068e8:	1100cf26 	beq	r2,r4,806c28 <_realloc_r+0x420>
  8068ec:	3945883a 	add	r2,r7,r5
  8068f0:	1485883a 	add	r2,r2,r18
  8068f4:	1500590e 	bge	r2,r20,806a5c <_realloc_r+0x254>
  8068f8:	b8000226 	beq	r23,zero,806904 <_realloc_r+0xfc>
  8068fc:	2c87883a 	add	r3,r5,r18
  806900:	1d00c10e 	bge	r3,r20,806c08 <_realloc_r+0x400>
  806904:	300b883a 	mov	r5,r6
  806908:	b009883a 	mov	r4,r22
  80690c:	080073c0 	call	80073c <_malloc_r>
  806910:	102b883a 	mov	r21,r2
  806914:	10010d26 	beq	r2,zero,806d4c <_realloc_r+0x544>
  806918:	98800117 	ldw	r2,4(r19)
  80691c:	00ffff84 	movi	r3,-2
  806920:	ac3ffe04 	addi	r16,r21,-8
  806924:	10c4703a 	and	r2,r2,r3
  806928:	14c5883a 	add	r2,r2,r19
  80692c:	8080fd26 	beq	r16,r2,806d24 <_realloc_r+0x51c>
  806930:	91bfff04 	addi	r6,r18,-4
  806934:	00800904 	movi	r2,36
  806938:	11809b36 	bltu	r2,r6,806ba8 <_realloc_r+0x3a0>
  80693c:	008004c4 	movi	r2,19
  806940:	880b883a 	mov	r5,r17
  806944:	a809883a 	mov	r4,r21
  806948:	1180162e 	bgeu	r2,r6,8069a4 <_realloc_r+0x19c>
  80694c:	88800017 	ldw	r2,0(r17)
  806950:	89400204 	addi	r5,r17,8
  806954:	a9000204 	addi	r4,r21,8
  806958:	a8800015 	stw	r2,0(r21)
  80695c:	88c00117 	ldw	r3,4(r17)
  806960:	008006c4 	movi	r2,27
  806964:	a8c00115 	stw	r3,4(r21)
  806968:	11800e2e 	bgeu	r2,r6,8069a4 <_realloc_r+0x19c>
  80696c:	28800017 	ldw	r2,0(r5)
  806970:	89400404 	addi	r5,r17,16
  806974:	20800015 	stw	r2,0(r4)
  806978:	88c00317 	ldw	r3,12(r17)
  80697c:	008008c4 	movi	r2,35
  806980:	a9000404 	addi	r4,r21,16
  806984:	a8c00315 	stw	r3,12(r21)
  806988:	1180062e 	bgeu	r2,r6,8069a4 <_realloc_r+0x19c>
  80698c:	28800017 	ldw	r2,0(r5)
  806990:	89400604 	addi	r5,r17,24
  806994:	20800015 	stw	r2,0(r4)
  806998:	88c00517 	ldw	r3,20(r17)
  80699c:	a9000604 	addi	r4,r21,24
  8069a0:	a8c00515 	stw	r3,20(r21)
  8069a4:	28800017 	ldw	r2,0(r5)
  8069a8:	29400104 	addi	r5,r5,4
  8069ac:	20800015 	stw	r2,0(r4)
  8069b0:	28c00017 	ldw	r3,0(r5)
  8069b4:	21000104 	addi	r4,r4,4
  8069b8:	20c00015 	stw	r3,0(r4)
  8069bc:	28800117 	ldw	r2,4(r5)
  8069c0:	20800115 	stw	r2,4(r4)
  8069c4:	b009883a 	mov	r4,r22
  8069c8:	880b883a 	mov	r5,r17
  8069cc:	0804c500 	call	804c50 <_free_r>
  8069d0:	b009883a 	mov	r4,r22
  8069d4:	0809aa80 	call	809aa8 <__malloc_unlock>
  8069d8:	a805883a 	mov	r2,r21
  8069dc:	00000406 	br	8069f0 <_realloc_r+0x1e8>
  8069e0:	00bffe04 	movi	r2,-8
  8069e4:	18a8703a 	and	r20,r3,r2
  8069e8:	a03fa20e 	bge	r20,zero,806874 <_realloc_r+0x6c>
  8069ec:	0005883a 	mov	r2,zero
  8069f0:	dfc00b17 	ldw	ra,44(sp)
  8069f4:	df000a17 	ldw	fp,40(sp)
  8069f8:	dc000917 	ldw	r16,36(sp)
  8069fc:	dc400817 	ldw	r17,32(sp)
  806a00:	dc800717 	ldw	r18,28(sp)
  806a04:	dcc00617 	ldw	r19,24(sp)
  806a08:	dd000517 	ldw	r20,20(sp)
  806a0c:	dd400417 	ldw	r21,16(sp)
  806a10:	dd800317 	ldw	r22,12(sp)
  806a14:	ddc00217 	ldw	r23,8(sp)
  806a18:	dec00c04 	addi	sp,sp,48
  806a1c:	f800283a 	ret
  806a20:	300b883a 	mov	r5,r6
  806a24:	02002034 	movhi	r8,128
  806a28:	4201cf04 	addi	r8,r8,1852
  806a2c:	dfc00b17 	ldw	ra,44(sp)
  806a30:	df000a17 	ldw	fp,40(sp)
  806a34:	dc000917 	ldw	r16,36(sp)
  806a38:	dc400817 	ldw	r17,32(sp)
  806a3c:	dc800717 	ldw	r18,28(sp)
  806a40:	dcc00617 	ldw	r19,24(sp)
  806a44:	dd000517 	ldw	r20,20(sp)
  806a48:	dd400417 	ldw	r21,16(sp)
  806a4c:	dd800317 	ldw	r22,12(sp)
  806a50:	ddc00217 	ldw	r23,8(sp)
  806a54:	dec00c04 	addi	sp,sp,48
  806a58:	4000683a 	jmp	r8
  806a5c:	21400217 	ldw	r5,8(r4)
  806a60:	21000317 	ldw	r4,12(r4)
  806a64:	b821883a 	mov	r16,r23
  806a68:	49bfff04 	addi	r6,r9,-4
  806a6c:	21400215 	stw	r5,8(r4)
  806a70:	29000315 	stw	r4,12(r5)
  806a74:	b9000317 	ldw	r4,12(r23)
  806a78:	b9400217 	ldw	r5,8(r23)
  806a7c:	1025883a 	mov	r18,r2
  806a80:	21400215 	stw	r5,8(r4)
  806a84:	29000315 	stw	r4,12(r5)
  806a88:	00800904 	movi	r2,36
  806a8c:	85400204 	addi	r21,r16,8
  806a90:	1180a036 	bltu	r2,r6,806d14 <_realloc_r+0x50c>
  806a94:	008004c4 	movi	r2,19
  806a98:	880f883a 	mov	r7,r17
  806a9c:	a809883a 	mov	r4,r21
  806aa0:	1180162e 	bgeu	r2,r6,806afc <_realloc_r+0x2f4>
  806aa4:	88800017 	ldw	r2,0(r17)
  806aa8:	89c00204 	addi	r7,r17,8
  806aac:	81000404 	addi	r4,r16,16
  806ab0:	a8800015 	stw	r2,0(r21)
  806ab4:	88c00117 	ldw	r3,4(r17)
  806ab8:	008006c4 	movi	r2,27
  806abc:	80c00315 	stw	r3,12(r16)
  806ac0:	11800e2e 	bgeu	r2,r6,806afc <_realloc_r+0x2f4>
  806ac4:	38800017 	ldw	r2,0(r7)
  806ac8:	89c00404 	addi	r7,r17,16
  806acc:	20800015 	stw	r2,0(r4)
  806ad0:	88c00317 	ldw	r3,12(r17)
  806ad4:	008008c4 	movi	r2,35
  806ad8:	81000604 	addi	r4,r16,24
  806adc:	80c00515 	stw	r3,20(r16)
  806ae0:	1180062e 	bgeu	r2,r6,806afc <_realloc_r+0x2f4>
  806ae4:	38800017 	ldw	r2,0(r7)
  806ae8:	89c00604 	addi	r7,r17,24
  806aec:	20800015 	stw	r2,0(r4)
  806af0:	88c00517 	ldw	r3,20(r17)
  806af4:	81000804 	addi	r4,r16,32
  806af8:	80c00715 	stw	r3,28(r16)
  806afc:	38800017 	ldw	r2,0(r7)
  806b00:	39c00104 	addi	r7,r7,4
  806b04:	20800015 	stw	r2,0(r4)
  806b08:	38c00017 	ldw	r3,0(r7)
  806b0c:	21000104 	addi	r4,r4,4
  806b10:	20c00015 	stw	r3,0(r4)
  806b14:	38800117 	ldw	r2,4(r7)
  806b18:	20800115 	stw	r2,4(r4)
  806b1c:	950dc83a 	sub	r6,r18,r20
  806b20:	008003c4 	movi	r2,15
  806b24:	11800c36 	bltu	r2,r6,806b58 <_realloc_r+0x350>
  806b28:	80800117 	ldw	r2,4(r16)
  806b2c:	8489883a 	add	r4,r16,r18
  806b30:	1080004c 	andi	r2,r2,1
  806b34:	1484b03a 	or	r2,r2,r18
  806b38:	80800115 	stw	r2,4(r16)
  806b3c:	20c00117 	ldw	r3,4(r4)
  806b40:	18c00054 	ori	r3,r3,1
  806b44:	20c00115 	stw	r3,4(r4)
  806b48:	b009883a 	mov	r4,r22
  806b4c:	0809aa80 	call	809aa8 <__malloc_unlock>
  806b50:	80800204 	addi	r2,r16,8
  806b54:	003fa606 	br	8069f0 <_realloc_r+0x1e8>
  806b58:	80800117 	ldw	r2,4(r16)
  806b5c:	850b883a 	add	r5,r16,r20
  806b60:	31000054 	ori	r4,r6,1
  806b64:	1080004c 	andi	r2,r2,1
  806b68:	1504b03a 	or	r2,r2,r20
  806b6c:	80800115 	stw	r2,4(r16)
  806b70:	29000115 	stw	r4,4(r5)
  806b74:	2987883a 	add	r3,r5,r6
  806b78:	18800117 	ldw	r2,4(r3)
  806b7c:	29400204 	addi	r5,r5,8
  806b80:	b009883a 	mov	r4,r22
  806b84:	10800054 	ori	r2,r2,1
  806b88:	18800115 	stw	r2,4(r3)
  806b8c:	0804c500 	call	804c50 <_free_r>
  806b90:	003fed06 	br	806b48 <_realloc_r+0x340>
  806b94:	0009883a 	mov	r4,zero
  806b98:	000f883a 	mov	r7,zero
  806b9c:	003f4906 	br	8068c4 <_realloc_r+0xbc>
  806ba0:	21c00117 	ldw	r7,4(r4)
  806ba4:	003f4206 	br	8068b0 <_realloc_r+0xa8>
  806ba8:	a809883a 	mov	r4,r21
  806bac:	880b883a 	mov	r5,r17
  806bb0:	080563c0 	call	80563c <memcpy>
  806bb4:	003f8306 	br	8069c4 <_realloc_r+0x1bc>
  806bb8:	21400217 	ldw	r5,8(r4)
  806bbc:	21000317 	ldw	r4,12(r4)
  806bc0:	1025883a 	mov	r18,r2
  806bc4:	21400215 	stw	r5,8(r4)
  806bc8:	29000315 	stw	r4,12(r5)
  806bcc:	003fd306 	br	806b1c <_realloc_r+0x314>
  806bd0:	3c87883a 	add	r3,r7,r18
  806bd4:	a0800404 	addi	r2,r20,16
  806bd8:	18bf3a16 	blt	r3,r2,8068c4 <_realloc_r+0xbc>
  806bdc:	1d05c83a 	sub	r2,r3,r20
  806be0:	850b883a 	add	r5,r16,r20
  806be4:	10800054 	ori	r2,r2,1
  806be8:	28800115 	stw	r2,4(r5)
  806bec:	80c00117 	ldw	r3,4(r16)
  806bf0:	51400215 	stw	r5,8(r10)
  806bf4:	b009883a 	mov	r4,r22
  806bf8:	18c0004c 	andi	r3,r3,1
  806bfc:	1d0ab03a 	or	r5,r3,r20
  806c00:	81400115 	stw	r5,4(r16)
  806c04:	003fd106 	br	806b4c <_realloc_r+0x344>
  806c08:	b9000317 	ldw	r4,12(r23)
  806c0c:	b9400217 	ldw	r5,8(r23)
  806c10:	b821883a 	mov	r16,r23
  806c14:	49bfff04 	addi	r6,r9,-4
  806c18:	1825883a 	mov	r18,r3
  806c1c:	21400215 	stw	r5,8(r4)
  806c20:	29000315 	stw	r4,12(r5)
  806c24:	003f9806 	br	806a88 <_realloc_r+0x280>
  806c28:	3945883a 	add	r2,r7,r5
  806c2c:	1485883a 	add	r2,r2,r18
  806c30:	a0c00404 	addi	r3,r20,16
  806c34:	d8800015 	stw	r2,0(sp)
  806c38:	10ff2f16 	blt	r2,r3,8068f8 <_realloc_r+0xf0>
  806c3c:	b9000317 	ldw	r4,12(r23)
  806c40:	b9400217 	ldw	r5,8(r23)
  806c44:	49bfff04 	addi	r6,r9,-4
  806c48:	00800904 	movi	r2,36
  806c4c:	21400215 	stw	r5,8(r4)
  806c50:	29000315 	stw	r4,12(r5)
  806c54:	bd400204 	addi	r21,r23,8
  806c58:	11803836 	bltu	r2,r6,806d3c <_realloc_r+0x534>
  806c5c:	008004c4 	movi	r2,19
  806c60:	880f883a 	mov	r7,r17
  806c64:	a809883a 	mov	r4,r21
  806c68:	1180162e 	bgeu	r2,r6,806cc4 <_realloc_r+0x4bc>
  806c6c:	88800017 	ldw	r2,0(r17)
  806c70:	89c00204 	addi	r7,r17,8
  806c74:	b9000404 	addi	r4,r23,16
  806c78:	a8800015 	stw	r2,0(r21)
  806c7c:	88c00117 	ldw	r3,4(r17)
  806c80:	008006c4 	movi	r2,27
  806c84:	b8c00315 	stw	r3,12(r23)
  806c88:	11800e2e 	bgeu	r2,r6,806cc4 <_realloc_r+0x4bc>
  806c8c:	38800017 	ldw	r2,0(r7)
  806c90:	89c00404 	addi	r7,r17,16
  806c94:	20800015 	stw	r2,0(r4)
  806c98:	88c00317 	ldw	r3,12(r17)
  806c9c:	008008c4 	movi	r2,35
  806ca0:	b9000604 	addi	r4,r23,24
  806ca4:	b8c00515 	stw	r3,20(r23)
  806ca8:	1180062e 	bgeu	r2,r6,806cc4 <_realloc_r+0x4bc>
  806cac:	38800017 	ldw	r2,0(r7)
  806cb0:	89c00604 	addi	r7,r17,24
  806cb4:	20800015 	stw	r2,0(r4)
  806cb8:	88c00517 	ldw	r3,20(r17)
  806cbc:	b9000804 	addi	r4,r23,32
  806cc0:	b8c00715 	stw	r3,28(r23)
  806cc4:	38800017 	ldw	r2,0(r7)
  806cc8:	39c00104 	addi	r7,r7,4
  806ccc:	20800015 	stw	r2,0(r4)
  806cd0:	38c00017 	ldw	r3,0(r7)
  806cd4:	21000104 	addi	r4,r4,4
  806cd8:	20c00015 	stw	r3,0(r4)
  806cdc:	38800117 	ldw	r2,4(r7)
  806ce0:	20800115 	stw	r2,4(r4)
  806ce4:	d8c00017 	ldw	r3,0(sp)
  806ce8:	bd0b883a 	add	r5,r23,r20
  806cec:	b009883a 	mov	r4,r22
  806cf0:	1d05c83a 	sub	r2,r3,r20
  806cf4:	10800054 	ori	r2,r2,1
  806cf8:	28800115 	stw	r2,4(r5)
  806cfc:	b8c00117 	ldw	r3,4(r23)
  806d00:	e1400215 	stw	r5,8(fp)
  806d04:	18c0004c 	andi	r3,r3,1
  806d08:	1d06b03a 	or	r3,r3,r20
  806d0c:	b8c00115 	stw	r3,4(r23)
  806d10:	003f3006 	br	8069d4 <_realloc_r+0x1cc>
  806d14:	a809883a 	mov	r4,r21
  806d18:	880b883a 	mov	r5,r17
  806d1c:	080563c0 	call	80563c <memcpy>
  806d20:	003f7e06 	br	806b1c <_realloc_r+0x314>
  806d24:	80800117 	ldw	r2,4(r16)
  806d28:	00ffff04 	movi	r3,-4
  806d2c:	9821883a 	mov	r16,r19
  806d30:	10c4703a 	and	r2,r2,r3
  806d34:	90a5883a 	add	r18,r18,r2
  806d38:	003f7806 	br	806b1c <_realloc_r+0x314>
  806d3c:	880b883a 	mov	r5,r17
  806d40:	a809883a 	mov	r4,r21
  806d44:	080563c0 	call	80563c <memcpy>
  806d48:	003fe606 	br	806ce4 <_realloc_r+0x4dc>
  806d4c:	b009883a 	mov	r4,r22
  806d50:	0809aa80 	call	809aa8 <__malloc_unlock>
  806d54:	003f2506 	br	8069ec <_realloc_r+0x1e4>

00806d58 <isinf>:
  806d58:	200d883a 	mov	r6,r4
  806d5c:	0109c83a 	sub	r4,zero,r4
  806d60:	2188b03a 	or	r4,r4,r6
  806d64:	2008d7fa 	srli	r4,r4,31
  806d68:	00a00034 	movhi	r2,32768
  806d6c:	10bfffc4 	addi	r2,r2,-1
  806d70:	288a703a 	and	r5,r5,r2
  806d74:	290ab03a 	or	r5,r5,r4
  806d78:	009ffc34 	movhi	r2,32752
  806d7c:	10800004 	addi	r2,r2,0
  806d80:	114bc83a 	sub	r5,r2,r5
  806d84:	0145c83a 	sub	r2,zero,r5
  806d88:	1144b03a 	or	r2,r2,r5
  806d8c:	1004d7fa 	srli	r2,r2,31
  806d90:	00c00044 	movi	r3,1
  806d94:	1885c83a 	sub	r2,r3,r2
  806d98:	f800283a 	ret

00806d9c <isnan>:
  806d9c:	200d883a 	mov	r6,r4
  806da0:	0109c83a 	sub	r4,zero,r4
  806da4:	2188b03a 	or	r4,r4,r6
  806da8:	2008d7fa 	srli	r4,r4,31
  806dac:	00e00034 	movhi	r3,32768
  806db0:	18ffffc4 	addi	r3,r3,-1
  806db4:	28c4703a 	and	r2,r5,r3
  806db8:	1104b03a 	or	r2,r2,r4
  806dbc:	00dffc34 	movhi	r3,32752
  806dc0:	18c00004 	addi	r3,r3,0
  806dc4:	1885c83a 	sub	r2,r3,r2
  806dc8:	1004d7fa 	srli	r2,r2,31
  806dcc:	f800283a 	ret

00806dd0 <__sread>:
  806dd0:	defffe04 	addi	sp,sp,-8
  806dd4:	dc000015 	stw	r16,0(sp)
  806dd8:	dfc00115 	stw	ra,4(sp)
  806ddc:	2021883a 	mov	r16,r4
  806de0:	2807883a 	mov	r3,r5
  806de4:	d1200a17 	ldw	r4,-32728(gp)
  806de8:	8140038f 	ldh	r5,14(r16)
  806dec:	300f883a 	mov	r7,r6
  806df0:	180d883a 	mov	r6,r3
  806df4:	08072a80 	call	8072a8 <_read_r>
  806df8:	1007883a 	mov	r3,r2
  806dfc:	10000816 	blt	r2,zero,806e20 <__sread+0x50>
  806e00:	80801417 	ldw	r2,80(r16)
  806e04:	10c5883a 	add	r2,r2,r3
  806e08:	80801415 	stw	r2,80(r16)
  806e0c:	1805883a 	mov	r2,r3
  806e10:	dfc00117 	ldw	ra,4(sp)
  806e14:	dc000017 	ldw	r16,0(sp)
  806e18:	dec00204 	addi	sp,sp,8
  806e1c:	f800283a 	ret
  806e20:	8080030b 	ldhu	r2,12(r16)
  806e24:	10bbffcc 	andi	r2,r2,61439
  806e28:	8080030d 	sth	r2,12(r16)
  806e2c:	1805883a 	mov	r2,r3
  806e30:	dfc00117 	ldw	ra,4(sp)
  806e34:	dc000017 	ldw	r16,0(sp)
  806e38:	dec00204 	addi	sp,sp,8
  806e3c:	f800283a 	ret

00806e40 <__swrite>:
  806e40:	defffc04 	addi	sp,sp,-16
  806e44:	dc000215 	stw	r16,8(sp)
  806e48:	dc400115 	stw	r17,4(sp)
  806e4c:	dc800015 	stw	r18,0(sp)
  806e50:	dfc00315 	stw	ra,12(sp)
  806e54:	20c0030b 	ldhu	r3,12(r4)
  806e58:	3025883a 	mov	r18,r6
  806e5c:	2021883a 	mov	r16,r4
  806e60:	1880400c 	andi	r2,r3,256
  806e64:	01c00084 	movi	r7,2
  806e68:	2823883a 	mov	r17,r5
  806e6c:	000d883a 	mov	r6,zero
  806e70:	10000e1e 	bne	r2,zero,806eac <__swrite+0x6c>
  806e74:	8140038f 	ldh	r5,14(r16)
  806e78:	d1200a17 	ldw	r4,-32728(gp)
  806e7c:	18bbffcc 	andi	r2,r3,61439
  806e80:	880d883a 	mov	r6,r17
  806e84:	900f883a 	mov	r7,r18
  806e88:	02002034 	movhi	r8,128
  806e8c:	421c1804 	addi	r8,r8,28768
  806e90:	8080030d 	sth	r2,12(r16)
  806e94:	dfc00317 	ldw	ra,12(sp)
  806e98:	dc000217 	ldw	r16,8(sp)
  806e9c:	dc400117 	ldw	r17,4(sp)
  806ea0:	dc800017 	ldw	r18,0(sp)
  806ea4:	dec00404 	addi	sp,sp,16
  806ea8:	4000683a 	jmp	r8
  806eac:	d1200a17 	ldw	r4,-32728(gp)
  806eb0:	8140038f 	ldh	r5,14(r16)
  806eb4:	08072440 	call	807244 <_lseek_r>
  806eb8:	80c0030b 	ldhu	r3,12(r16)
  806ebc:	003fed06 	br	806e74 <__swrite+0x34>

00806ec0 <__sseek>:
  806ec0:	defffe04 	addi	sp,sp,-8
  806ec4:	dc000015 	stw	r16,0(sp)
  806ec8:	dfc00115 	stw	ra,4(sp)
  806ecc:	2021883a 	mov	r16,r4
  806ed0:	2807883a 	mov	r3,r5
  806ed4:	d1200a17 	ldw	r4,-32728(gp)
  806ed8:	8140038f 	ldh	r5,14(r16)
  806edc:	300f883a 	mov	r7,r6
  806ee0:	180d883a 	mov	r6,r3
  806ee4:	08072440 	call	807244 <_lseek_r>
  806ee8:	1007883a 	mov	r3,r2
  806eec:	00bfffc4 	movi	r2,-1
  806ef0:	18800926 	beq	r3,r2,806f18 <__sseek+0x58>
  806ef4:	8080030b 	ldhu	r2,12(r16)
  806ef8:	80c01415 	stw	r3,80(r16)
  806efc:	10840014 	ori	r2,r2,4096
  806f00:	8080030d 	sth	r2,12(r16)
  806f04:	1805883a 	mov	r2,r3
  806f08:	dfc00117 	ldw	ra,4(sp)
  806f0c:	dc000017 	ldw	r16,0(sp)
  806f10:	dec00204 	addi	sp,sp,8
  806f14:	f800283a 	ret
  806f18:	8080030b 	ldhu	r2,12(r16)
  806f1c:	10bbffcc 	andi	r2,r2,61439
  806f20:	8080030d 	sth	r2,12(r16)
  806f24:	1805883a 	mov	r2,r3
  806f28:	dfc00117 	ldw	ra,4(sp)
  806f2c:	dc000017 	ldw	r16,0(sp)
  806f30:	dec00204 	addi	sp,sp,8
  806f34:	f800283a 	ret

00806f38 <__sclose>:
  806f38:	2140038f 	ldh	r5,14(r4)
  806f3c:	d1200a17 	ldw	r4,-32728(gp)
  806f40:	02002034 	movhi	r8,128
  806f44:	421c6204 	addi	r8,r8,29064
  806f48:	4000683a 	jmp	r8

00806f4c <strcmp>:
  806f4c:	2144b03a 	or	r2,r4,r5
  806f50:	108000cc 	andi	r2,r2,3
  806f54:	1000031e 	bne	r2,zero,806f64 <strcmp+0x18>
  806f58:	20c00017 	ldw	r3,0(r4)
  806f5c:	28800017 	ldw	r2,0(r5)
  806f60:	18801626 	beq	r3,r2,806fbc <strcmp+0x70>
  806f64:	20c00003 	ldbu	r3,0(r4)
  806f68:	19803fcc 	andi	r6,r3,255
  806f6c:	3180201c 	xori	r6,r6,128
  806f70:	31bfe004 	addi	r6,r6,-128
  806f74:	30000c26 	beq	r6,zero,806fa8 <strcmp+0x5c>
  806f78:	29c00003 	ldbu	r7,0(r5)
  806f7c:	38803fcc 	andi	r2,r7,255
  806f80:	1080201c 	xori	r2,r2,128
  806f84:	10bfe004 	addi	r2,r2,-128
  806f88:	3080081e 	bne	r6,r2,806fac <strcmp+0x60>
  806f8c:	21000044 	addi	r4,r4,1
  806f90:	20c00003 	ldbu	r3,0(r4)
  806f94:	29400044 	addi	r5,r5,1
  806f98:	19803fcc 	andi	r6,r3,255
  806f9c:	3180201c 	xori	r6,r6,128
  806fa0:	31bfe004 	addi	r6,r6,-128
  806fa4:	303ff41e 	bne	r6,zero,806f78 <strcmp+0x2c>
  806fa8:	29c00003 	ldbu	r7,0(r5)
  806fac:	18c03fcc 	andi	r3,r3,255
  806fb0:	38803fcc 	andi	r2,r7,255
  806fb4:	1885c83a 	sub	r2,r3,r2
  806fb8:	f800283a 	ret
  806fbc:	180d883a 	mov	r6,r3
  806fc0:	023fbff4 	movhi	r8,65279
  806fc4:	423fbfc4 	addi	r8,r8,-257
  806fc8:	01e02074 	movhi	r7,32897
  806fcc:	39e02004 	addi	r7,r7,-32640
  806fd0:	0186303a 	nor	r3,zero,r6
  806fd4:	3205883a 	add	r2,r6,r8
  806fd8:	10c4703a 	and	r2,r2,r3
  806fdc:	11c4703a 	and	r2,r2,r7
  806fe0:	21000104 	addi	r4,r4,4
  806fe4:	29400104 	addi	r5,r5,4
  806fe8:	1000041e 	bne	r2,zero,806ffc <strcmp+0xb0>
  806fec:	21800017 	ldw	r6,0(r4)
  806ff0:	28800017 	ldw	r2,0(r5)
  806ff4:	30bff626 	beq	r6,r2,806fd0 <strcmp+0x84>
  806ff8:	003fda06 	br	806f64 <strcmp+0x18>
  806ffc:	0005883a 	mov	r2,zero
  807000:	f800283a 	ret

00807004 <strlen>:
  807004:	208000cc 	andi	r2,r4,3
  807008:	200f883a 	mov	r7,r4
  80700c:	1000101e 	bne	r2,zero,807050 <strlen+0x4c>
  807010:	20800017 	ldw	r2,0(r4)
  807014:	01bfbff4 	movhi	r6,65279
  807018:	31bfbfc4 	addi	r6,r6,-257
  80701c:	01602074 	movhi	r5,32897
  807020:	29602004 	addi	r5,r5,-32640
  807024:	00000206 	br	807030 <strlen+0x2c>
  807028:	21000104 	addi	r4,r4,4
  80702c:	20800017 	ldw	r2,0(r4)
  807030:	0086303a 	nor	r3,zero,r2
  807034:	1185883a 	add	r2,r2,r6
  807038:	10c4703a 	and	r2,r2,r3
  80703c:	1144703a 	and	r2,r2,r5
  807040:	103ff926 	beq	r2,zero,807028 <strlen+0x24>
  807044:	20800007 	ldb	r2,0(r4)
  807048:	10000326 	beq	r2,zero,807058 <strlen+0x54>
  80704c:	21000044 	addi	r4,r4,1
  807050:	20800007 	ldb	r2,0(r4)
  807054:	103ffd1e 	bne	r2,zero,80704c <strlen+0x48>
  807058:	21c5c83a 	sub	r2,r4,r7
  80705c:	f800283a 	ret

00807060 <_write_r>:
  807060:	defffe04 	addi	sp,sp,-8
  807064:	dc000015 	stw	r16,0(sp)
  807068:	2021883a 	mov	r16,r4
  80706c:	2809883a 	mov	r4,r5
  807070:	300b883a 	mov	r5,r6
  807074:	380d883a 	mov	r6,r7
  807078:	dfc00115 	stw	ra,4(sp)
  80707c:	d0203015 	stw	zero,-32576(gp)
  807080:	0809d600 	call	809d60 <write>
  807084:	1007883a 	mov	r3,r2
  807088:	00bfffc4 	movi	r2,-1
  80708c:	18800526 	beq	r3,r2,8070a4 <_write_r+0x44>
  807090:	1805883a 	mov	r2,r3
  807094:	dfc00117 	ldw	ra,4(sp)
  807098:	dc000017 	ldw	r16,0(sp)
  80709c:	dec00204 	addi	sp,sp,8
  8070a0:	f800283a 	ret
  8070a4:	d0a03017 	ldw	r2,-32576(gp)
  8070a8:	103ff926 	beq	r2,zero,807090 <_write_r+0x30>
  8070ac:	80800015 	stw	r2,0(r16)
  8070b0:	1805883a 	mov	r2,r3
  8070b4:	dfc00117 	ldw	ra,4(sp)
  8070b8:	dc000017 	ldw	r16,0(sp)
  8070bc:	dec00204 	addi	sp,sp,8
  8070c0:	f800283a 	ret

008070c4 <_calloc_r>:
  8070c4:	defffe04 	addi	sp,sp,-8
  8070c8:	dc400015 	stw	r17,0(sp)
  8070cc:	2023883a 	mov	r17,r4
  8070d0:	2809883a 	mov	r4,r5
  8070d4:	300b883a 	mov	r5,r6
  8070d8:	dfc00115 	stw	ra,4(sp)
  8070dc:	08006ec0 	call	8006ec <__mulsi3>
  8070e0:	100b883a 	mov	r5,r2
  8070e4:	8809883a 	mov	r4,r17
  8070e8:	080073c0 	call	80073c <_malloc_r>
  8070ec:	1023883a 	mov	r17,r2
  8070f0:	0005883a 	mov	r2,zero
  8070f4:	88001e26 	beq	r17,zero,807170 <_calloc_r+0xac>
  8070f8:	88bfff17 	ldw	r2,-4(r17)
  8070fc:	00ffff04 	movi	r3,-4
  807100:	8809883a 	mov	r4,r17
  807104:	10c4703a 	and	r2,r2,r3
  807108:	10cf883a 	add	r7,r2,r3
  80710c:	00800904 	movi	r2,36
  807110:	380d883a 	mov	r6,r7
  807114:	000b883a 	mov	r5,zero
  807118:	11c01936 	bltu	r2,r7,807180 <_calloc_r+0xbc>
  80711c:	008004c4 	movi	r2,19
  807120:	8807883a 	mov	r3,r17
  807124:	11c00d2e 	bgeu	r2,r7,80715c <_calloc_r+0x98>
  807128:	008006c4 	movi	r2,27
  80712c:	88000015 	stw	zero,0(r17)
  807130:	88000115 	stw	zero,4(r17)
  807134:	88c00204 	addi	r3,r17,8
  807138:	11c0082e 	bgeu	r2,r7,80715c <_calloc_r+0x98>
  80713c:	18000015 	stw	zero,0(r3)
  807140:	008008c4 	movi	r2,35
  807144:	88c00404 	addi	r3,r17,16
  807148:	88000315 	stw	zero,12(r17)
  80714c:	11c0032e 	bgeu	r2,r7,80715c <_calloc_r+0x98>
  807150:	18000015 	stw	zero,0(r3)
  807154:	88000515 	stw	zero,20(r17)
  807158:	88c00604 	addi	r3,r17,24
  80715c:	18000015 	stw	zero,0(r3)
  807160:	18c00104 	addi	r3,r3,4
  807164:	18000115 	stw	zero,4(r3)
  807168:	18000015 	stw	zero,0(r3)
  80716c:	8805883a 	mov	r2,r17
  807170:	dfc00117 	ldw	ra,4(sp)
  807174:	dc400017 	ldw	r17,0(sp)
  807178:	dec00204 	addi	sp,sp,8
  80717c:	f800283a 	ret
  807180:	08058000 	call	805800 <memset>
  807184:	003ff906 	br	80716c <_calloc_r+0xa8>

00807188 <_close_r>:
  807188:	defffe04 	addi	sp,sp,-8
  80718c:	dc000015 	stw	r16,0(sp)
  807190:	2021883a 	mov	r16,r4
  807194:	2809883a 	mov	r4,r5
  807198:	dfc00115 	stw	ra,4(sp)
  80719c:	d0203015 	stw	zero,-32576(gp)
  8071a0:	08094700 	call	809470 <close>
  8071a4:	1007883a 	mov	r3,r2
  8071a8:	00bfffc4 	movi	r2,-1
  8071ac:	18800526 	beq	r3,r2,8071c4 <_close_r+0x3c>
  8071b0:	1805883a 	mov	r2,r3
  8071b4:	dfc00117 	ldw	ra,4(sp)
  8071b8:	dc000017 	ldw	r16,0(sp)
  8071bc:	dec00204 	addi	sp,sp,8
  8071c0:	f800283a 	ret
  8071c4:	d0a03017 	ldw	r2,-32576(gp)
  8071c8:	103ff926 	beq	r2,zero,8071b0 <_close_r+0x28>
  8071cc:	80800015 	stw	r2,0(r16)
  8071d0:	1805883a 	mov	r2,r3
  8071d4:	dfc00117 	ldw	ra,4(sp)
  8071d8:	dc000017 	ldw	r16,0(sp)
  8071dc:	dec00204 	addi	sp,sp,8
  8071e0:	f800283a 	ret

008071e4 <_fstat_r>:
  8071e4:	defffe04 	addi	sp,sp,-8
  8071e8:	dc000015 	stw	r16,0(sp)
  8071ec:	2021883a 	mov	r16,r4
  8071f0:	2809883a 	mov	r4,r5
  8071f4:	300b883a 	mov	r5,r6
  8071f8:	dfc00115 	stw	ra,4(sp)
  8071fc:	d0203015 	stw	zero,-32576(gp)
  807200:	08095dc0 	call	8095dc <fstat>
  807204:	1007883a 	mov	r3,r2
  807208:	00bfffc4 	movi	r2,-1
  80720c:	18800526 	beq	r3,r2,807224 <_fstat_r+0x40>
  807210:	1805883a 	mov	r2,r3
  807214:	dfc00117 	ldw	ra,4(sp)
  807218:	dc000017 	ldw	r16,0(sp)
  80721c:	dec00204 	addi	sp,sp,8
  807220:	f800283a 	ret
  807224:	d0a03017 	ldw	r2,-32576(gp)
  807228:	103ff926 	beq	r2,zero,807210 <_fstat_r+0x2c>
  80722c:	80800015 	stw	r2,0(r16)
  807230:	1805883a 	mov	r2,r3
  807234:	dfc00117 	ldw	ra,4(sp)
  807238:	dc000017 	ldw	r16,0(sp)
  80723c:	dec00204 	addi	sp,sp,8
  807240:	f800283a 	ret

00807244 <_lseek_r>:
  807244:	defffe04 	addi	sp,sp,-8
  807248:	dc000015 	stw	r16,0(sp)
  80724c:	2021883a 	mov	r16,r4
  807250:	2809883a 	mov	r4,r5
  807254:	300b883a 	mov	r5,r6
  807258:	380d883a 	mov	r6,r7
  80725c:	dfc00115 	stw	ra,4(sp)
  807260:	d0203015 	stw	zero,-32576(gp)
  807264:	08098e40 	call	8098e4 <lseek>
  807268:	1007883a 	mov	r3,r2
  80726c:	00bfffc4 	movi	r2,-1
  807270:	18800526 	beq	r3,r2,807288 <_lseek_r+0x44>
  807274:	1805883a 	mov	r2,r3
  807278:	dfc00117 	ldw	ra,4(sp)
  80727c:	dc000017 	ldw	r16,0(sp)
  807280:	dec00204 	addi	sp,sp,8
  807284:	f800283a 	ret
  807288:	d0a03017 	ldw	r2,-32576(gp)
  80728c:	103ff926 	beq	r2,zero,807274 <_lseek_r+0x30>
  807290:	80800015 	stw	r2,0(r16)
  807294:	1805883a 	mov	r2,r3
  807298:	dfc00117 	ldw	ra,4(sp)
  80729c:	dc000017 	ldw	r16,0(sp)
  8072a0:	dec00204 	addi	sp,sp,8
  8072a4:	f800283a 	ret

008072a8 <_read_r>:
  8072a8:	defffe04 	addi	sp,sp,-8
  8072ac:	dc000015 	stw	r16,0(sp)
  8072b0:	2021883a 	mov	r16,r4
  8072b4:	2809883a 	mov	r4,r5
  8072b8:	300b883a 	mov	r5,r6
  8072bc:	380d883a 	mov	r6,r7
  8072c0:	dfc00115 	stw	ra,4(sp)
  8072c4:	d0203015 	stw	zero,-32576(gp)
  8072c8:	0809ac40 	call	809ac4 <read>
  8072cc:	1007883a 	mov	r3,r2
  8072d0:	00bfffc4 	movi	r2,-1
  8072d4:	18800526 	beq	r3,r2,8072ec <_read_r+0x44>
  8072d8:	1805883a 	mov	r2,r3
  8072dc:	dfc00117 	ldw	ra,4(sp)
  8072e0:	dc000017 	ldw	r16,0(sp)
  8072e4:	dec00204 	addi	sp,sp,8
  8072e8:	f800283a 	ret
  8072ec:	d0a03017 	ldw	r2,-32576(gp)
  8072f0:	103ff926 	beq	r2,zero,8072d8 <_read_r+0x30>
  8072f4:	80800015 	stw	r2,0(r16)
  8072f8:	1805883a 	mov	r2,r3
  8072fc:	dfc00117 	ldw	ra,4(sp)
  807300:	dc000017 	ldw	r16,0(sp)
  807304:	dec00204 	addi	sp,sp,8
  807308:	f800283a 	ret

0080730c <__negdi2>:
  80730c:	280f883a 	mov	r7,r5
  807310:	010bc83a 	sub	r5,zero,r4
  807314:	2808c03a 	cmpne	r4,r5,zero
  807318:	01d3c83a 	sub	r9,zero,r7
  80731c:	4913c83a 	sub	r9,r9,r4
  807320:	2805883a 	mov	r2,r5
  807324:	4807883a 	mov	r3,r9
  807328:	f800283a 	ret

0080732c <__udivdi3>:
  80732c:	defff604 	addi	sp,sp,-40
  807330:	dc400615 	stw	r17,24(sp)
  807334:	dc800515 	stw	r18,20(sp)
  807338:	dd000315 	stw	r20,12(sp)
  80733c:	ddc00015 	stw	r23,0(sp)
  807340:	dfc00915 	stw	ra,36(sp)
  807344:	df000815 	stw	fp,32(sp)
  807348:	dc000715 	stw	r16,28(sp)
  80734c:	dcc00415 	stw	r19,16(sp)
  807350:	dd400215 	stw	r21,8(sp)
  807354:	dd800115 	stw	r22,4(sp)
  807358:	3019883a 	mov	r12,r6
  80735c:	3823883a 	mov	r17,r7
  807360:	202f883a 	mov	r23,r4
  807364:	2825883a 	mov	r18,r5
  807368:	3029883a 	mov	r20,r6
  80736c:	3800471e 	bne	r7,zero,80748c <__udivdi3+0x160>
  807370:	29806c2e 	bgeu	r5,r6,807524 <__udivdi3+0x1f8>
  807374:	00bfffd4 	movui	r2,65535
  807378:	1181202e 	bgeu	r2,r6,8077fc <__udivdi3+0x4d0>
  80737c:	00804034 	movhi	r2,256
  807380:	10bfffc4 	addi	r2,r2,-1
  807384:	01c00404 	movi	r7,16
  807388:	1180012e 	bgeu	r2,r6,807390 <__udivdi3+0x64>
  80738c:	01c00604 	movi	r7,24
  807390:	61c4d83a 	srl	r2,r12,r7
  807394:	01002074 	movhi	r4,129
  807398:	21012a04 	addi	r4,r4,1192
  80739c:	01400804 	movi	r5,32
  8073a0:	1105883a 	add	r2,r2,r4
  8073a4:	10c00003 	ldbu	r3,0(r2)
  8073a8:	19c7883a 	add	r3,r3,r7
  8073ac:	28cfc83a 	sub	r7,r5,r3
  8073b0:	38000626 	beq	r7,zero,8073cc <__udivdi3+0xa0>
  8073b4:	29c5c83a 	sub	r2,r5,r7
  8073b8:	b884d83a 	srl	r2,r23,r2
  8073bc:	91c6983a 	sll	r3,r18,r7
  8073c0:	b9ee983a 	sll	r23,r23,r7
  8073c4:	a1e8983a 	sll	r20,r20,r7
  8073c8:	18a4b03a 	or	r18,r3,r2
  8073cc:	a020d43a 	srli	r16,r20,16
  8073d0:	9009883a 	mov	r4,r18
  8073d4:	a57fffcc 	andi	r21,r20,65535
  8073d8:	800b883a 	mov	r5,r16
  8073dc:	08006dc0 	call	8006dc <__umodsi3>
  8073e0:	9009883a 	mov	r4,r18
  8073e4:	800b883a 	mov	r5,r16
  8073e8:	1023883a 	mov	r17,r2
  8073ec:	08006cc0 	call	8006cc <__udivsi3>
  8073f0:	1009883a 	mov	r4,r2
  8073f4:	a80b883a 	mov	r5,r21
  8073f8:	1025883a 	mov	r18,r2
  8073fc:	08006ec0 	call	8006ec <__mulsi3>
  807400:	1009883a 	mov	r4,r2
  807404:	8806943a 	slli	r3,r17,16
  807408:	b804d43a 	srli	r2,r23,16
  80740c:	18a2b03a 	or	r17,r3,r2
  807410:	8900042e 	bgeu	r17,r4,807424 <__udivdi3+0xf8>
  807414:	8d23883a 	add	r17,r17,r20
  807418:	94bfffc4 	addi	r18,r18,-1
  80741c:	8d000136 	bltu	r17,r20,807424 <__udivdi3+0xf8>
  807420:	89013836 	bltu	r17,r4,807904 <__udivdi3+0x5d8>
  807424:	8923c83a 	sub	r17,r17,r4
  807428:	800b883a 	mov	r5,r16
  80742c:	8809883a 	mov	r4,r17
  807430:	08006dc0 	call	8006dc <__umodsi3>
  807434:	800b883a 	mov	r5,r16
  807438:	8809883a 	mov	r4,r17
  80743c:	1027883a 	mov	r19,r2
  807440:	08006cc0 	call	8006cc <__udivsi3>
  807444:	1009883a 	mov	r4,r2
  807448:	a80b883a 	mov	r5,r21
  80744c:	1021883a 	mov	r16,r2
  807450:	08006ec0 	call	8006ec <__mulsi3>
  807454:	9806943a 	slli	r3,r19,16
  807458:	1009883a 	mov	r4,r2
  80745c:	b8bfffcc 	andi	r2,r23,65535
  807460:	18a6b03a 	or	r19,r3,r2
  807464:	9900052e 	bgeu	r19,r4,80747c <__udivdi3+0x150>
  807468:	9d27883a 	add	r19,r19,r20
  80746c:	843fffc4 	addi	r16,r16,-1
  807470:	9d000236 	bltu	r19,r20,80747c <__udivdi3+0x150>
  807474:	9900012e 	bgeu	r19,r4,80747c <__udivdi3+0x150>
  807478:	843fffc4 	addi	r16,r16,-1
  80747c:	9004943a 	slli	r2,r18,16
  807480:	002b883a 	mov	r21,zero
  807484:	1424b03a 	or	r18,r2,r16
  807488:	00000306 	br	807498 <__udivdi3+0x16c>
  80748c:	29c0102e 	bgeu	r5,r7,8074d0 <__udivdi3+0x1a4>
  807490:	0025883a 	mov	r18,zero
  807494:	002b883a 	mov	r21,zero
  807498:	9005883a 	mov	r2,r18
  80749c:	a807883a 	mov	r3,r21
  8074a0:	dfc00917 	ldw	ra,36(sp)
  8074a4:	df000817 	ldw	fp,32(sp)
  8074a8:	dc000717 	ldw	r16,28(sp)
  8074ac:	dc400617 	ldw	r17,24(sp)
  8074b0:	dc800517 	ldw	r18,20(sp)
  8074b4:	dcc00417 	ldw	r19,16(sp)
  8074b8:	dd000317 	ldw	r20,12(sp)
  8074bc:	dd400217 	ldw	r21,8(sp)
  8074c0:	dd800117 	ldw	r22,4(sp)
  8074c4:	ddc00017 	ldw	r23,0(sp)
  8074c8:	dec00a04 	addi	sp,sp,40
  8074cc:	f800283a 	ret
  8074d0:	00bfffd4 	movui	r2,65535
  8074d4:	11c05f2e 	bgeu	r2,r7,807654 <__udivdi3+0x328>
  8074d8:	00804034 	movhi	r2,256
  8074dc:	10bfffc4 	addi	r2,r2,-1
  8074e0:	01400404 	movi	r5,16
  8074e4:	11c0012e 	bgeu	r2,r7,8074ec <__udivdi3+0x1c0>
  8074e8:	01400604 	movi	r5,24
  8074ec:	8944d83a 	srl	r2,r17,r5
  8074f0:	01002074 	movhi	r4,129
  8074f4:	21012a04 	addi	r4,r4,1192
  8074f8:	01800804 	movi	r6,32
  8074fc:	1105883a 	add	r2,r2,r4
  807500:	10c00003 	ldbu	r3,0(r2)
  807504:	1947883a 	add	r3,r3,r5
  807508:	30cfc83a 	sub	r7,r6,r3
  80750c:	38005d1e 	bne	r7,zero,807684 <__udivdi3+0x358>
  807510:	8c800236 	bltu	r17,r18,80751c <__udivdi3+0x1f0>
  807514:	0025883a 	mov	r18,zero
  807518:	bd3fde36 	bltu	r23,r20,807494 <__udivdi3+0x168>
  80751c:	04800044 	movi	r18,1
  807520:	003fdc06 	br	807494 <__udivdi3+0x168>
  807524:	30003f26 	beq	r6,zero,807624 <__udivdi3+0x2f8>
  807528:	00bfffd4 	movui	r2,65535
  80752c:	15004336 	bltu	r2,r20,80763c <__udivdi3+0x310>
  807530:	00803fc4 	movi	r2,255
  807534:	150b803a 	cmpltu	r5,r2,r20
  807538:	280a90fa 	slli	r5,r5,3
  80753c:	a144d83a 	srl	r2,r20,r5
  807540:	01002074 	movhi	r4,129
  807544:	21012a04 	addi	r4,r4,1192
  807548:	01800804 	movi	r6,32
  80754c:	1105883a 	add	r2,r2,r4
  807550:	10c00003 	ldbu	r3,0(r2)
  807554:	1947883a 	add	r3,r3,r5
  807558:	30cfc83a 	sub	r7,r6,r3
  80755c:	3800ab1e 	bne	r7,zero,80780c <__udivdi3+0x4e0>
  807560:	a02cd43a 	srli	r22,r20,16
  807564:	9525c83a 	sub	r18,r18,r20
  807568:	05400044 	movi	r21,1
  80756c:	a73fffcc 	andi	fp,r20,65535
  807570:	9009883a 	mov	r4,r18
  807574:	b00b883a 	mov	r5,r22
  807578:	08006dc0 	call	8006dc <__umodsi3>
  80757c:	9009883a 	mov	r4,r18
  807580:	b00b883a 	mov	r5,r22
  807584:	1023883a 	mov	r17,r2
  807588:	08006cc0 	call	8006cc <__udivsi3>
  80758c:	1009883a 	mov	r4,r2
  807590:	e00b883a 	mov	r5,fp
  807594:	1025883a 	mov	r18,r2
  807598:	08006ec0 	call	8006ec <__mulsi3>
  80759c:	1009883a 	mov	r4,r2
  8075a0:	8806943a 	slli	r3,r17,16
  8075a4:	b804d43a 	srli	r2,r23,16
  8075a8:	18a2b03a 	or	r17,r3,r2
  8075ac:	8900042e 	bgeu	r17,r4,8075c0 <__udivdi3+0x294>
  8075b0:	8d23883a 	add	r17,r17,r20
  8075b4:	94bfffc4 	addi	r18,r18,-1
  8075b8:	8d000136 	bltu	r17,r20,8075c0 <__udivdi3+0x294>
  8075bc:	8900d436 	bltu	r17,r4,807910 <__udivdi3+0x5e4>
  8075c0:	8923c83a 	sub	r17,r17,r4
  8075c4:	8809883a 	mov	r4,r17
  8075c8:	b00b883a 	mov	r5,r22
  8075cc:	08006dc0 	call	8006dc <__umodsi3>
  8075d0:	8809883a 	mov	r4,r17
  8075d4:	b00b883a 	mov	r5,r22
  8075d8:	1027883a 	mov	r19,r2
  8075dc:	08006cc0 	call	8006cc <__udivsi3>
  8075e0:	1009883a 	mov	r4,r2
  8075e4:	e00b883a 	mov	r5,fp
  8075e8:	1021883a 	mov	r16,r2
  8075ec:	08006ec0 	call	8006ec <__mulsi3>
  8075f0:	9806943a 	slli	r3,r19,16
  8075f4:	1009883a 	mov	r4,r2
  8075f8:	b8bfffcc 	andi	r2,r23,65535
  8075fc:	18a6b03a 	or	r19,r3,r2
  807600:	9900052e 	bgeu	r19,r4,807618 <__udivdi3+0x2ec>
  807604:	9d27883a 	add	r19,r19,r20
  807608:	843fffc4 	addi	r16,r16,-1
  80760c:	9d000236 	bltu	r19,r20,807618 <__udivdi3+0x2ec>
  807610:	9900012e 	bgeu	r19,r4,807618 <__udivdi3+0x2ec>
  807614:	843fffc4 	addi	r16,r16,-1
  807618:	9004943a 	slli	r2,r18,16
  80761c:	1424b03a 	or	r18,r2,r16
  807620:	003f9d06 	br	807498 <__udivdi3+0x16c>
  807624:	01000044 	movi	r4,1
  807628:	000b883a 	mov	r5,zero
  80762c:	08006cc0 	call	8006cc <__udivsi3>
  807630:	1029883a 	mov	r20,r2
  807634:	00bfffd4 	movui	r2,65535
  807638:	153fbd2e 	bgeu	r2,r20,807530 <__udivdi3+0x204>
  80763c:	00804034 	movhi	r2,256
  807640:	10bfffc4 	addi	r2,r2,-1
  807644:	01400404 	movi	r5,16
  807648:	153fbc2e 	bgeu	r2,r20,80753c <__udivdi3+0x210>
  80764c:	01400604 	movi	r5,24
  807650:	003fba06 	br	80753c <__udivdi3+0x210>
  807654:	00803fc4 	movi	r2,255
  807658:	11cb803a 	cmpltu	r5,r2,r7
  80765c:	280a90fa 	slli	r5,r5,3
  807660:	01002074 	movhi	r4,129
  807664:	21012a04 	addi	r4,r4,1192
  807668:	01800804 	movi	r6,32
  80766c:	8944d83a 	srl	r2,r17,r5
  807670:	1105883a 	add	r2,r2,r4
  807674:	10c00003 	ldbu	r3,0(r2)
  807678:	1947883a 	add	r3,r3,r5
  80767c:	30cfc83a 	sub	r7,r6,r3
  807680:	383fa326 	beq	r7,zero,807510 <__udivdi3+0x1e4>
  807684:	31c9c83a 	sub	r4,r6,r7
  807688:	89c6983a 	sll	r3,r17,r7
  80768c:	a104d83a 	srl	r2,r20,r4
  807690:	9126d83a 	srl	r19,r18,r4
  807694:	b90cd83a 	srl	r6,r23,r4
  807698:	18a2b03a 	or	r17,r3,r2
  80769c:	882ad43a 	srli	r21,r17,16
  8076a0:	91c4983a 	sll	r2,r18,r7
  8076a4:	9809883a 	mov	r4,r19
  8076a8:	a80b883a 	mov	r5,r21
  8076ac:	11a4b03a 	or	r18,r2,r6
  8076b0:	b9ee983a 	sll	r23,r23,r7
  8076b4:	a1e8983a 	sll	r20,r20,r7
  8076b8:	08006dc0 	call	8006dc <__umodsi3>
  8076bc:	9809883a 	mov	r4,r19
  8076c0:	a80b883a 	mov	r5,r21
  8076c4:	1021883a 	mov	r16,r2
  8076c8:	8f3fffcc 	andi	fp,r17,65535
  8076cc:	08006cc0 	call	8006cc <__udivsi3>
  8076d0:	1009883a 	mov	r4,r2
  8076d4:	e00b883a 	mov	r5,fp
  8076d8:	1027883a 	mov	r19,r2
  8076dc:	08006ec0 	call	8006ec <__mulsi3>
  8076e0:	100d883a 	mov	r6,r2
  8076e4:	8006943a 	slli	r3,r16,16
  8076e8:	9004d43a 	srli	r2,r18,16
  8076ec:	18a0b03a 	or	r16,r3,r2
  8076f0:	8180062e 	bgeu	r16,r6,80770c <__udivdi3+0x3e0>
  8076f4:	8461883a 	add	r16,r16,r17
  8076f8:	9cffffc4 	addi	r19,r19,-1
  8076fc:	84400336 	bltu	r16,r17,80770c <__udivdi3+0x3e0>
  807700:	8180022e 	bgeu	r16,r6,80770c <__udivdi3+0x3e0>
  807704:	9cffffc4 	addi	r19,r19,-1
  807708:	8461883a 	add	r16,r16,r17
  80770c:	81a1c83a 	sub	r16,r16,r6
  807710:	8009883a 	mov	r4,r16
  807714:	a80b883a 	mov	r5,r21
  807718:	08006dc0 	call	8006dc <__umodsi3>
  80771c:	8009883a 	mov	r4,r16
  807720:	a80b883a 	mov	r5,r21
  807724:	102d883a 	mov	r22,r2
  807728:	08006cc0 	call	8006cc <__udivsi3>
  80772c:	1009883a 	mov	r4,r2
  807730:	e00b883a 	mov	r5,fp
  807734:	1021883a 	mov	r16,r2
  807738:	08006ec0 	call	8006ec <__mulsi3>
  80773c:	b006943a 	slli	r3,r22,16
  807740:	100d883a 	mov	r6,r2
  807744:	90bfffcc 	andi	r2,r18,65535
  807748:	18acb03a 	or	r22,r3,r2
  80774c:	b180032e 	bgeu	r22,r6,80775c <__udivdi3+0x430>
  807750:	b46d883a 	add	r22,r22,r17
  807754:	843fffc4 	addi	r16,r16,-1
  807758:	b440662e 	bgeu	r22,r17,8078f4 <__udivdi3+0x5c8>
  80775c:	9804943a 	slli	r2,r19,16
  807760:	a4ffffcc 	andi	r19,r20,65535
  807764:	a02ad43a 	srli	r21,r20,16
  807768:	1424b03a 	or	r18,r2,r16
  80776c:	947fffcc 	andi	r17,r18,65535
  807770:	8809883a 	mov	r4,r17
  807774:	980b883a 	mov	r5,r19
  807778:	b1adc83a 	sub	r22,r22,r6
  80777c:	08006ec0 	call	8006ec <__mulsi3>
  807780:	8809883a 	mov	r4,r17
  807784:	9022d43a 	srli	r17,r18,16
  807788:	a80b883a 	mov	r5,r21
  80778c:	1029883a 	mov	r20,r2
  807790:	08006ec0 	call	8006ec <__mulsi3>
  807794:	980b883a 	mov	r5,r19
  807798:	8809883a 	mov	r4,r17
  80779c:	1021883a 	mov	r16,r2
  8077a0:	08006ec0 	call	8006ec <__mulsi3>
  8077a4:	a80b883a 	mov	r5,r21
  8077a8:	8809883a 	mov	r4,r17
  8077ac:	1027883a 	mov	r19,r2
  8077b0:	08006ec0 	call	8006ec <__mulsi3>
  8077b4:	100b883a 	mov	r5,r2
  8077b8:	a004d43a 	srli	r2,r20,16
  8077bc:	80a1883a 	add	r16,r16,r2
  8077c0:	84e1883a 	add	r16,r16,r19
  8077c4:	84c0032e 	bgeu	r16,r19,8077d4 <__udivdi3+0x4a8>
  8077c8:	00800074 	movhi	r2,1
  8077cc:	10800004 	addi	r2,r2,0
  8077d0:	288b883a 	add	r5,r5,r2
  8077d4:	8004d43a 	srli	r2,r16,16
  8077d8:	8008943a 	slli	r4,r16,16
  8077dc:	a0ffffcc 	andi	r3,r20,65535
  8077e0:	1145883a 	add	r2,r2,r5
  8077e4:	20c7883a 	add	r3,r4,r3
  8077e8:	b0800236 	bltu	r22,r2,8077f4 <__udivdi3+0x4c8>
  8077ec:	15bf291e 	bne	r2,r22,807494 <__udivdi3+0x168>
  8077f0:	b8ff282e 	bgeu	r23,r3,807494 <__udivdi3+0x168>
  8077f4:	94bfffc4 	addi	r18,r18,-1
  8077f8:	003f2606 	br	807494 <__udivdi3+0x168>
  8077fc:	00803fc4 	movi	r2,255
  807800:	118f803a 	cmpltu	r7,r2,r6
  807804:	380e90fa 	slli	r7,r7,3
  807808:	003ee106 	br	807390 <__udivdi3+0x64>
  80780c:	a1e8983a 	sll	r20,r20,r7
  807810:	31c9c83a 	sub	r4,r6,r7
  807814:	9126d83a 	srl	r19,r18,r4
  807818:	a02cd43a 	srli	r22,r20,16
  80781c:	b906d83a 	srl	r3,r23,r4
  807820:	91c4983a 	sll	r2,r18,r7
  807824:	9809883a 	mov	r4,r19
  807828:	b00b883a 	mov	r5,r22
  80782c:	10e4b03a 	or	r18,r2,r3
  807830:	b9ee983a 	sll	r23,r23,r7
  807834:	08006dc0 	call	8006dc <__umodsi3>
  807838:	9809883a 	mov	r4,r19
  80783c:	b00b883a 	mov	r5,r22
  807840:	1021883a 	mov	r16,r2
  807844:	a73fffcc 	andi	fp,r20,65535
  807848:	08006cc0 	call	8006cc <__udivsi3>
  80784c:	1009883a 	mov	r4,r2
  807850:	e00b883a 	mov	r5,fp
  807854:	1027883a 	mov	r19,r2
  807858:	08006ec0 	call	8006ec <__mulsi3>
  80785c:	1011883a 	mov	r8,r2
  807860:	8006943a 	slli	r3,r16,16
  807864:	9004d43a 	srli	r2,r18,16
  807868:	18a0b03a 	or	r16,r3,r2
  80786c:	8200062e 	bgeu	r16,r8,807888 <__udivdi3+0x55c>
  807870:	8521883a 	add	r16,r16,r20
  807874:	9cffffc4 	addi	r19,r19,-1
  807878:	85000336 	bltu	r16,r20,807888 <__udivdi3+0x55c>
  80787c:	8200022e 	bgeu	r16,r8,807888 <__udivdi3+0x55c>
  807880:	9cffffc4 	addi	r19,r19,-1
  807884:	8521883a 	add	r16,r16,r20
  807888:	8221c83a 	sub	r16,r16,r8
  80788c:	8009883a 	mov	r4,r16
  807890:	b00b883a 	mov	r5,r22
  807894:	08006dc0 	call	8006dc <__umodsi3>
  807898:	8009883a 	mov	r4,r16
  80789c:	b00b883a 	mov	r5,r22
  8078a0:	1023883a 	mov	r17,r2
  8078a4:	08006cc0 	call	8006cc <__udivsi3>
  8078a8:	1009883a 	mov	r4,r2
  8078ac:	e00b883a 	mov	r5,fp
  8078b0:	1021883a 	mov	r16,r2
  8078b4:	08006ec0 	call	8006ec <__mulsi3>
  8078b8:	8806943a 	slli	r3,r17,16
  8078bc:	1011883a 	mov	r8,r2
  8078c0:	90bfffcc 	andi	r2,r18,65535
  8078c4:	18a2b03a 	or	r17,r3,r2
  8078c8:	8a00062e 	bgeu	r17,r8,8078e4 <__udivdi3+0x5b8>
  8078cc:	8d23883a 	add	r17,r17,r20
  8078d0:	843fffc4 	addi	r16,r16,-1
  8078d4:	8d000336 	bltu	r17,r20,8078e4 <__udivdi3+0x5b8>
  8078d8:	8a00022e 	bgeu	r17,r8,8078e4 <__udivdi3+0x5b8>
  8078dc:	843fffc4 	addi	r16,r16,-1
  8078e0:	8d23883a 	add	r17,r17,r20
  8078e4:	9804943a 	slli	r2,r19,16
  8078e8:	8a25c83a 	sub	r18,r17,r8
  8078ec:	142ab03a 	or	r21,r2,r16
  8078f0:	003f1f06 	br	807570 <__udivdi3+0x244>
  8078f4:	b1bf992e 	bgeu	r22,r6,80775c <__udivdi3+0x430>
  8078f8:	b46d883a 	add	r22,r22,r17
  8078fc:	843fffc4 	addi	r16,r16,-1
  807900:	003f9606 	br	80775c <__udivdi3+0x430>
  807904:	94bfffc4 	addi	r18,r18,-1
  807908:	8d23883a 	add	r17,r17,r20
  80790c:	003ec506 	br	807424 <__udivdi3+0xf8>
  807910:	94bfffc4 	addi	r18,r18,-1
  807914:	8d23883a 	add	r17,r17,r20
  807918:	003f2906 	br	8075c0 <__udivdi3+0x294>

0080791c <__umoddi3>:
  80791c:	deffee04 	addi	sp,sp,-72
  807920:	2015883a 	mov	r10,r4
  807924:	0009883a 	mov	r4,zero
  807928:	df001015 	stw	fp,64(sp)
  80792c:	dc000f15 	stw	r16,60(sp)
  807930:	dd000b15 	stw	r20,44(sp)
  807934:	dd800915 	stw	r22,36(sp)
  807938:	dfc01115 	stw	ra,68(sp)
  80793c:	dc400e15 	stw	r17,56(sp)
  807940:	dc800d15 	stw	r18,52(sp)
  807944:	dcc00c15 	stw	r19,48(sp)
  807948:	dd400a15 	stw	r21,40(sp)
  80794c:	ddc00815 	stw	r23,32(sp)
  807950:	3019883a 	mov	r12,r6
  807954:	3829883a 	mov	r20,r7
  807958:	d9000215 	stw	r4,8(sp)
  80795c:	2821883a 	mov	r16,r5
  807960:	d9000315 	stw	r4,12(sp)
  807964:	302d883a 	mov	r22,r6
  807968:	5039883a 	mov	fp,r10
  80796c:	3800391e 	bne	r7,zero,807a54 <__umoddi3+0x138>
  807970:	2980662e 	bgeu	r5,r6,807b0c <__umoddi3+0x1f0>
  807974:	00bfffd4 	movui	r2,65535
  807978:	1180b72e 	bgeu	r2,r6,807c58 <__umoddi3+0x33c>
  80797c:	00804034 	movhi	r2,256
  807980:	10bfffc4 	addi	r2,r2,-1
  807984:	01c00404 	movi	r7,16
  807988:	1180012e 	bgeu	r2,r6,807990 <__umoddi3+0x74>
  80798c:	01c00604 	movi	r7,24
  807990:	61c4d83a 	srl	r2,r12,r7
  807994:	01002074 	movhi	r4,129
  807998:	21012a04 	addi	r4,r4,1192
  80799c:	01400804 	movi	r5,32
  8079a0:	1105883a 	add	r2,r2,r4
  8079a4:	10c00003 	ldbu	r3,0(r2)
  8079a8:	19c7883a 	add	r3,r3,r7
  8079ac:	28c7c83a 	sub	r3,r5,r3
  8079b0:	d8c00515 	stw	r3,20(sp)
  8079b4:	18000726 	beq	r3,zero,8079d4 <__umoddi3+0xb8>
  8079b8:	28c5c83a 	sub	r2,r5,r3
  8079bc:	d9400517 	ldw	r5,20(sp)
  8079c0:	e084d83a 	srl	r2,fp,r2
  8079c4:	80c6983a 	sll	r3,r16,r3
  8079c8:	b16c983a 	sll	r22,r22,r5
  8079cc:	e178983a 	sll	fp,fp,r5
  8079d0:	18a0b03a 	or	r16,r3,r2
  8079d4:	b024d43a 	srli	r18,r22,16
  8079d8:	8009883a 	mov	r4,r16
  8079dc:	b53fffcc 	andi	r20,r22,65535
  8079e0:	900b883a 	mov	r5,r18
  8079e4:	08006dc0 	call	8006dc <__umodsi3>
  8079e8:	8009883a 	mov	r4,r16
  8079ec:	900b883a 	mov	r5,r18
  8079f0:	1023883a 	mov	r17,r2
  8079f4:	08006cc0 	call	8006cc <__udivsi3>
  8079f8:	1009883a 	mov	r4,r2
  8079fc:	a00b883a 	mov	r5,r20
  807a00:	08006ec0 	call	8006ec <__mulsi3>
  807a04:	100b883a 	mov	r5,r2
  807a08:	8806943a 	slli	r3,r17,16
  807a0c:	e004d43a 	srli	r2,fp,16
  807a10:	18a2b03a 	or	r17,r3,r2
  807a14:	8940042e 	bgeu	r17,r5,807a28 <__umoddi3+0x10c>
  807a18:	8da3883a 	add	r17,r17,r22
  807a1c:	8d800236 	bltu	r17,r22,807a28 <__umoddi3+0x10c>
  807a20:	8940012e 	bgeu	r17,r5,807a28 <__umoddi3+0x10c>
  807a24:	8da3883a 	add	r17,r17,r22
  807a28:	8963c83a 	sub	r17,r17,r5
  807a2c:	8809883a 	mov	r4,r17
  807a30:	900b883a 	mov	r5,r18
  807a34:	08006dc0 	call	8006dc <__umodsi3>
  807a38:	8809883a 	mov	r4,r17
  807a3c:	900b883a 	mov	r5,r18
  807a40:	1027883a 	mov	r19,r2
  807a44:	08006cc0 	call	8006cc <__udivsi3>
  807a48:	1009883a 	mov	r4,r2
  807a4c:	a00b883a 	mov	r5,r20
  807a50:	00005d06 	br	807bc8 <__umoddi3+0x2ac>
  807a54:	29c0142e 	bgeu	r5,r7,807aa8 <__umoddi3+0x18c>
  807a58:	da800215 	stw	r10,8(sp)
  807a5c:	d9400315 	stw	r5,12(sp)
  807a60:	da800015 	stw	r10,0(sp)
  807a64:	d9400115 	stw	r5,4(sp)
  807a68:	d9000017 	ldw	r4,0(sp)
  807a6c:	d9400117 	ldw	r5,4(sp)
  807a70:	2005883a 	mov	r2,r4
  807a74:	2807883a 	mov	r3,r5
  807a78:	dfc01117 	ldw	ra,68(sp)
  807a7c:	df001017 	ldw	fp,64(sp)
  807a80:	dc000f17 	ldw	r16,60(sp)
  807a84:	dc400e17 	ldw	r17,56(sp)
  807a88:	dc800d17 	ldw	r18,52(sp)
  807a8c:	dcc00c17 	ldw	r19,48(sp)
  807a90:	dd000b17 	ldw	r20,44(sp)
  807a94:	dd400a17 	ldw	r21,40(sp)
  807a98:	dd800917 	ldw	r22,36(sp)
  807a9c:	ddc00817 	ldw	r23,32(sp)
  807aa0:	dec01204 	addi	sp,sp,72
  807aa4:	f800283a 	ret
  807aa8:	00bfffd4 	movui	r2,65535
  807aac:	11c0662e 	bgeu	r2,r7,807c48 <__umoddi3+0x32c>
  807ab0:	00804034 	movhi	r2,256
  807ab4:	10bfffc4 	addi	r2,r2,-1
  807ab8:	01400404 	movi	r5,16
  807abc:	11c0012e 	bgeu	r2,r7,807ac4 <__umoddi3+0x1a8>
  807ac0:	01400604 	movi	r5,24
  807ac4:	a144d83a 	srl	r2,r20,r5
  807ac8:	01002074 	movhi	r4,129
  807acc:	21012a04 	addi	r4,r4,1192
  807ad0:	01800804 	movi	r6,32
  807ad4:	1105883a 	add	r2,r2,r4
  807ad8:	10c00003 	ldbu	r3,0(r2)
  807adc:	1947883a 	add	r3,r3,r5
  807ae0:	30c7c83a 	sub	r3,r6,r3
  807ae4:	d8c00515 	stw	r3,20(sp)
  807ae8:	1800651e 	bne	r3,zero,807c80 <__umoddi3+0x364>
  807aec:	a4005e36 	bltu	r20,r16,807c68 <__umoddi3+0x34c>
  807af0:	e5805d2e 	bgeu	fp,r22,807c68 <__umoddi3+0x34c>
  807af4:	d83fdc26 	beq	sp,zero,807a68 <__umoddi3+0x14c>
  807af8:	df000215 	stw	fp,8(sp)
  807afc:	dc000315 	stw	r16,12(sp)
  807b00:	dc000115 	stw	r16,4(sp)
  807b04:	df000015 	stw	fp,0(sp)
  807b08:	003fd706 	br	807a68 <__umoddi3+0x14c>
  807b0c:	30004226 	beq	r6,zero,807c18 <__umoddi3+0x2fc>
  807b10:	00bfffd4 	movui	r2,65535
  807b14:	15804636 	bltu	r2,r22,807c30 <__umoddi3+0x314>
  807b18:	00803fc4 	movi	r2,255
  807b1c:	158b803a 	cmpltu	r5,r2,r22
  807b20:	280a90fa 	slli	r5,r5,3
  807b24:	b144d83a 	srl	r2,r22,r5
  807b28:	01002074 	movhi	r4,129
  807b2c:	21012a04 	addi	r4,r4,1192
  807b30:	01800804 	movi	r6,32
  807b34:	1105883a 	add	r2,r2,r4
  807b38:	10c00003 	ldbu	r3,0(r2)
  807b3c:	1947883a 	add	r3,r3,r5
  807b40:	30c7c83a 	sub	r3,r6,r3
  807b44:	d8c00515 	stw	r3,20(sp)
  807b48:	1800c61e 	bne	r3,zero,807e64 <__umoddi3+0x548>
  807b4c:	b028d43a 	srli	r20,r22,16
  807b50:	85a1c83a 	sub	r16,r16,r22
  807b54:	b57fffcc 	andi	r21,r22,65535
  807b58:	8009883a 	mov	r4,r16
  807b5c:	a00b883a 	mov	r5,r20
  807b60:	08006dc0 	call	8006dc <__umodsi3>
  807b64:	8009883a 	mov	r4,r16
  807b68:	a00b883a 	mov	r5,r20
  807b6c:	1023883a 	mov	r17,r2
  807b70:	08006cc0 	call	8006cc <__udivsi3>
  807b74:	1009883a 	mov	r4,r2
  807b78:	a80b883a 	mov	r5,r21
  807b7c:	08006ec0 	call	8006ec <__mulsi3>
  807b80:	100b883a 	mov	r5,r2
  807b84:	8806943a 	slli	r3,r17,16
  807b88:	e004d43a 	srli	r2,fp,16
  807b8c:	18a2b03a 	or	r17,r3,r2
  807b90:	8940032e 	bgeu	r17,r5,807ba0 <__umoddi3+0x284>
  807b94:	8da3883a 	add	r17,r17,r22
  807b98:	8d800136 	bltu	r17,r22,807ba0 <__umoddi3+0x284>
  807b9c:	8940ec36 	bltu	r17,r5,807f50 <__umoddi3+0x634>
  807ba0:	8963c83a 	sub	r17,r17,r5
  807ba4:	8809883a 	mov	r4,r17
  807ba8:	a00b883a 	mov	r5,r20
  807bac:	08006dc0 	call	8006dc <__umodsi3>
  807bb0:	8809883a 	mov	r4,r17
  807bb4:	a00b883a 	mov	r5,r20
  807bb8:	1027883a 	mov	r19,r2
  807bbc:	08006cc0 	call	8006cc <__udivsi3>
  807bc0:	1009883a 	mov	r4,r2
  807bc4:	a80b883a 	mov	r5,r21
  807bc8:	08006ec0 	call	8006ec <__mulsi3>
  807bcc:	9806943a 	slli	r3,r19,16
  807bd0:	100b883a 	mov	r5,r2
  807bd4:	e0bfffcc 	andi	r2,fp,65535
  807bd8:	18a6b03a 	or	r19,r3,r2
  807bdc:	9940042e 	bgeu	r19,r5,807bf0 <__umoddi3+0x2d4>
  807be0:	9da7883a 	add	r19,r19,r22
  807be4:	9d800236 	bltu	r19,r22,807bf0 <__umoddi3+0x2d4>
  807be8:	9940012e 	bgeu	r19,r5,807bf0 <__umoddi3+0x2d4>
  807bec:	9da7883a 	add	r19,r19,r22
  807bf0:	9979c83a 	sub	fp,r19,r5
  807bf4:	d83f9c26 	beq	sp,zero,807a68 <__umoddi3+0x14c>
  807bf8:	d9400517 	ldw	r5,20(sp)
  807bfc:	000d883a 	mov	r6,zero
  807c00:	d8000115 	stw	zero,4(sp)
  807c04:	e178d83a 	srl	fp,fp,r5
  807c08:	d9800315 	stw	r6,12(sp)
  807c0c:	df000215 	stw	fp,8(sp)
  807c10:	df000015 	stw	fp,0(sp)
  807c14:	003f9406 	br	807a68 <__umoddi3+0x14c>
  807c18:	01000044 	movi	r4,1
  807c1c:	000b883a 	mov	r5,zero
  807c20:	08006cc0 	call	8006cc <__udivsi3>
  807c24:	102d883a 	mov	r22,r2
  807c28:	00bfffd4 	movui	r2,65535
  807c2c:	15bfba2e 	bgeu	r2,r22,807b18 <__umoddi3+0x1fc>
  807c30:	00804034 	movhi	r2,256
  807c34:	10bfffc4 	addi	r2,r2,-1
  807c38:	01400404 	movi	r5,16
  807c3c:	15bfb92e 	bgeu	r2,r22,807b24 <__umoddi3+0x208>
  807c40:	01400604 	movi	r5,24
  807c44:	003fb706 	br	807b24 <__umoddi3+0x208>
  807c48:	00803fc4 	movi	r2,255
  807c4c:	11cb803a 	cmpltu	r5,r2,r7
  807c50:	280a90fa 	slli	r5,r5,3
  807c54:	003f9b06 	br	807ac4 <__umoddi3+0x1a8>
  807c58:	00803fc4 	movi	r2,255
  807c5c:	118f803a 	cmpltu	r7,r2,r6
  807c60:	380e90fa 	slli	r7,r7,3
  807c64:	003f4a06 	br	807990 <__umoddi3+0x74>
  807c68:	e589c83a 	sub	r4,fp,r22
  807c6c:	e105803a 	cmpltu	r2,fp,r4
  807c70:	8507c83a 	sub	r3,r16,r20
  807c74:	18a1c83a 	sub	r16,r3,r2
  807c78:	2039883a 	mov	fp,r4
  807c7c:	003f9d06 	br	807af4 <__umoddi3+0x1d8>
  807c80:	d8800517 	ldw	r2,20(sp)
  807c84:	d9000517 	ldw	r4,20(sp)
  807c88:	308dc83a 	sub	r6,r6,r2
  807c8c:	a086983a 	sll	r3,r20,r2
  807c90:	b184d83a 	srl	r2,r22,r6
  807c94:	d9800415 	stw	r6,16(sp)
  807c98:	d9400417 	ldw	r5,16(sp)
  807c9c:	18a8b03a 	or	r20,r3,r2
  807ca0:	81a4d83a 	srl	r18,r16,r6
  807ca4:	a026d43a 	srli	r19,r20,16
  807ca8:	810c983a 	sll	r6,r16,r4
  807cac:	e144d83a 	srl	r2,fp,r5
  807cb0:	9009883a 	mov	r4,r18
  807cb4:	980b883a 	mov	r5,r19
  807cb8:	30a0b03a 	or	r16,r6,r2
  807cbc:	08006dc0 	call	8006dc <__umodsi3>
  807cc0:	9009883a 	mov	r4,r18
  807cc4:	980b883a 	mov	r5,r19
  807cc8:	1023883a 	mov	r17,r2
  807ccc:	a5ffffcc 	andi	r23,r20,65535
  807cd0:	08006cc0 	call	8006cc <__udivsi3>
  807cd4:	1009883a 	mov	r4,r2
  807cd8:	b80b883a 	mov	r5,r23
  807cdc:	102b883a 	mov	r21,r2
  807ce0:	08006ec0 	call	8006ec <__mulsi3>
  807ce4:	100d883a 	mov	r6,r2
  807ce8:	8806943a 	slli	r3,r17,16
  807cec:	8004d43a 	srli	r2,r16,16
  807cf0:	d9000517 	ldw	r4,20(sp)
  807cf4:	18a2b03a 	or	r17,r3,r2
  807cf8:	b12c983a 	sll	r22,r22,r4
  807cfc:	e138983a 	sll	fp,fp,r4
  807d00:	8980062e 	bgeu	r17,r6,807d1c <__umoddi3+0x400>
  807d04:	8d23883a 	add	r17,r17,r20
  807d08:	ad7fffc4 	addi	r21,r21,-1
  807d0c:	8d000336 	bltu	r17,r20,807d1c <__umoddi3+0x400>
  807d10:	8980022e 	bgeu	r17,r6,807d1c <__umoddi3+0x400>
  807d14:	ad7fffc4 	addi	r21,r21,-1
  807d18:	8d23883a 	add	r17,r17,r20
  807d1c:	89a3c83a 	sub	r17,r17,r6
  807d20:	8809883a 	mov	r4,r17
  807d24:	980b883a 	mov	r5,r19
  807d28:	08006dc0 	call	8006dc <__umodsi3>
  807d2c:	8809883a 	mov	r4,r17
  807d30:	980b883a 	mov	r5,r19
  807d34:	d8800615 	stw	r2,24(sp)
  807d38:	08006cc0 	call	8006cc <__udivsi3>
  807d3c:	1009883a 	mov	r4,r2
  807d40:	b80b883a 	mov	r5,r23
  807d44:	1025883a 	mov	r18,r2
  807d48:	08006ec0 	call	8006ec <__mulsi3>
  807d4c:	d9400617 	ldw	r5,24(sp)
  807d50:	100d883a 	mov	r6,r2
  807d54:	80bfffcc 	andi	r2,r16,65535
  807d58:	2806943a 	slli	r3,r5,16
  807d5c:	1886b03a 	or	r3,r3,r2
  807d60:	d8c00615 	stw	r3,24(sp)
  807d64:	1980042e 	bgeu	r3,r6,807d78 <__umoddi3+0x45c>
  807d68:	1d07883a 	add	r3,r3,r20
  807d6c:	d8c00615 	stw	r3,24(sp)
  807d70:	94bfffc4 	addi	r18,r18,-1
  807d74:	1d00782e 	bgeu	r3,r20,807f58 <__umoddi3+0x63c>
  807d78:	a822943a 	slli	r17,r21,16
  807d7c:	d8800617 	ldw	r2,24(sp)
  807d80:	b02ed43a 	srli	r23,r22,16
  807d84:	8ca2b03a 	or	r17,r17,r18
  807d88:	8cffffcc 	andi	r19,r17,65535
  807d8c:	b57fffcc 	andi	r21,r22,65535
  807d90:	8822d43a 	srli	r17,r17,16
  807d94:	1185c83a 	sub	r2,r2,r6
  807d98:	9809883a 	mov	r4,r19
  807d9c:	a80b883a 	mov	r5,r21
  807da0:	d8800615 	stw	r2,24(sp)
  807da4:	08006ec0 	call	8006ec <__mulsi3>
  807da8:	9809883a 	mov	r4,r19
  807dac:	b80b883a 	mov	r5,r23
  807db0:	d8800715 	stw	r2,28(sp)
  807db4:	08006ec0 	call	8006ec <__mulsi3>
  807db8:	8809883a 	mov	r4,r17
  807dbc:	a80b883a 	mov	r5,r21
  807dc0:	1025883a 	mov	r18,r2
  807dc4:	08006ec0 	call	8006ec <__mulsi3>
  807dc8:	b80b883a 	mov	r5,r23
  807dcc:	8809883a 	mov	r4,r17
  807dd0:	1027883a 	mov	r19,r2
  807dd4:	08006ec0 	call	8006ec <__mulsi3>
  807dd8:	d8c00717 	ldw	r3,28(sp)
  807ddc:	100b883a 	mov	r5,r2
  807de0:	dc000617 	ldw	r16,24(sp)
  807de4:	1804d43a 	srli	r2,r3,16
  807de8:	90a5883a 	add	r18,r18,r2
  807dec:	94e5883a 	add	r18,r18,r19
  807df0:	94c0032e 	bgeu	r18,r19,807e00 <__umoddi3+0x4e4>
  807df4:	00800074 	movhi	r2,1
  807df8:	10800004 	addi	r2,r2,0
  807dfc:	288b883a 	add	r5,r5,r2
  807e00:	9004d43a 	srli	r2,r18,16
  807e04:	d9800717 	ldw	r6,28(sp)
  807e08:	9008943a 	slli	r4,r18,16
  807e0c:	1145883a 	add	r2,r2,r5
  807e10:	30ffffcc 	andi	r3,r6,65535
  807e14:	20d1883a 	add	r8,r4,r3
  807e18:	80804736 	bltu	r16,r2,807f38 <__umoddi3+0x61c>
  807e1c:	14004526 	beq	r2,r16,807f34 <__umoddi3+0x618>
  807e20:	d83f1126 	beq	sp,zero,807a68 <__umoddi3+0x14c>
  807e24:	d9400617 	ldw	r5,24(sp)
  807e28:	e207c83a 	sub	r3,fp,r8
  807e2c:	d9800417 	ldw	r6,16(sp)
  807e30:	2889c83a 	sub	r4,r5,r2
  807e34:	e0c5803a 	cmpltu	r2,fp,r3
  807e38:	20a1c83a 	sub	r16,r4,r2
  807e3c:	d8800517 	ldw	r2,20(sp)
  807e40:	818a983a 	sll	r5,r16,r6
  807e44:	1886d83a 	srl	r3,r3,r2
  807e48:	8084d83a 	srl	r2,r16,r2
  807e4c:	28cab03a 	or	r5,r5,r3
  807e50:	d9400215 	stw	r5,8(sp)
  807e54:	d8800315 	stw	r2,12(sp)
  807e58:	d8800115 	stw	r2,4(sp)
  807e5c:	d9400015 	stw	r5,0(sp)
  807e60:	003f0106 	br	807a68 <__umoddi3+0x14c>
  807e64:	d8800517 	ldw	r2,20(sp)
  807e68:	b0ac983a 	sll	r22,r22,r2
  807e6c:	308dc83a 	sub	r6,r6,r2
  807e70:	81a4d83a 	srl	r18,r16,r6
  807e74:	b028d43a 	srli	r20,r22,16
  807e78:	e186d83a 	srl	r3,fp,r6
  807e7c:	8084983a 	sll	r2,r16,r2
  807e80:	9009883a 	mov	r4,r18
  807e84:	a00b883a 	mov	r5,r20
  807e88:	10e0b03a 	or	r16,r2,r3
  807e8c:	08006dc0 	call	8006dc <__umodsi3>
  807e90:	9009883a 	mov	r4,r18
  807e94:	a00b883a 	mov	r5,r20
  807e98:	1023883a 	mov	r17,r2
  807e9c:	b57fffcc 	andi	r21,r22,65535
  807ea0:	08006cc0 	call	8006cc <__udivsi3>
  807ea4:	1009883a 	mov	r4,r2
  807ea8:	a80b883a 	mov	r5,r21
  807eac:	08006ec0 	call	8006ec <__mulsi3>
  807eb0:	100b883a 	mov	r5,r2
  807eb4:	8806943a 	slli	r3,r17,16
  807eb8:	8004d43a 	srli	r2,r16,16
  807ebc:	d9000517 	ldw	r4,20(sp)
  807ec0:	18a2b03a 	or	r17,r3,r2
  807ec4:	e138983a 	sll	fp,fp,r4
  807ec8:	8940042e 	bgeu	r17,r5,807edc <__umoddi3+0x5c0>
  807ecc:	8da3883a 	add	r17,r17,r22
  807ed0:	8d800236 	bltu	r17,r22,807edc <__umoddi3+0x5c0>
  807ed4:	8940012e 	bgeu	r17,r5,807edc <__umoddi3+0x5c0>
  807ed8:	8da3883a 	add	r17,r17,r22
  807edc:	8963c83a 	sub	r17,r17,r5
  807ee0:	8809883a 	mov	r4,r17
  807ee4:	a00b883a 	mov	r5,r20
  807ee8:	08006dc0 	call	8006dc <__umodsi3>
  807eec:	8809883a 	mov	r4,r17
  807ef0:	a00b883a 	mov	r5,r20
  807ef4:	1025883a 	mov	r18,r2
  807ef8:	08006cc0 	call	8006cc <__udivsi3>
  807efc:	1009883a 	mov	r4,r2
  807f00:	a80b883a 	mov	r5,r21
  807f04:	08006ec0 	call	8006ec <__mulsi3>
  807f08:	9006943a 	slli	r3,r18,16
  807f0c:	100b883a 	mov	r5,r2
  807f10:	80bfffcc 	andi	r2,r16,65535
  807f14:	18a4b03a 	or	r18,r3,r2
  807f18:	9140042e 	bgeu	r18,r5,807f2c <__umoddi3+0x610>
  807f1c:	95a5883a 	add	r18,r18,r22
  807f20:	95800236 	bltu	r18,r22,807f2c <__umoddi3+0x610>
  807f24:	9140012e 	bgeu	r18,r5,807f2c <__umoddi3+0x610>
  807f28:	95a5883a 	add	r18,r18,r22
  807f2c:	9161c83a 	sub	r16,r18,r5
  807f30:	003f0906 	br	807b58 <__umoddi3+0x23c>
  807f34:	e23fba2e 	bgeu	fp,r8,807e20 <__umoddi3+0x504>
  807f38:	4589c83a 	sub	r4,r8,r22
  807f3c:	1507c83a 	sub	r3,r2,r20
  807f40:	4105803a 	cmpltu	r2,r8,r4
  807f44:	1885c83a 	sub	r2,r3,r2
  807f48:	2011883a 	mov	r8,r4
  807f4c:	003fb406 	br	807e20 <__umoddi3+0x504>
  807f50:	8da3883a 	add	r17,r17,r22
  807f54:	003f1206 	br	807ba0 <__umoddi3+0x284>
  807f58:	19bf872e 	bgeu	r3,r6,807d78 <__umoddi3+0x45c>
  807f5c:	1d07883a 	add	r3,r3,r20
  807f60:	94bfffc4 	addi	r18,r18,-1
  807f64:	d8c00615 	stw	r3,24(sp)
  807f68:	003f8306 	br	807d78 <__umoddi3+0x45c>

00807f6c <_fpadd_parts>:
  807f6c:	defffc04 	addi	sp,sp,-16
  807f70:	dc000215 	stw	r16,8(sp)
  807f74:	dfc00315 	stw	ra,12(sp)
  807f78:	dc400115 	stw	r17,4(sp)
  807f7c:	dc800015 	stw	r18,0(sp)
  807f80:	20c00017 	ldw	r3,0(r4)
  807f84:	00800044 	movi	r2,1
  807f88:	3021883a 	mov	r16,r6
  807f8c:	2019883a 	mov	r12,r4
  807f90:	281b883a 	mov	r13,r5
  807f94:	200d883a 	mov	r6,r4
  807f98:	10c05d2e 	bgeu	r2,r3,808110 <_fpadd_parts+0x1a4>
  807f9c:	29000017 	ldw	r4,0(r5)
  807fa0:	280d883a 	mov	r6,r5
  807fa4:	11005a2e 	bgeu	r2,r4,808110 <_fpadd_parts+0x1a4>
  807fa8:	18800118 	cmpnei	r2,r3,4
  807fac:	10005f26 	beq	r2,zero,80812c <_fpadd_parts+0x1c0>
  807fb0:	20800118 	cmpnei	r2,r4,4
  807fb4:	280d883a 	mov	r6,r5
  807fb8:	10005526 	beq	r2,zero,808110 <_fpadd_parts+0x1a4>
  807fbc:	20800098 	cmpnei	r2,r4,2
  807fc0:	10007b26 	beq	r2,zero,8081b0 <_fpadd_parts+0x244>
  807fc4:	18800098 	cmpnei	r2,r3,2
  807fc8:	280d883a 	mov	r6,r5
  807fcc:	10005026 	beq	r2,zero,808110 <_fpadd_parts+0x1a4>
  807fd0:	63c00217 	ldw	r15,8(r12)
  807fd4:	2b800217 	ldw	r14,8(r5)
  807fd8:	62800317 	ldw	r10,12(r12)
  807fdc:	2a000317 	ldw	r8,12(r5)
  807fe0:	7b87c83a 	sub	r3,r15,r14
  807fe4:	62c00417 	ldw	r11,16(r12)
  807fe8:	2a400417 	ldw	r9,16(r5)
  807fec:	18009716 	blt	r3,zero,80824c <_fpadd_parts+0x2e0>
  807ff0:	00800fc4 	movi	r2,63
  807ff4:	10c0500e 	bge	r2,r3,808138 <_fpadd_parts+0x1cc>
  807ff8:	73c0900e 	bge	r14,r15,80823c <_fpadd_parts+0x2d0>
  807ffc:	0011883a 	mov	r8,zero
  808000:	0013883a 	mov	r9,zero
  808004:	61400117 	ldw	r5,4(r12)
  808008:	68800117 	ldw	r2,4(r13)
  80800c:	28808126 	beq	r5,r2,808214 <_fpadd_parts+0x2a8>
  808010:	28007c26 	beq	r5,zero,808204 <_fpadd_parts+0x298>
  808014:	4285c83a 	sub	r2,r8,r10
  808018:	4089803a 	cmpltu	r4,r8,r2
  80801c:	4ac7c83a 	sub	r3,r9,r11
  808020:	1909c83a 	sub	r4,r3,r4
  808024:	100d883a 	mov	r6,r2
  808028:	20008a16 	blt	r4,zero,808254 <_fpadd_parts+0x2e8>
  80802c:	7823883a 	mov	r17,r15
  808030:	781d883a 	mov	r14,r15
  808034:	81000415 	stw	r4,16(r16)
  808038:	80000115 	stw	zero,4(r16)
  80803c:	80800315 	stw	r2,12(r16)
  808040:	80800317 	ldw	r2,12(r16)
  808044:	80c00417 	ldw	r3,16(r16)
  808048:	013fffc4 	movi	r4,-1
  80804c:	110f883a 	add	r7,r2,r4
  808050:	388d803a 	cmpltu	r6,r7,r2
  808054:	1911883a 	add	r8,r3,r4
  808058:	02440034 	movhi	r9,4096
  80805c:	4a7fffc4 	addi	r9,r9,-1
  808060:	3211883a 	add	r8,r6,r8
  808064:	4a001536 	bltu	r9,r8,8080bc <_fpadd_parts+0x150>
  808068:	42408426 	beq	r8,r9,80827c <_fpadd_parts+0x310>
  80806c:	481f883a 	mov	r15,r9
  808070:	04bfff84 	movi	r18,-2
  808074:	80800317 	ldw	r2,12(r16)
  808078:	80c00417 	ldw	r3,16(r16)
  80807c:	013fffc4 	movi	r4,-1
  808080:	1091883a 	add	r8,r2,r2
  808084:	1016d7fa 	srli	r11,r2,31
  808088:	18d5883a 	add	r10,r3,r3
  80808c:	4119883a 	add	r12,r8,r4
  808090:	6205803a 	cmpltu	r2,r12,r8
  808094:	5a92b03a 	or	r9,r11,r10
  808098:	491b883a 	add	r13,r9,r4
  80809c:	7123883a 	add	r17,r14,r4
  8080a0:	135b883a 	add	r13,r2,r13
  8080a4:	881d883a 	mov	r14,r17
  8080a8:	82000315 	stw	r8,12(r16)
  8080ac:	82400415 	stw	r9,16(r16)
  8080b0:	7b400236 	bltu	r15,r13,8080bc <_fpadd_parts+0x150>
  8080b4:	7b7fef1e 	bne	r15,r13,808074 <_fpadd_parts+0x108>
  8080b8:	933fee2e 	bgeu	r18,r12,808074 <_fpadd_parts+0x108>
  8080bc:	83400417 	ldw	r13,16(r16)
  8080c0:	008000c4 	movi	r2,3
  8080c4:	00c80034 	movhi	r3,8192
  8080c8:	18ffffc4 	addi	r3,r3,-1
  8080cc:	83000317 	ldw	r12,12(r16)
  8080d0:	80800015 	stw	r2,0(r16)
  8080d4:	1b40482e 	bgeu	r3,r13,8081f8 <_fpadd_parts+0x28c>
  8080d8:	01800044 	movi	r6,1
  8080dc:	6184d83a 	srl	r2,r12,r6
  8080e0:	680697fa 	slli	r3,r13,31
  8080e4:	6992d83a 	srl	r9,r13,r6
  8080e8:	1890b03a 	or	r8,r3,r2
  8080ec:	6184703a 	and	r2,r12,r6
  8080f0:	0007883a 	mov	r3,zero
  8080f4:	718d883a 	add	r6,r14,r6
  8080f8:	1208b03a 	or	r4,r2,r8
  8080fc:	1a4ab03a 	or	r5,r3,r9
  808100:	81800215 	stw	r6,8(r16)
  808104:	81400415 	stw	r5,16(r16)
  808108:	81000315 	stw	r4,12(r16)
  80810c:	800d883a 	mov	r6,r16
  808110:	3005883a 	mov	r2,r6
  808114:	dfc00317 	ldw	ra,12(sp)
  808118:	dc000217 	ldw	r16,8(sp)
  80811c:	dc400117 	ldw	r17,4(sp)
  808120:	dc800017 	ldw	r18,0(sp)
  808124:	dec00404 	addi	sp,sp,16
  808128:	f800283a 	ret
  80812c:	20c01a26 	beq	r4,r3,808198 <_fpadd_parts+0x22c>
  808130:	600d883a 	mov	r6,r12
  808134:	003ff606 	br	808110 <_fpadd_parts+0x1a4>
  808138:	73c00b0e 	bge	r14,r15,808168 <_fpadd_parts+0x1fc>
  80813c:	480697fa 	slli	r3,r9,31
  808140:	4004d07a 	srli	r2,r8,1
  808144:	01000044 	movi	r4,1
  808148:	490ed83a 	srl	r7,r9,r4
  80814c:	188cb03a 	or	r6,r3,r2
  808150:	4104703a 	and	r2,r8,r4
  808154:	0007883a 	mov	r3,zero
  808158:	711d883a 	add	r14,r14,r4
  80815c:	1190b03a 	or	r8,r2,r6
  808160:	19d2b03a 	or	r9,r3,r7
  808164:	003ff406 	br	808138 <_fpadd_parts+0x1cc>
  808168:	7bbfa60e 	bge	r15,r14,808004 <_fpadd_parts+0x98>
  80816c:	580697fa 	slli	r3,r11,31
  808170:	5004d07a 	srli	r2,r10,1
  808174:	01000044 	movi	r4,1
  808178:	590ed83a 	srl	r7,r11,r4
  80817c:	188cb03a 	or	r6,r3,r2
  808180:	5104703a 	and	r2,r10,r4
  808184:	0007883a 	mov	r3,zero
  808188:	791f883a 	add	r15,r15,r4
  80818c:	1194b03a 	or	r10,r2,r6
  808190:	19d6b03a 	or	r11,r3,r7
  808194:	003ff406 	br	808168 <_fpadd_parts+0x1fc>
  808198:	28c00117 	ldw	r3,4(r5)
  80819c:	60800117 	ldw	r2,4(r12)
  8081a0:	01802074 	movhi	r6,129
  8081a4:	31812504 	addi	r6,r6,1172
  8081a8:	10ffd91e 	bne	r2,r3,808110 <_fpadd_parts+0x1a4>
  8081ac:	003fe006 	br	808130 <_fpadd_parts+0x1c4>
  8081b0:	600d883a 	mov	r6,r12
  8081b4:	193fd61e 	bne	r3,r4,808110 <_fpadd_parts+0x1a4>
  8081b8:	60800017 	ldw	r2,0(r12)
  8081bc:	60c00117 	ldw	r3,4(r12)
  8081c0:	61000217 	ldw	r4,8(r12)
  8081c4:	80800015 	stw	r2,0(r16)
  8081c8:	60800317 	ldw	r2,12(r12)
  8081cc:	80c00115 	stw	r3,4(r16)
  8081d0:	60c00417 	ldw	r3,16(r12)
  8081d4:	81000215 	stw	r4,8(r16)
  8081d8:	80800315 	stw	r2,12(r16)
  8081dc:	80c00415 	stw	r3,16(r16)
  8081e0:	60800117 	ldw	r2,4(r12)
  8081e4:	28c00117 	ldw	r3,4(r5)
  8081e8:	800d883a 	mov	r6,r16
  8081ec:	10c4703a 	and	r2,r2,r3
  8081f0:	80800115 	stw	r2,4(r16)
  8081f4:	003fc606 	br	808110 <_fpadd_parts+0x1a4>
  8081f8:	800d883a 	mov	r6,r16
  8081fc:	84400215 	stw	r17,8(r16)
  808200:	003fc306 	br	808110 <_fpadd_parts+0x1a4>
  808204:	5205c83a 	sub	r2,r10,r8
  808208:	5089803a 	cmpltu	r4,r10,r2
  80820c:	5a47c83a 	sub	r3,r11,r9
  808210:	003f8306 	br	808020 <_fpadd_parts+0xb4>
  808214:	5205883a 	add	r2,r10,r8
  808218:	1289803a 	cmpltu	r4,r2,r10
  80821c:	5a47883a 	add	r3,r11,r9
  808220:	20c9883a 	add	r4,r4,r3
  808224:	7823883a 	mov	r17,r15
  808228:	781d883a 	mov	r14,r15
  80822c:	81400115 	stw	r5,4(r16)
  808230:	80800315 	stw	r2,12(r16)
  808234:	81000415 	stw	r4,16(r16)
  808238:	003fa006 	br	8080bc <_fpadd_parts+0x150>
  80823c:	0015883a 	mov	r10,zero
  808240:	701f883a 	mov	r15,r14
  808244:	0017883a 	mov	r11,zero
  808248:	003f6e06 	br	808004 <_fpadd_parts+0x98>
  80824c:	00c7c83a 	sub	r3,zero,r3
  808250:	003f6706 	br	807ff0 <_fpadd_parts+0x84>
  808254:	00800044 	movi	r2,1
  808258:	200b883a 	mov	r5,r4
  80825c:	80800115 	stw	r2,4(r16)
  808260:	3009883a 	mov	r4,r6
  808264:	7823883a 	mov	r17,r15
  808268:	080730c0 	call	80730c <__negdi2>
  80826c:	881d883a 	mov	r14,r17
  808270:	80c00415 	stw	r3,16(r16)
  808274:	80800315 	stw	r2,12(r16)
  808278:	003f7106 	br	808040 <_fpadd_parts+0xd4>
  80827c:	00bfff84 	movi	r2,-2
  808280:	11ff7a2e 	bgeu	r2,r7,80806c <_fpadd_parts+0x100>
  808284:	003f8d06 	br	8080bc <_fpadd_parts+0x150>

00808288 <__adddf3>:
  808288:	deffeb04 	addi	sp,sp,-84
  80828c:	2011883a 	mov	r8,r4
  808290:	dc401315 	stw	r17,76(sp)
  808294:	d9401015 	stw	r5,64(sp)
  808298:	d9000f04 	addi	r4,sp,60
  80829c:	d80b883a 	mov	r5,sp
  8082a0:	dc400504 	addi	r17,sp,20
  8082a4:	dfc01415 	stw	ra,80(sp)
  8082a8:	d9c01215 	stw	r7,72(sp)
  8082ac:	da000f15 	stw	r8,60(sp)
  8082b0:	d9801115 	stw	r6,68(sp)
  8082b4:	08091e40 	call	8091e4 <__unpack_d>
  8082b8:	d9001104 	addi	r4,sp,68
  8082bc:	880b883a 	mov	r5,r17
  8082c0:	08091e40 	call	8091e4 <__unpack_d>
  8082c4:	d9800a04 	addi	r6,sp,40
  8082c8:	d809883a 	mov	r4,sp
  8082cc:	880b883a 	mov	r5,r17
  8082d0:	0807f6c0 	call	807f6c <_fpadd_parts>
  8082d4:	1009883a 	mov	r4,r2
  8082d8:	0808f540 	call	808f54 <__pack_d>
  8082dc:	1009883a 	mov	r4,r2
  8082e0:	2005883a 	mov	r2,r4
  8082e4:	dfc01417 	ldw	ra,80(sp)
  8082e8:	dc401317 	ldw	r17,76(sp)
  8082ec:	dec01504 	addi	sp,sp,84
  8082f0:	f800283a 	ret

008082f4 <__subdf3>:
  8082f4:	deffeb04 	addi	sp,sp,-84
  8082f8:	2011883a 	mov	r8,r4
  8082fc:	dc401315 	stw	r17,76(sp)
  808300:	d9401015 	stw	r5,64(sp)
  808304:	d9000f04 	addi	r4,sp,60
  808308:	d80b883a 	mov	r5,sp
  80830c:	dc400504 	addi	r17,sp,20
  808310:	dfc01415 	stw	ra,80(sp)
  808314:	d9c01215 	stw	r7,72(sp)
  808318:	da000f15 	stw	r8,60(sp)
  80831c:	d9801115 	stw	r6,68(sp)
  808320:	08091e40 	call	8091e4 <__unpack_d>
  808324:	d9001104 	addi	r4,sp,68
  808328:	880b883a 	mov	r5,r17
  80832c:	08091e40 	call	8091e4 <__unpack_d>
  808330:	d8800617 	ldw	r2,24(sp)
  808334:	880b883a 	mov	r5,r17
  808338:	d809883a 	mov	r4,sp
  80833c:	d9800a04 	addi	r6,sp,40
  808340:	1080005c 	xori	r2,r2,1
  808344:	d8800615 	stw	r2,24(sp)
  808348:	0807f6c0 	call	807f6c <_fpadd_parts>
  80834c:	1009883a 	mov	r4,r2
  808350:	0808f540 	call	808f54 <__pack_d>
  808354:	1009883a 	mov	r4,r2
  808358:	2005883a 	mov	r2,r4
  80835c:	dfc01417 	ldw	ra,80(sp)
  808360:	dc401317 	ldw	r17,76(sp)
  808364:	dec01504 	addi	sp,sp,84
  808368:	f800283a 	ret

0080836c <__muldf3>:
  80836c:	deffe004 	addi	sp,sp,-128
  808370:	2011883a 	mov	r8,r4
  808374:	df001e15 	stw	fp,120(sp)
  808378:	d9401015 	stw	r5,64(sp)
  80837c:	d9000f04 	addi	r4,sp,60
  808380:	d80b883a 	mov	r5,sp
  808384:	df000504 	addi	fp,sp,20
  808388:	dfc01f15 	stw	ra,124(sp)
  80838c:	ddc01715 	stw	r23,92(sp)
  808390:	d9c01215 	stw	r7,72(sp)
  808394:	da000f15 	stw	r8,60(sp)
  808398:	d9801115 	stw	r6,68(sp)
  80839c:	dc001d15 	stw	r16,116(sp)
  8083a0:	dc401c15 	stw	r17,112(sp)
  8083a4:	dc801b15 	stw	r18,108(sp)
  8083a8:	dcc01a15 	stw	r19,104(sp)
  8083ac:	dd001915 	stw	r20,100(sp)
  8083b0:	dd401815 	stw	r21,96(sp)
  8083b4:	08091e40 	call	8091e4 <__unpack_d>
  8083b8:	d9001104 	addi	r4,sp,68
  8083bc:	e00b883a 	mov	r5,fp
  8083c0:	08091e40 	call	8091e4 <__unpack_d>
  8083c4:	d8c00017 	ldw	r3,0(sp)
  8083c8:	05c00044 	movi	r23,1
  8083cc:	b8c00e2e 	bgeu	r23,r3,808408 <__muldf3+0x9c>
  8083d0:	e1000017 	ldw	r4,0(fp)
  8083d4:	b9000636 	bltu	r23,r4,8083f0 <__muldf3+0x84>
  8083d8:	d8c00617 	ldw	r3,24(sp)
  8083dc:	d8800117 	ldw	r2,4(sp)
  8083e0:	e009883a 	mov	r4,fp
  8083e4:	10c4c03a 	cmpne	r2,r2,r3
  8083e8:	d8800615 	stw	r2,24(sp)
  8083ec:	00000b06 	br	80841c <__muldf3+0xb0>
  8083f0:	18800118 	cmpnei	r2,r3,4
  8083f4:	1000171e 	bne	r2,zero,808454 <__muldf3+0xe8>
  8083f8:	20800098 	cmpnei	r2,r4,2
  8083fc:	01002074 	movhi	r4,129
  808400:	21012504 	addi	r4,r4,1172
  808404:	10000526 	beq	r2,zero,80841c <__muldf3+0xb0>
  808408:	d8800117 	ldw	r2,4(sp)
  80840c:	d8c00617 	ldw	r3,24(sp)
  808410:	d809883a 	mov	r4,sp
  808414:	10c4c03a 	cmpne	r2,r2,r3
  808418:	d8800115 	stw	r2,4(sp)
  80841c:	0808f540 	call	808f54 <__pack_d>
  808420:	1009883a 	mov	r4,r2
  808424:	2005883a 	mov	r2,r4
  808428:	dfc01f17 	ldw	ra,124(sp)
  80842c:	df001e17 	ldw	fp,120(sp)
  808430:	dc001d17 	ldw	r16,116(sp)
  808434:	dc401c17 	ldw	r17,112(sp)
  808438:	dc801b17 	ldw	r18,108(sp)
  80843c:	dcc01a17 	ldw	r19,104(sp)
  808440:	dd001917 	ldw	r20,100(sp)
  808444:	dd401817 	ldw	r21,96(sp)
  808448:	ddc01717 	ldw	r23,92(sp)
  80844c:	dec02004 	addi	sp,sp,128
  808450:	f800283a 	ret
  808454:	20800118 	cmpnei	r2,r4,4
  808458:	10009a26 	beq	r2,zero,8086c4 <__muldf3+0x358>
  80845c:	18800098 	cmpnei	r2,r3,2
  808460:	103fe926 	beq	r2,zero,808408 <__muldf3+0x9c>
  808464:	20800098 	cmpnei	r2,r4,2
  808468:	103fdb26 	beq	r2,zero,8083d8 <__muldf3+0x6c>
  80846c:	dc000317 	ldw	r16,12(sp)
  808470:	dc800817 	ldw	r18,32(sp)
  808474:	0013883a 	mov	r9,zero
  808478:	0007883a 	mov	r3,zero
  80847c:	dcc00917 	ldw	r19,36(sp)
  808480:	480f883a 	mov	r7,r9
  808484:	9009883a 	mov	r4,r18
  808488:	800d883a 	mov	r6,r16
  80848c:	180b883a 	mov	r5,r3
  808490:	0808df80 	call	808df8 <__muldi3>
  808494:	dc400417 	ldw	r17,16(sp)
  808498:	0013883a 	mov	r9,zero
  80849c:	0017883a 	mov	r11,zero
  8084a0:	480b883a 	mov	r5,r9
  8084a4:	580f883a 	mov	r7,r11
  8084a8:	9809883a 	mov	r4,r19
  8084ac:	800d883a 	mov	r6,r16
  8084b0:	dc401315 	stw	r17,76(sp)
  8084b4:	d8801515 	stw	r2,84(sp)
  8084b8:	d8c01615 	stw	r3,88(sp)
  8084bc:	0808df80 	call	808df8 <__muldi3>
  8084c0:	d9401317 	ldw	r5,76(sp)
  8084c4:	0017883a 	mov	r11,zero
  8084c8:	0013883a 	mov	r9,zero
  8084cc:	2811883a 	mov	r8,r5
  8084d0:	0009883a 	mov	r4,zero
  8084d4:	580b883a 	mov	r5,r11
  8084d8:	400d883a 	mov	r6,r8
  8084dc:	480f883a 	mov	r7,r9
  8084e0:	d9001415 	stw	r4,80(sp)
  8084e4:	9009883a 	mov	r4,r18
  8084e8:	9829883a 	mov	r20,r19
  8084ec:	1025883a 	mov	r18,r2
  8084f0:	1827883a 	mov	r19,r3
  8084f4:	0808df80 	call	808df8 <__muldi3>
  8084f8:	d9801317 	ldw	r6,76(sp)
  8084fc:	1009883a 	mov	r4,r2
  808500:	180b883a 	mov	r5,r3
  808504:	0013883a 	mov	r9,zero
  808508:	0007883a 	mov	r3,zero
  80850c:	2021883a 	mov	r16,r4
  808510:	2823883a 	mov	r17,r5
  808514:	a009883a 	mov	r4,r20
  808518:	480b883a 	mov	r5,r9
  80851c:	180f883a 	mov	r7,r3
  808520:	0808df80 	call	808df8 <__muldi3>
  808524:	9409883a 	add	r4,r18,r16
  808528:	2491803a 	cmpltu	r8,r4,r18
  80852c:	9c4b883a 	add	r5,r19,r17
  808530:	4151883a 	add	r8,r8,r5
  808534:	2013883a 	mov	r9,r4
  808538:	4015883a 	mov	r10,r8
  80853c:	101f883a 	mov	r15,r2
  808540:	0017883a 	mov	r11,zero
  808544:	1821883a 	mov	r16,r3
  808548:	0019883a 	mov	r12,zero
  80854c:	44c0622e 	bgeu	r8,r19,8086d8 <__muldf3+0x36c>
  808550:	0005883a 	mov	r2,zero
  808554:	5889883a 	add	r4,r11,r2
  808558:	22cd803a 	cmpltu	r6,r4,r11
  80855c:	35cd883a 	add	r6,r6,r23
  808560:	2017883a 	mov	r11,r4
  808564:	3019883a 	mov	r12,r6
  808568:	d9001517 	ldw	r4,84(sp)
  80856c:	d9801617 	ldw	r6,88(sp)
  808570:	0025883a 	mov	r18,zero
  808574:	2485883a 	add	r2,r4,r18
  808578:	200b883a 	mov	r5,r4
  80857c:	3247883a 	add	r3,r6,r9
  808580:	1109803a 	cmpltu	r4,r2,r4
  808584:	20c9883a 	add	r4,r4,r3
  808588:	101b883a 	mov	r13,r2
  80858c:	201d883a 	mov	r14,r4
  808590:	21806236 	bltu	r4,r6,80871c <__muldf3+0x3b0>
  808594:	33806026 	beq	r6,r14,808718 <__muldf3+0x3ac>
  808598:	53c5883a 	add	r2,r10,r15
  80859c:	000b883a 	mov	r5,zero
  8085a0:	128d803a 	cmpltu	r6,r2,r10
  8085a4:	2c07883a 	add	r3,r5,r16
  8085a8:	5889883a 	add	r4,r11,r2
  8085ac:	30c7883a 	add	r3,r6,r3
  8085b0:	d8800217 	ldw	r2,8(sp)
  8085b4:	e1c00217 	ldw	r7,8(fp)
  8085b8:	60cb883a 	add	r5,r12,r3
  8085bc:	e2000117 	ldw	r8,4(fp)
  8085c0:	d8c00117 	ldw	r3,4(sp)
  8085c4:	22cd803a 	cmpltu	r6,r4,r11
  8085c8:	11c5883a 	add	r2,r2,r7
  8085cc:	15000104 	addi	r20,r2,4
  8085d0:	314d883a 	add	r6,r6,r5
  8085d4:	1a06c03a 	cmpne	r3,r3,r8
  8085d8:	00880034 	movhi	r2,8192
  8085dc:	10bfffc4 	addi	r2,r2,-1
  8085e0:	2013883a 	mov	r9,r4
  8085e4:	3015883a 	mov	r10,r6
  8085e8:	6817883a 	mov	r11,r13
  8085ec:	d8c00b15 	stw	r3,44(sp)
  8085f0:	7019883a 	mov	r12,r14
  8085f4:	a027883a 	mov	r19,r20
  8085f8:	1180182e 	bgeu	r2,r6,80865c <__muldf3+0x2f0>
  8085fc:	1011883a 	mov	r8,r2
  808600:	5804d07a 	srli	r2,r11,1
  808604:	600697fa 	slli	r3,r12,31
  808608:	4808d07a 	srli	r4,r9,1
  80860c:	500a97fa 	slli	r5,r10,31
  808610:	500ed07a 	srli	r7,r10,1
  808614:	189eb03a 	or	r15,r3,r2
  808618:	00800044 	movi	r2,1
  80861c:	290cb03a 	or	r6,r5,r4
  808620:	a0a9883a 	add	r20,r20,r2
  808624:	4888703a 	and	r4,r9,r2
  808628:	6020d07a 	srli	r16,r12,1
  80862c:	001b883a 	mov	r13,zero
  808630:	03a00034 	movhi	r14,32768
  808634:	73800004 	addi	r14,r14,0
  808638:	3013883a 	mov	r9,r6
  80863c:	3815883a 	mov	r10,r7
  808640:	a027883a 	mov	r19,r20
  808644:	20000426 	beq	r4,zero,808658 <__muldf3+0x2ec>
  808648:	7b62b03a 	or	r17,r15,r13
  80864c:	83a4b03a 	or	r18,r16,r14
  808650:	8817883a 	mov	r11,r17
  808654:	9019883a 	mov	r12,r18
  808658:	42bfe936 	bltu	r8,r10,808600 <__muldf3+0x294>
  80865c:	00840034 	movhi	r2,4096
  808660:	10bfffc4 	addi	r2,r2,-1
  808664:	12801f36 	bltu	r2,r10,8086e4 <__muldf3+0x378>
  808668:	101f883a 	mov	r15,r2
  80866c:	00000306 	br	80867c <__muldf3+0x310>
  808670:	6817883a 	mov	r11,r13
  808674:	7019883a 	mov	r12,r14
  808678:	7a801a36 	bltu	r15,r10,8086e4 <__muldf3+0x378>
  80867c:	5806d7fa 	srli	r3,r11,31
  808680:	6305883a 	add	r2,r12,r12
  808684:	480ed7fa 	srli	r7,r9,31
  808688:	528d883a 	add	r6,r10,r10
  80868c:	01000044 	movi	r4,1
  808690:	189cb03a 	or	r14,r3,r2
  808694:	4904983a 	sll	r2,r9,r4
  808698:	3986b03a 	or	r3,r7,r6
  80869c:	99bfffc4 	addi	r6,r19,-1
  8086a0:	5adb883a 	add	r13,r11,r11
  8086a4:	3027883a 	mov	r19,r6
  8086a8:	1013883a 	mov	r9,r2
  8086ac:	1815883a 	mov	r10,r3
  8086b0:	110eb03a 	or	r7,r2,r4
  8086b4:	3029883a 	mov	r20,r6
  8086b8:	603fed0e 	bge	r12,zero,808670 <__muldf3+0x304>
  8086bc:	3813883a 	mov	r9,r7
  8086c0:	003feb06 	br	808670 <__muldf3+0x304>
  8086c4:	18800098 	cmpnei	r2,r3,2
  8086c8:	01002074 	movhi	r4,129
  8086cc:	21012504 	addi	r4,r4,1172
  8086d0:	103f411e 	bne	r2,zero,8083d8 <__muldf3+0x6c>
  8086d4:	003f5106 	br	80841c <__muldf3+0xb0>
  8086d8:	9a3fa31e 	bne	r19,r8,808568 <__muldf3+0x1fc>
  8086dc:	24bfa22e 	bgeu	r4,r18,808568 <__muldf3+0x1fc>
  8086e0:	003f9b06 	br	808550 <__muldf3+0x1e4>
  8086e4:	00803fc4 	movi	r2,255
  8086e8:	488c703a 	and	r6,r9,r2
  8086ec:	00802004 	movi	r2,128
  8086f0:	0007883a 	mov	r3,zero
  8086f4:	000f883a 	mov	r7,zero
  8086f8:	dd000c15 	stw	r20,48(sp)
  8086fc:	30800e26 	beq	r6,r2,808738 <__muldf3+0x3cc>
  808700:	008000c4 	movi	r2,3
  808704:	d9000a04 	addi	r4,sp,40
  808708:	da800e15 	stw	r10,56(sp)
  80870c:	d8800a15 	stw	r2,40(sp)
  808710:	da400d15 	stw	r9,52(sp)
  808714:	003f4106 	br	80841c <__muldf3+0xb0>
  808718:	697f9f2e 	bgeu	r13,r5,808598 <__muldf3+0x22c>
  80871c:	00800044 	movi	r2,1
  808720:	5889883a 	add	r4,r11,r2
  808724:	22cd803a 	cmpltu	r6,r4,r11
  808728:	330d883a 	add	r6,r6,r12
  80872c:	2017883a 	mov	r11,r4
  808730:	3019883a 	mov	r12,r6
  808734:	003f9806 	br	808598 <__muldf3+0x22c>
  808738:	383ff11e 	bne	r7,zero,808700 <__muldf3+0x394>
  80873c:	01004004 	movi	r4,256
  808740:	4904703a 	and	r2,r9,r4
  808744:	10c4b03a 	or	r2,r2,r3
  808748:	1000021e 	bne	r2,zero,808754 <__muldf3+0x3e8>
  80874c:	5b04b03a 	or	r2,r11,r12
  808750:	103feb26 	beq	r2,zero,808700 <__muldf3+0x394>
  808754:	4989883a 	add	r4,r9,r6
  808758:	224d803a 	cmpltu	r6,r4,r9
  80875c:	328d883a 	add	r6,r6,r10
  808760:	2013883a 	mov	r9,r4
  808764:	3015883a 	mov	r10,r6
  808768:	003fe506 	br	808700 <__muldf3+0x394>

0080876c <__divdf3>:
  80876c:	deffea04 	addi	sp,sp,-88
  808770:	2011883a 	mov	r8,r4
  808774:	dc001415 	stw	r16,80(sp)
  808778:	d9400b15 	stw	r5,44(sp)
  80877c:	d9000a04 	addi	r4,sp,40
  808780:	d80b883a 	mov	r5,sp
  808784:	dc000504 	addi	r16,sp,20
  808788:	dfc01515 	stw	ra,84(sp)
  80878c:	d9c00d15 	stw	r7,52(sp)
  808790:	da000a15 	stw	r8,40(sp)
  808794:	d9800c15 	stw	r6,48(sp)
  808798:	dc401315 	stw	r17,76(sp)
  80879c:	dc801215 	stw	r18,72(sp)
  8087a0:	dcc01115 	stw	r19,68(sp)
  8087a4:	dd001015 	stw	r20,64(sp)
  8087a8:	dd400f15 	stw	r21,60(sp)
  8087ac:	dd800e15 	stw	r22,56(sp)
  8087b0:	08091e40 	call	8091e4 <__unpack_d>
  8087b4:	d9000c04 	addi	r4,sp,48
  8087b8:	800b883a 	mov	r5,r16
  8087bc:	08091e40 	call	8091e4 <__unpack_d>
  8087c0:	d9400017 	ldw	r5,0(sp)
  8087c4:	00800044 	movi	r2,1
  8087c8:	d83f883a 	mov	ra,sp
  8087cc:	d809883a 	mov	r4,sp
  8087d0:	11404c2e 	bgeu	r2,r5,808904 <__divdf3+0x198>
  8087d4:	81800017 	ldw	r6,0(r16)
  8087d8:	8009883a 	mov	r4,r16
  8087dc:	1180492e 	bgeu	r2,r6,808904 <__divdf3+0x198>
  8087e0:	d8c00117 	ldw	r3,4(sp)
  8087e4:	d9000617 	ldw	r4,24(sp)
  8087e8:	28800120 	cmpeqi	r2,r5,4
  8087ec:	1906f03a 	xor	r3,r3,r4
  8087f0:	d8c00115 	stw	r3,4(sp)
  8087f4:	1000501e 	bne	r2,zero,808938 <__divdf3+0x1cc>
  8087f8:	288000a0 	cmpeqi	r2,r5,2
  8087fc:	10004e1e 	bne	r2,zero,808938 <__divdf3+0x1cc>
  808800:	30800118 	cmpnei	r2,r6,4
  808804:	10005726 	beq	r2,zero,808964 <__divdf3+0x1f8>
  808808:	30800098 	cmpnei	r2,r6,2
  80880c:	10005a26 	beq	r2,zero,808978 <__divdf3+0x20c>
  808810:	d8c00217 	ldw	r3,8(sp)
  808814:	d8800717 	ldw	r2,28(sp)
  808818:	da000417 	ldw	r8,16(sp)
  80881c:	dd800917 	ldw	r22,36(sp)
  808820:	d9c00317 	ldw	r7,12(sp)
  808824:	dd400817 	ldw	r21,32(sp)
  808828:	1893c83a 	sub	r9,r3,r2
  80882c:	4580472e 	bgeu	r8,r22,80894c <__divdf3+0x1e0>
  808830:	39c5883a 	add	r2,r7,r7
  808834:	11cd803a 	cmpltu	r6,r2,r7
  808838:	4207883a 	add	r3,r8,r8
  80883c:	30cd883a 	add	r6,r6,r3
  808840:	493fffc4 	addi	r4,r9,-1
  808844:	100f883a 	mov	r7,r2
  808848:	3011883a 	mov	r8,r6
  80884c:	d9000215 	stw	r4,8(sp)
  808850:	0009883a 	mov	r4,zero
  808854:	01440034 	movhi	r5,4096
  808858:	29400004 	addi	r5,r5,0
  80885c:	2144b03a 	or	r2,r4,r5
  808860:	0027883a 	mov	r19,zero
  808864:	0029883a 	mov	r20,zero
  808868:	1000111e 	bne	r2,zero,8088b0 <__divdf3+0x144>
  80886c:	00001c06 	br	8088e0 <__divdf3+0x174>
  808870:	6827883a 	mov	r19,r13
  808874:	7029883a 	mov	r20,r14
  808878:	580f883a 	mov	r7,r11
  80887c:	1011883a 	mov	r8,r2
  808880:	2820d07a 	srli	r16,r5,1
  808884:	39d3883a 	add	r9,r7,r7
  808888:	30deb03a 	or	r15,r6,r3
  80888c:	49c5803a 	cmpltu	r2,r9,r7
  808890:	4215883a 	add	r10,r8,r8
  808894:	1285883a 	add	r2,r2,r10
  808898:	7c06b03a 	or	r3,r15,r16
  80889c:	7809883a 	mov	r4,r15
  8088a0:	800b883a 	mov	r5,r16
  8088a4:	480f883a 	mov	r7,r9
  8088a8:	1011883a 	mov	r8,r2
  8088ac:	18000c26 	beq	r3,zero,8088e0 <__divdf3+0x174>
  8088b0:	280c97fa 	slli	r6,r5,31
  8088b4:	2006d07a 	srli	r3,r4,1
  8088b8:	45bff136 	bltu	r8,r22,808880 <__divdf3+0x114>
  8088bc:	3d57c83a 	sub	r11,r7,r21
  8088c0:	3ac5803a 	cmpltu	r2,r7,r11
  8088c4:	4599c83a 	sub	r12,r8,r22
  8088c8:	991ab03a 	or	r13,r19,r4
  8088cc:	a15cb03a 	or	r14,r20,r5
  8088d0:	6085c83a 	sub	r2,r12,r2
  8088d4:	b23fe61e 	bne	r22,r8,808870 <__divdf3+0x104>
  8088d8:	3d7fe936 	bltu	r7,r21,808880 <__divdf3+0x114>
  8088dc:	003fe406 	br	808870 <__divdf3+0x104>
  8088e0:	00803fc4 	movi	r2,255
  8088e4:	9892703a 	and	r9,r19,r2
  8088e8:	00802004 	movi	r2,128
  8088ec:	0007883a 	mov	r3,zero
  8088f0:	0015883a 	mov	r10,zero
  8088f4:	48802426 	beq	r9,r2,808988 <__divdf3+0x21c>
  8088f8:	fd000415 	stw	r20,16(ra)
  8088fc:	fcc00315 	stw	r19,12(ra)
  808900:	f809883a 	mov	r4,ra
  808904:	0808f540 	call	808f54 <__pack_d>
  808908:	1009883a 	mov	r4,r2
  80890c:	2005883a 	mov	r2,r4
  808910:	dfc01517 	ldw	ra,84(sp)
  808914:	dc001417 	ldw	r16,80(sp)
  808918:	dc401317 	ldw	r17,76(sp)
  80891c:	dc801217 	ldw	r18,72(sp)
  808920:	dcc01117 	ldw	r19,68(sp)
  808924:	dd001017 	ldw	r20,64(sp)
  808928:	dd400f17 	ldw	r21,60(sp)
  80892c:	dd800e17 	ldw	r22,56(sp)
  808930:	dec01604 	addi	sp,sp,88
  808934:	f800283a 	ret
  808938:	01002074 	movhi	r4,129
  80893c:	21012504 	addi	r4,r4,1172
  808940:	29bff026 	beq	r5,r6,808904 <__divdf3+0x198>
  808944:	d809883a 	mov	r4,sp
  808948:	003fee06 	br	808904 <__divdf3+0x198>
  80894c:	b2000226 	beq	r22,r8,808958 <__divdf3+0x1ec>
  808950:	da400215 	stw	r9,8(sp)
  808954:	003fbe06 	br	808850 <__divdf3+0xe4>
  808958:	3d7fb536 	bltu	r7,r21,808830 <__divdf3+0xc4>
  80895c:	da400215 	stw	r9,8(sp)
  808960:	003fbb06 	br	808850 <__divdf3+0xe4>
  808964:	d809883a 	mov	r4,sp
  808968:	d8000315 	stw	zero,12(sp)
  80896c:	d8000415 	stw	zero,16(sp)
  808970:	d8000215 	stw	zero,8(sp)
  808974:	003fe306 	br	808904 <__divdf3+0x198>
  808978:	00800104 	movi	r2,4
  80897c:	d809883a 	mov	r4,sp
  808980:	d8800015 	stw	r2,0(sp)
  808984:	003fdf06 	br	808904 <__divdf3+0x198>
  808988:	503fdb1e 	bne	r10,zero,8088f8 <__divdf3+0x18c>
  80898c:	01004004 	movi	r4,256
  808990:	9904703a 	and	r2,r19,r4
  808994:	10c4b03a 	or	r2,r2,r3
  808998:	1000021e 	bne	r2,zero,8089a4 <__divdf3+0x238>
  80899c:	3a04b03a 	or	r2,r7,r8
  8089a0:	103fd526 	beq	r2,zero,8088f8 <__divdf3+0x18c>
  8089a4:	9a49883a 	add	r4,r19,r9
  8089a8:	24cd803a 	cmpltu	r6,r4,r19
  8089ac:	350d883a 	add	r6,r6,r20
  8089b0:	2027883a 	mov	r19,r4
  8089b4:	3029883a 	mov	r20,r6
  8089b8:	003fcf06 	br	8088f8 <__divdf3+0x18c>

008089bc <__eqdf2>:
  8089bc:	defff004 	addi	sp,sp,-64
  8089c0:	2005883a 	mov	r2,r4
  8089c4:	dc000e15 	stw	r16,56(sp)
  8089c8:	d9400b15 	stw	r5,44(sp)
  8089cc:	d9000a04 	addi	r4,sp,40
  8089d0:	d80b883a 	mov	r5,sp
  8089d4:	dc000504 	addi	r16,sp,20
  8089d8:	d8800a15 	stw	r2,40(sp)
  8089dc:	d9800c15 	stw	r6,48(sp)
  8089e0:	dfc00f15 	stw	ra,60(sp)
  8089e4:	d9c00d15 	stw	r7,52(sp)
  8089e8:	08091e40 	call	8091e4 <__unpack_d>
  8089ec:	d9000c04 	addi	r4,sp,48
  8089f0:	800b883a 	mov	r5,r16
  8089f4:	08091e40 	call	8091e4 <__unpack_d>
  8089f8:	d8800017 	ldw	r2,0(sp)
  8089fc:	00c00044 	movi	r3,1
  808a00:	180d883a 	mov	r6,r3
  808a04:	1880042e 	bgeu	r3,r2,808a18 <__eqdf2+0x5c>
  808a08:	80800017 	ldw	r2,0(r16)
  808a0c:	800b883a 	mov	r5,r16
  808a10:	d809883a 	mov	r4,sp
  808a14:	18800536 	bltu	r3,r2,808a2c <__eqdf2+0x70>
  808a18:	3005883a 	mov	r2,r6
  808a1c:	dfc00f17 	ldw	ra,60(sp)
  808a20:	dc000e17 	ldw	r16,56(sp)
  808a24:	dec01004 	addi	sp,sp,64
  808a28:	f800283a 	ret
  808a2c:	080930c0 	call	80930c <__fpcmp_parts_d>
  808a30:	100d883a 	mov	r6,r2
  808a34:	3005883a 	mov	r2,r6
  808a38:	dfc00f17 	ldw	ra,60(sp)
  808a3c:	dc000e17 	ldw	r16,56(sp)
  808a40:	dec01004 	addi	sp,sp,64
  808a44:	f800283a 	ret

00808a48 <__nedf2>:
  808a48:	defff004 	addi	sp,sp,-64
  808a4c:	2005883a 	mov	r2,r4
  808a50:	dc000e15 	stw	r16,56(sp)
  808a54:	d9400b15 	stw	r5,44(sp)
  808a58:	d9000a04 	addi	r4,sp,40
  808a5c:	d80b883a 	mov	r5,sp
  808a60:	dc000504 	addi	r16,sp,20
  808a64:	d8800a15 	stw	r2,40(sp)
  808a68:	d9800c15 	stw	r6,48(sp)
  808a6c:	dfc00f15 	stw	ra,60(sp)
  808a70:	d9c00d15 	stw	r7,52(sp)
  808a74:	08091e40 	call	8091e4 <__unpack_d>
  808a78:	d9000c04 	addi	r4,sp,48
  808a7c:	800b883a 	mov	r5,r16
  808a80:	08091e40 	call	8091e4 <__unpack_d>
  808a84:	d8800017 	ldw	r2,0(sp)
  808a88:	00c00044 	movi	r3,1
  808a8c:	180d883a 	mov	r6,r3
  808a90:	1880042e 	bgeu	r3,r2,808aa4 <__nedf2+0x5c>
  808a94:	80800017 	ldw	r2,0(r16)
  808a98:	800b883a 	mov	r5,r16
  808a9c:	d809883a 	mov	r4,sp
  808aa0:	18800536 	bltu	r3,r2,808ab8 <__nedf2+0x70>
  808aa4:	3005883a 	mov	r2,r6
  808aa8:	dfc00f17 	ldw	ra,60(sp)
  808aac:	dc000e17 	ldw	r16,56(sp)
  808ab0:	dec01004 	addi	sp,sp,64
  808ab4:	f800283a 	ret
  808ab8:	080930c0 	call	80930c <__fpcmp_parts_d>
  808abc:	100d883a 	mov	r6,r2
  808ac0:	3005883a 	mov	r2,r6
  808ac4:	dfc00f17 	ldw	ra,60(sp)
  808ac8:	dc000e17 	ldw	r16,56(sp)
  808acc:	dec01004 	addi	sp,sp,64
  808ad0:	f800283a 	ret

00808ad4 <__gtdf2>:
  808ad4:	defff004 	addi	sp,sp,-64
  808ad8:	2005883a 	mov	r2,r4
  808adc:	dc000e15 	stw	r16,56(sp)
  808ae0:	d9400b15 	stw	r5,44(sp)
  808ae4:	d9000a04 	addi	r4,sp,40
  808ae8:	d80b883a 	mov	r5,sp
  808aec:	dc000504 	addi	r16,sp,20
  808af0:	d8800a15 	stw	r2,40(sp)
  808af4:	d9800c15 	stw	r6,48(sp)
  808af8:	dfc00f15 	stw	ra,60(sp)
  808afc:	d9c00d15 	stw	r7,52(sp)
  808b00:	08091e40 	call	8091e4 <__unpack_d>
  808b04:	d9000c04 	addi	r4,sp,48
  808b08:	800b883a 	mov	r5,r16
  808b0c:	08091e40 	call	8091e4 <__unpack_d>
  808b10:	d8800017 	ldw	r2,0(sp)
  808b14:	00c00044 	movi	r3,1
  808b18:	01bfffc4 	movi	r6,-1
  808b1c:	1880042e 	bgeu	r3,r2,808b30 <__gtdf2+0x5c>
  808b20:	80800017 	ldw	r2,0(r16)
  808b24:	800b883a 	mov	r5,r16
  808b28:	d809883a 	mov	r4,sp
  808b2c:	18800536 	bltu	r3,r2,808b44 <__gtdf2+0x70>
  808b30:	3005883a 	mov	r2,r6
  808b34:	dfc00f17 	ldw	ra,60(sp)
  808b38:	dc000e17 	ldw	r16,56(sp)
  808b3c:	dec01004 	addi	sp,sp,64
  808b40:	f800283a 	ret
  808b44:	080930c0 	call	80930c <__fpcmp_parts_d>
  808b48:	100d883a 	mov	r6,r2
  808b4c:	3005883a 	mov	r2,r6
  808b50:	dfc00f17 	ldw	ra,60(sp)
  808b54:	dc000e17 	ldw	r16,56(sp)
  808b58:	dec01004 	addi	sp,sp,64
  808b5c:	f800283a 	ret

00808b60 <__gedf2>:
  808b60:	defff004 	addi	sp,sp,-64
  808b64:	2005883a 	mov	r2,r4
  808b68:	dc000e15 	stw	r16,56(sp)
  808b6c:	d9400b15 	stw	r5,44(sp)
  808b70:	d9000a04 	addi	r4,sp,40
  808b74:	d80b883a 	mov	r5,sp
  808b78:	dc000504 	addi	r16,sp,20
  808b7c:	d8800a15 	stw	r2,40(sp)
  808b80:	d9800c15 	stw	r6,48(sp)
  808b84:	dfc00f15 	stw	ra,60(sp)
  808b88:	d9c00d15 	stw	r7,52(sp)
  808b8c:	08091e40 	call	8091e4 <__unpack_d>
  808b90:	d9000c04 	addi	r4,sp,48
  808b94:	800b883a 	mov	r5,r16
  808b98:	08091e40 	call	8091e4 <__unpack_d>
  808b9c:	d8800017 	ldw	r2,0(sp)
  808ba0:	00c00044 	movi	r3,1
  808ba4:	01bfffc4 	movi	r6,-1
  808ba8:	1880042e 	bgeu	r3,r2,808bbc <__gedf2+0x5c>
  808bac:	80800017 	ldw	r2,0(r16)
  808bb0:	800b883a 	mov	r5,r16
  808bb4:	d809883a 	mov	r4,sp
  808bb8:	18800536 	bltu	r3,r2,808bd0 <__gedf2+0x70>
  808bbc:	3005883a 	mov	r2,r6
  808bc0:	dfc00f17 	ldw	ra,60(sp)
  808bc4:	dc000e17 	ldw	r16,56(sp)
  808bc8:	dec01004 	addi	sp,sp,64
  808bcc:	f800283a 	ret
  808bd0:	080930c0 	call	80930c <__fpcmp_parts_d>
  808bd4:	100d883a 	mov	r6,r2
  808bd8:	3005883a 	mov	r2,r6
  808bdc:	dfc00f17 	ldw	ra,60(sp)
  808be0:	dc000e17 	ldw	r16,56(sp)
  808be4:	dec01004 	addi	sp,sp,64
  808be8:	f800283a 	ret

00808bec <__ltdf2>:
  808bec:	defff004 	addi	sp,sp,-64
  808bf0:	2005883a 	mov	r2,r4
  808bf4:	dc000e15 	stw	r16,56(sp)
  808bf8:	d9400b15 	stw	r5,44(sp)
  808bfc:	d9000a04 	addi	r4,sp,40
  808c00:	d80b883a 	mov	r5,sp
  808c04:	dc000504 	addi	r16,sp,20
  808c08:	d8800a15 	stw	r2,40(sp)
  808c0c:	d9800c15 	stw	r6,48(sp)
  808c10:	dfc00f15 	stw	ra,60(sp)
  808c14:	d9c00d15 	stw	r7,52(sp)
  808c18:	08091e40 	call	8091e4 <__unpack_d>
  808c1c:	d9000c04 	addi	r4,sp,48
  808c20:	800b883a 	mov	r5,r16
  808c24:	08091e40 	call	8091e4 <__unpack_d>
  808c28:	d8800017 	ldw	r2,0(sp)
  808c2c:	00c00044 	movi	r3,1
  808c30:	180d883a 	mov	r6,r3
  808c34:	1880042e 	bgeu	r3,r2,808c48 <__ltdf2+0x5c>
  808c38:	80800017 	ldw	r2,0(r16)
  808c3c:	800b883a 	mov	r5,r16
  808c40:	d809883a 	mov	r4,sp
  808c44:	18800536 	bltu	r3,r2,808c5c <__ltdf2+0x70>
  808c48:	3005883a 	mov	r2,r6
  808c4c:	dfc00f17 	ldw	ra,60(sp)
  808c50:	dc000e17 	ldw	r16,56(sp)
  808c54:	dec01004 	addi	sp,sp,64
  808c58:	f800283a 	ret
  808c5c:	080930c0 	call	80930c <__fpcmp_parts_d>
  808c60:	100d883a 	mov	r6,r2
  808c64:	3005883a 	mov	r2,r6
  808c68:	dfc00f17 	ldw	ra,60(sp)
  808c6c:	dc000e17 	ldw	r16,56(sp)
  808c70:	dec01004 	addi	sp,sp,64
  808c74:	f800283a 	ret

00808c78 <__floatsidf>:
  808c78:	2006d7fa 	srli	r3,r4,31
  808c7c:	defffa04 	addi	sp,sp,-24
  808c80:	dfc00515 	stw	ra,20(sp)
  808c84:	d8c00115 	stw	r3,4(sp)
  808c88:	20000b1e 	bne	r4,zero,808cb8 <__floatsidf+0x40>
  808c8c:	00800084 	movi	r2,2
  808c90:	d8800015 	stw	r2,0(sp)
  808c94:	d809883a 	mov	r4,sp
  808c98:	0808f540 	call	808f54 <__pack_d>
  808c9c:	100d883a 	mov	r6,r2
  808ca0:	180f883a 	mov	r7,r3
  808ca4:	3807883a 	mov	r3,r7
  808ca8:	3005883a 	mov	r2,r6
  808cac:	dfc00517 	ldw	ra,20(sp)
  808cb0:	dec00604 	addi	sp,sp,24
  808cb4:	f800283a 	ret
  808cb8:	02c00f04 	movi	r11,60
  808cbc:	008000c4 	movi	r2,3
  808cc0:	d8800015 	stw	r2,0(sp)
  808cc4:	5815883a 	mov	r10,r11
  808cc8:	18000426 	beq	r3,zero,808cdc <__floatsidf+0x64>
  808ccc:	00a00034 	movhi	r2,32768
  808cd0:	10800004 	addi	r2,r2,0
  808cd4:	20801726 	beq	r4,r2,808d34 <__floatsidf+0xbc>
  808cd8:	0109c83a 	sub	r4,zero,r4
  808cdc:	2007d7fa 	srai	r3,r4,31
  808ce0:	03040034 	movhi	r12,4096
  808ce4:	633fffc4 	addi	r12,r12,-1
  808ce8:	d9000315 	stw	r4,12(sp)
  808cec:	d8c00415 	stw	r3,16(sp)
  808cf0:	da400417 	ldw	r9,16(sp)
  808cf4:	62400d36 	bltu	r12,r9,808d2c <__floatsidf+0xb4>
  808cf8:	d8800317 	ldw	r2,12(sp)
  808cfc:	d8c00417 	ldw	r3,16(sp)
  808d00:	51bfffc4 	addi	r6,r10,-1
  808d04:	3015883a 	mov	r10,r6
  808d08:	3017883a 	mov	r11,r6
  808d0c:	100ed7fa 	srli	r7,r2,31
  808d10:	18cd883a 	add	r6,r3,r3
  808d14:	1089883a 	add	r4,r2,r2
  808d18:	398ab03a 	or	r5,r7,r6
  808d1c:	2813883a 	mov	r9,r5
  808d20:	d9000315 	stw	r4,12(sp)
  808d24:	d9400415 	stw	r5,16(sp)
  808d28:	627ff32e 	bgeu	r12,r9,808cf8 <__floatsidf+0x80>
  808d2c:	dac00215 	stw	r11,8(sp)
  808d30:	003fd806 	br	808c94 <__floatsidf+0x1c>
  808d34:	000d883a 	mov	r6,zero
  808d38:	01f07834 	movhi	r7,49632
  808d3c:	39c00004 	addi	r7,r7,0
  808d40:	dac00215 	stw	r11,8(sp)
  808d44:	003fd706 	br	808ca4 <__floatsidf+0x2c>

00808d48 <__fixdfsi>:
  808d48:	defff804 	addi	sp,sp,-32
  808d4c:	2005883a 	mov	r2,r4
  808d50:	d9400615 	stw	r5,24(sp)
  808d54:	d9000504 	addi	r4,sp,20
  808d58:	d80b883a 	mov	r5,sp
  808d5c:	d8800515 	stw	r2,20(sp)
  808d60:	dfc00715 	stw	ra,28(sp)
  808d64:	08091e40 	call	8091e4 <__unpack_d>
  808d68:	d8c00017 	ldw	r3,0(sp)
  808d6c:	000b883a 	mov	r5,zero
  808d70:	18800098 	cmpnei	r2,r3,2
  808d74:	10000f26 	beq	r2,zero,808db4 <__fixdfsi+0x6c>
  808d78:	00800044 	movi	r2,1
  808d7c:	10c00d2e 	bgeu	r2,r3,808db4 <__fixdfsi+0x6c>
  808d80:	18800118 	cmpnei	r2,r3,4
  808d84:	10000526 	beq	r2,zero,808d9c <__fixdfsi+0x54>
  808d88:	d9000217 	ldw	r4,8(sp)
  808d8c:	000b883a 	mov	r5,zero
  808d90:	20000816 	blt	r4,zero,808db4 <__fixdfsi+0x6c>
  808d94:	00800784 	movi	r2,30
  808d98:	11000a0e 	bge	r2,r4,808dc4 <__fixdfsi+0x7c>
  808d9c:	d8800117 	ldw	r2,4(sp)
  808da0:	00e00034 	movhi	r3,32768
  808da4:	18c00004 	addi	r3,r3,0
  808da8:	1000011e 	bne	r2,zero,808db0 <__fixdfsi+0x68>
  808dac:	18ffffc4 	addi	r3,r3,-1
  808db0:	180b883a 	mov	r5,r3
  808db4:	2805883a 	mov	r2,r5
  808db8:	dfc00717 	ldw	ra,28(sp)
  808dbc:	dec00804 	addi	sp,sp,32
  808dc0:	f800283a 	ret
  808dc4:	d8800317 	ldw	r2,12(sp)
  808dc8:	d8c00417 	ldw	r3,16(sp)
  808dcc:	01800f04 	movi	r6,60
  808dd0:	310dc83a 	sub	r6,r6,r4
  808dd4:	180b883a 	mov	r5,r3
  808dd8:	1009883a 	mov	r4,r2
  808ddc:	0808f040 	call	808f04 <__lshrdi3>
  808de0:	1007883a 	mov	r3,r2
  808de4:	d8800117 	ldw	r2,4(sp)
  808de8:	103ff126 	beq	r2,zero,808db0 <__fixdfsi+0x68>
  808dec:	00c7c83a 	sub	r3,zero,r3
  808df0:	180b883a 	mov	r5,r3
  808df4:	003fef06 	br	808db4 <__fixdfsi+0x6c>

00808df8 <__muldi3>:
  808df8:	defff404 	addi	sp,sp,-48
  808dfc:	dc400a15 	stw	r17,40(sp)
  808e00:	ddc00615 	stw	r23,24(sp)
  808e04:	247fffcc 	andi	r17,r4,65535
  808e08:	35ffffcc 	andi	r23,r6,65535
  808e0c:	d9000015 	stw	r4,0(sp)
  808e10:	d9400115 	stw	r5,4(sp)
  808e14:	8809883a 	mov	r4,r17
  808e18:	b80b883a 	mov	r5,r23
  808e1c:	d9800215 	stw	r6,8(sp)
  808e20:	d9c00315 	stw	r7,12(sp)
  808e24:	dfc00b15 	stw	ra,44(sp)
  808e28:	dcc00915 	stw	r19,36(sp)
  808e2c:	dd000815 	stw	r20,32(sp)
  808e30:	dd400715 	stw	r21,28(sp)
  808e34:	3028d43a 	srli	r20,r6,16
  808e38:	08006ec0 	call	8006ec <__mulsi3>
  808e3c:	1027883a 	mov	r19,r2
  808e40:	d8800017 	ldw	r2,0(sp)
  808e44:	8809883a 	mov	r4,r17
  808e48:	a00b883a 	mov	r5,r20
  808e4c:	102ad43a 	srli	r21,r2,16
  808e50:	08006ec0 	call	8006ec <__mulsi3>
  808e54:	b80b883a 	mov	r5,r23
  808e58:	a809883a 	mov	r4,r21
  808e5c:	1023883a 	mov	r17,r2
  808e60:	08006ec0 	call	8006ec <__mulsi3>
  808e64:	a809883a 	mov	r4,r21
  808e68:	a00b883a 	mov	r5,r20
  808e6c:	102f883a 	mov	r23,r2
  808e70:	08006ec0 	call	8006ec <__mulsi3>
  808e74:	98ffffcc 	andi	r3,r19,65535
  808e78:	9826d43a 	srli	r19,r19,16
  808e7c:	100d883a 	mov	r6,r2
  808e80:	d9000017 	ldw	r4,0(sp)
  808e84:	8ce3883a 	add	r17,r17,r19
  808e88:	8de3883a 	add	r17,r17,r23
  808e8c:	8804943a 	slli	r2,r17,16
  808e90:	d9400317 	ldw	r5,12(sp)
  808e94:	880ed43a 	srli	r7,r17,16
  808e98:	10c7883a 	add	r3,r2,r3
  808e9c:	1811883a 	mov	r8,r3
  808ea0:	8dc0032e 	bgeu	r17,r23,808eb0 <__muldi3+0xb8>
  808ea4:	00800074 	movhi	r2,1
  808ea8:	10800004 	addi	r2,r2,0
  808eac:	308d883a 	add	r6,r6,r2
  808eb0:	39ab883a 	add	r21,r7,r6
  808eb4:	da000415 	stw	r8,16(sp)
  808eb8:	da400515 	stw	r9,20(sp)
  808ebc:	08006ec0 	call	8006ec <__mulsi3>
  808ec0:	d9000117 	ldw	r4,4(sp)
  808ec4:	d9400217 	ldw	r5,8(sp)
  808ec8:	1023883a 	mov	r17,r2
  808ecc:	08006ec0 	call	8006ec <__mulsi3>
  808ed0:	da000417 	ldw	r8,16(sp)
  808ed4:	88a3883a 	add	r17,r17,r2
  808ed8:	8d4f883a 	add	r7,r17,r21
  808edc:	4005883a 	mov	r2,r8
  808ee0:	3807883a 	mov	r3,r7
  808ee4:	dfc00b17 	ldw	ra,44(sp)
  808ee8:	dc400a17 	ldw	r17,40(sp)
  808eec:	dcc00917 	ldw	r19,36(sp)
  808ef0:	dd000817 	ldw	r20,32(sp)
  808ef4:	dd400717 	ldw	r21,28(sp)
  808ef8:	ddc00617 	ldw	r23,24(sp)
  808efc:	dec00c04 	addi	sp,sp,48
  808f00:	f800283a 	ret

00808f04 <__lshrdi3>:
  808f04:	00800804 	movi	r2,32
  808f08:	119bc83a 	sub	r13,r2,r6
  808f0c:	2013883a 	mov	r9,r4
  808f10:	2005883a 	mov	r2,r4
  808f14:	2815883a 	mov	r10,r5
  808f18:	30000826 	beq	r6,zero,808f3c <__lshrdi3+0x38>
  808f1c:	1186d83a 	srl	r3,r2,r6
  808f20:	0349c83a 	sub	r4,zero,r13
  808f24:	2b44983a 	sll	r2,r5,r13
  808f28:	0340070e 	bge	zero,r13,808f48 <__lshrdi3+0x44>
  808f2c:	2998d83a 	srl	r12,r5,r6
  808f30:	1896b03a 	or	r11,r3,r2
  808f34:	5813883a 	mov	r9,r11
  808f38:	6015883a 	mov	r10,r12
  808f3c:	5007883a 	mov	r3,r10
  808f40:	4805883a 	mov	r2,r9
  808f44:	f800283a 	ret
  808f48:	2916d83a 	srl	r11,r5,r4
  808f4c:	0019883a 	mov	r12,zero
  808f50:	003ff806 	br	808f34 <__lshrdi3+0x30>

00808f54 <__pack_d>:
  808f54:	defff604 	addi	sp,sp,-40
  808f58:	dcc00415 	stw	r19,16(sp)
  808f5c:	dd000315 	stw	r20,12(sp)
  808f60:	dd400215 	stw	r21,8(sp)
  808f64:	dfc00915 	stw	ra,36(sp)
  808f68:	df000815 	stw	fp,32(sp)
  808f6c:	dc000715 	stw	r16,28(sp)
  808f70:	dc400615 	stw	r17,24(sp)
  808f74:	dc800515 	stw	r18,20(sp)
  808f78:	dd800115 	stw	r22,4(sp)
  808f7c:	ddc00015 	stw	r23,0(sp)
  808f80:	20c00017 	ldw	r3,0(r4)
  808f84:	05000044 	movi	r20,1
  808f88:	24000317 	ldw	r16,12(r4)
  808f8c:	0027883a 	mov	r19,zero
  808f90:	24400417 	ldw	r17,16(r4)
  808f94:	25c00117 	ldw	r23,4(r4)
  808f98:	002b883a 	mov	r21,zero
  808f9c:	a0c02636 	bltu	r20,r3,809038 <__pack_d+0xe4>
  808fa0:	0005883a 	mov	r2,zero
  808fa4:	00c00234 	movhi	r3,8
  808fa8:	18c00004 	addi	r3,r3,0
  808fac:	8088b03a 	or	r4,r16,r2
  808fb0:	88cab03a 	or	r5,r17,r3
  808fb4:	2021883a 	mov	r16,r4
  808fb8:	2823883a 	mov	r17,r5
  808fbc:	0541ffc4 	movi	r21,2047
  808fc0:	a941ffcc 	andi	r5,r21,2047
  808fc4:	00c00434 	movhi	r3,16
  808fc8:	18ffffc4 	addi	r3,r3,-1
  808fcc:	88c6703a 	and	r3,r17,r3
  808fd0:	280a953a 	slli	r5,r5,20
  808fd4:	993ffc2c 	andhi	r4,r19,65520
  808fd8:	20e6b03a 	or	r19,r4,r3
  808fdc:	00a00434 	movhi	r2,32784
  808fe0:	10bfffc4 	addi	r2,r2,-1
  808fe4:	b80697fa 	slli	r3,r23,31
  808fe8:	9884703a 	and	r2,r19,r2
  808fec:	1166b03a 	or	r19,r2,r5
  808ff0:	01e00034 	movhi	r7,32768
  808ff4:	39ffffc4 	addi	r7,r7,-1
  808ff8:	99ce703a 	and	r7,r19,r7
  808ffc:	38ceb03a 	or	r7,r7,r3
  809000:	8005883a 	mov	r2,r16
  809004:	3807883a 	mov	r3,r7
  809008:	dfc00917 	ldw	ra,36(sp)
  80900c:	df000817 	ldw	fp,32(sp)
  809010:	dc000717 	ldw	r16,28(sp)
  809014:	dc400617 	ldw	r17,24(sp)
  809018:	dc800517 	ldw	r18,20(sp)
  80901c:	dcc00417 	ldw	r19,16(sp)
  809020:	dd000317 	ldw	r20,12(sp)
  809024:	dd400217 	ldw	r21,8(sp)
  809028:	dd800117 	ldw	r22,4(sp)
  80902c:	ddc00017 	ldw	r23,0(sp)
  809030:	dec00a04 	addi	sp,sp,40
  809034:	f800283a 	ret
  809038:	18800118 	cmpnei	r2,r3,4
  80903c:	10003926 	beq	r2,zero,809124 <__pack_d+0x1d0>
  809040:	18800098 	cmpnei	r2,r3,2
  809044:	10003b26 	beq	r2,zero,809134 <__pack_d+0x1e0>
  809048:	8444b03a 	or	r2,r16,r17
  80904c:	103fdc26 	beq	r2,zero,808fc0 <__pack_d+0x6c>
  809050:	21000217 	ldw	r4,8(r4)
  809054:	01bf0084 	movi	r6,-1022
  809058:	2180300e 	bge	r4,r6,80911c <__pack_d+0x1c8>
  80905c:	312dc83a 	sub	r22,r6,r4
  809060:	00800e04 	movi	r2,56
  809064:	15804e16 	blt	r2,r22,8091a0 <__pack_d+0x24c>
  809068:	a009883a 	mov	r4,r20
  80906c:	000b883a 	mov	r5,zero
  809070:	b00d883a 	mov	r6,r22
  809074:	08094200 	call	809420 <__ashldi3>
  809078:	01bfffc4 	movi	r6,-1
  80907c:	1189883a 	add	r4,r2,r6
  809080:	2095803a 	cmpltu	r10,r4,r2
  809084:	198b883a 	add	r5,r3,r6
  809088:	514b883a 	add	r5,r10,r5
  80908c:	2404703a 	and	r2,r4,r16
  809090:	2c46703a 	and	r3,r5,r17
  809094:	10c4b03a 	or	r2,r2,r3
  809098:	0039883a 	mov	fp,zero
  80909c:	10000126 	beq	r2,zero,8090a4 <__pack_d+0x150>
  8090a0:	a039883a 	mov	fp,r20
  8090a4:	880b883a 	mov	r5,r17
  8090a8:	8009883a 	mov	r4,r16
  8090ac:	b00d883a 	mov	r6,r22
  8090b0:	0808f040 	call	808f04 <__lshrdi3>
  8090b4:	000b883a 	mov	r5,zero
  8090b8:	1720b03a 	or	r16,r2,fp
  8090bc:	1962b03a 	or	r17,r3,r5
  8090c0:	00803fc4 	movi	r2,255
  8090c4:	808c703a 	and	r6,r16,r2
  8090c8:	00802004 	movi	r2,128
  8090cc:	0007883a 	mov	r3,zero
  8090d0:	000f883a 	mov	r7,zero
  8090d4:	30803526 	beq	r6,r2,8091ac <__pack_d+0x258>
  8090d8:	00801fc4 	movi	r2,127
  8090dc:	8089883a 	add	r4,r16,r2
  8090e0:	240d803a 	cmpltu	r6,r4,r16
  8090e4:	344d883a 	add	r6,r6,r17
  8090e8:	2021883a 	mov	r16,r4
  8090ec:	3023883a 	mov	r17,r6
  8090f0:	00840034 	movhi	r2,4096
  8090f4:	10bfffc4 	addi	r2,r2,-1
  8090f8:	1440012e 	bgeu	r2,r17,809100 <__pack_d+0x1ac>
  8090fc:	05400044 	movi	r21,1
  809100:	880a963a 	slli	r5,r17,24
  809104:	8008d23a 	srli	r4,r16,8
  809108:	8806d23a 	srli	r3,r17,8
  80910c:	2904b03a 	or	r2,r5,r4
  809110:	1021883a 	mov	r16,r2
  809114:	1823883a 	mov	r17,r3
  809118:	003fa906 	br	808fc0 <__pack_d+0x6c>
  80911c:	0080ffc4 	movi	r2,1023
  809120:	1100070e 	bge	r2,r4,809140 <__pack_d+0x1ec>
  809124:	0021883a 	mov	r16,zero
  809128:	0541ffc4 	movi	r21,2047
  80912c:	0023883a 	mov	r17,zero
  809130:	003fa306 	br	808fc0 <__pack_d+0x6c>
  809134:	0021883a 	mov	r16,zero
  809138:	0023883a 	mov	r17,zero
  80913c:	003fa006 	br	808fc0 <__pack_d+0x6c>
  809140:	00803fc4 	movi	r2,255
  809144:	808e703a 	and	r7,r16,r2
  809148:	00802004 	movi	r2,128
  80914c:	0007883a 	mov	r3,zero
  809150:	0011883a 	mov	r8,zero
  809154:	2540ffc4 	addi	r21,r4,1023
  809158:	38801b26 	beq	r7,r2,8091c8 <__pack_d+0x274>
  80915c:	00801fc4 	movi	r2,127
  809160:	8089883a 	add	r4,r16,r2
  809164:	240d803a 	cmpltu	r6,r4,r16
  809168:	344d883a 	add	r6,r6,r17
  80916c:	2021883a 	mov	r16,r4
  809170:	3023883a 	mov	r17,r6
  809174:	00880034 	movhi	r2,8192
  809178:	10bfffc4 	addi	r2,r2,-1
  80917c:	147fe02e 	bgeu	r2,r17,809100 <__pack_d+0x1ac>
  809180:	880a97fa 	slli	r5,r17,31
  809184:	8008d07a 	srli	r4,r16,1
  809188:	8806d07a 	srli	r3,r17,1
  80918c:	ad400044 	addi	r21,r21,1
  809190:	2904b03a 	or	r2,r5,r4
  809194:	1021883a 	mov	r16,r2
  809198:	1823883a 	mov	r17,r3
  80919c:	003fd806 	br	809100 <__pack_d+0x1ac>
  8091a0:	0021883a 	mov	r16,zero
  8091a4:	0023883a 	mov	r17,zero
  8091a8:	003fc506 	br	8090c0 <__pack_d+0x16c>
  8091ac:	383fca1e 	bne	r7,zero,8090d8 <__pack_d+0x184>
  8091b0:	01004004 	movi	r4,256
  8091b4:	8104703a 	and	r2,r16,r4
  8091b8:	10c4b03a 	or	r2,r2,r3
  8091bc:	103fcc26 	beq	r2,zero,8090f0 <__pack_d+0x19c>
  8091c0:	3005883a 	mov	r2,r6
  8091c4:	003fc506 	br	8090dc <__pack_d+0x188>
  8091c8:	403fe41e 	bne	r8,zero,80915c <__pack_d+0x208>
  8091cc:	01004004 	movi	r4,256
  8091d0:	8104703a 	and	r2,r16,r4
  8091d4:	10c4b03a 	or	r2,r2,r3
  8091d8:	103fe626 	beq	r2,zero,809174 <__pack_d+0x220>
  8091dc:	3805883a 	mov	r2,r7
  8091e0:	003fdf06 	br	809160 <__pack_d+0x20c>

008091e4 <__unpack_d>:
  8091e4:	21800117 	ldw	r6,4(r4)
  8091e8:	00800434 	movhi	r2,16
  8091ec:	10bfffc4 	addi	r2,r2,-1
  8091f0:	22400017 	ldw	r9,0(r4)
  8091f4:	3010d53a 	srli	r8,r6,20
  8091f8:	3006d7fa 	srli	r3,r6,31
  8091fc:	2817883a 	mov	r11,r5
  809200:	4201ffcc 	andi	r8,r8,2047
  809204:	28c00115 	stw	r3,4(r5)
  809208:	3094703a 	and	r10,r6,r2
  80920c:	4000051e 	bne	r8,zero,809224 <__unpack_d+0x40>
  809210:	4a84b03a 	or	r2,r9,r10
  809214:	1000151e 	bne	r2,zero,80926c <__unpack_d+0x88>
  809218:	00800084 	movi	r2,2
  80921c:	58800015 	stw	r2,0(r11)
  809220:	f800283a 	ret
  809224:	0081ffc4 	movi	r2,2047
  809228:	40802a26 	beq	r8,r2,8092d4 <__unpack_d+0xf0>
  80922c:	480ad63a 	srli	r5,r9,24
  809230:	5008923a 	slli	r4,r10,8
  809234:	480c923a 	slli	r6,r9,8
  809238:	0005883a 	mov	r2,zero
  80923c:	290eb03a 	or	r7,r5,r4
  809240:	00c40034 	movhi	r3,4096
  809244:	18c00004 	addi	r3,r3,0
  809248:	3088b03a 	or	r4,r6,r2
  80924c:	423f0044 	addi	r8,r8,-1023
  809250:	38cab03a 	or	r5,r7,r3
  809254:	008000c4 	movi	r2,3
  809258:	59400415 	stw	r5,16(r11)
  80925c:	5a000215 	stw	r8,8(r11)
  809260:	58800015 	stw	r2,0(r11)
  809264:	59000315 	stw	r4,12(r11)
  809268:	f800283a 	ret
  80926c:	5008923a 	slli	r4,r10,8
  809270:	480ad63a 	srli	r5,r9,24
  809274:	4804923a 	slli	r2,r9,8
  809278:	01bf0084 	movi	r6,-1022
  80927c:	2906b03a 	or	r3,r5,r4
  809280:	02040034 	movhi	r8,4096
  809284:	423fffc4 	addi	r8,r8,-1
  809288:	010000c4 	movi	r4,3
  80928c:	1815883a 	mov	r10,r3
  809290:	59000015 	stw	r4,0(r11)
  809294:	1013883a 	mov	r9,r2
  809298:	300f883a 	mov	r7,r6
  80929c:	42800936 	bltu	r8,r10,8092c4 <__unpack_d+0xe0>
  8092a0:	480ad7fa 	srli	r5,r9,31
  8092a4:	5289883a 	add	r4,r10,r10
  8092a8:	4a45883a 	add	r2,r9,r9
  8092ac:	31bfffc4 	addi	r6,r6,-1
  8092b0:	2906b03a 	or	r3,r5,r4
  8092b4:	300f883a 	mov	r7,r6
  8092b8:	1013883a 	mov	r9,r2
  8092bc:	1815883a 	mov	r10,r3
  8092c0:	42bff72e 	bgeu	r8,r10,8092a0 <__unpack_d+0xbc>
  8092c4:	5a800415 	stw	r10,16(r11)
  8092c8:	59c00215 	stw	r7,8(r11)
  8092cc:	5a400315 	stw	r9,12(r11)
  8092d0:	f800283a 	ret
  8092d4:	4a84b03a 	or	r2,r9,r10
  8092d8:	1000021e 	bne	r2,zero,8092e4 <__unpack_d+0x100>
  8092dc:	00800104 	movi	r2,4
  8092e0:	003fce06 	br	80921c <__unpack_d+0x38>
  8092e4:	5004d4fa 	srli	r2,r10,19
  8092e8:	1080004c 	andi	r2,r2,1
  8092ec:	10000426 	beq	r2,zero,809300 <__unpack_d+0x11c>
  8092f0:	00800044 	movi	r2,1
  8092f4:	28800015 	stw	r2,0(r5)
  8092f8:	5a800415 	stw	r10,16(r11)
  8092fc:	003ff306 	br	8092cc <__unpack_d+0xe8>
  809300:	28000015 	stw	zero,0(r5)
  809304:	5a800415 	stw	r10,16(r11)
  809308:	003ff006 	br	8092cc <__unpack_d+0xe8>

0080930c <__fpcmp_parts_d>:
  80930c:	20c00017 	ldw	r3,0(r4)
  809310:	00800044 	movi	r2,1
  809314:	10c0022e 	bgeu	r2,r3,809320 <__fpcmp_parts_d+0x14>
  809318:	29800017 	ldw	r6,0(r5)
  80931c:	11800136 	bltu	r2,r6,809324 <__fpcmp_parts_d+0x18>
  809320:	f800283a 	ret
  809324:	18800118 	cmpnei	r2,r3,4
  809328:	10001126 	beq	r2,zero,809370 <__fpcmp_parts_d+0x64>
  80932c:	18800118 	cmpnei	r2,r3,4
  809330:	10001426 	beq	r2,zero,809384 <__fpcmp_parts_d+0x78>
  809334:	30800118 	cmpnei	r2,r6,4
  809338:	10002f26 	beq	r2,zero,8093f8 <__fpcmp_parts_d+0xec>
  80933c:	18800098 	cmpnei	r2,r3,2
  809340:	10003226 	beq	r2,zero,80940c <__fpcmp_parts_d+0x100>
  809344:	18800098 	cmpnei	r2,r3,2
  809348:	10002b26 	beq	r2,zero,8093f8 <__fpcmp_parts_d+0xec>
  80934c:	30800098 	cmpnei	r2,r6,2
  809350:	10000c26 	beq	r2,zero,809384 <__fpcmp_parts_d+0x78>
  809354:	22000117 	ldw	r8,4(r4)
  809358:	28800117 	ldw	r2,4(r5)
  80935c:	40800f26 	beq	r8,r2,80939c <__fpcmp_parts_d+0x90>
  809360:	00bfffc4 	movi	r2,-1
  809364:	403fee1e 	bne	r8,zero,809320 <__fpcmp_parts_d+0x14>
  809368:	00800044 	movi	r2,1
  80936c:	f800283a 	ret
  809370:	30ffee1e 	bne	r6,r3,80932c <__fpcmp_parts_d+0x20>
  809374:	28c00117 	ldw	r3,4(r5)
  809378:	20800117 	ldw	r2,4(r4)
  80937c:	1885c83a 	sub	r2,r3,r2
  809380:	f800283a 	ret
  809384:	20800117 	ldw	r2,4(r4)
  809388:	00ffffc4 	movi	r3,-1
  80938c:	1000011e 	bne	r2,zero,809394 <__fpcmp_parts_d+0x88>
  809390:	00c00044 	movi	r3,1
  809394:	1805883a 	mov	r2,r3
  809398:	f800283a 	ret
  80939c:	20c00217 	ldw	r3,8(r4)
  8093a0:	28800217 	ldw	r2,8(r5)
  8093a4:	10ffee16 	blt	r2,r3,809360 <__fpcmp_parts_d+0x54>
  8093a8:	18800f16 	blt	r3,r2,8093e8 <__fpcmp_parts_d+0xdc>
  8093ac:	21c00417 	ldw	r7,16(r4)
  8093b0:	28c00417 	ldw	r3,16(r5)
  8093b4:	21800317 	ldw	r6,12(r4)
  8093b8:	28800317 	ldw	r2,12(r5)
  8093bc:	19ffe836 	bltu	r3,r7,809360 <__fpcmp_parts_d+0x54>
  8093c0:	38c01526 	beq	r7,r3,809418 <__fpcmp_parts_d+0x10c>
  8093c4:	29c00417 	ldw	r7,16(r5)
  8093c8:	20c00417 	ldw	r3,16(r4)
  8093cc:	29800317 	ldw	r6,12(r5)
  8093d0:	20800317 	ldw	r2,12(r4)
  8093d4:	19c00436 	bltu	r3,r7,8093e8 <__fpcmp_parts_d+0xdc>
  8093d8:	38c00226 	beq	r7,r3,8093e4 <__fpcmp_parts_d+0xd8>
  8093dc:	0005883a 	mov	r2,zero
  8093e0:	f800283a 	ret
  8093e4:	11bffd2e 	bgeu	r2,r6,8093dc <__fpcmp_parts_d+0xd0>
  8093e8:	00800044 	movi	r2,1
  8093ec:	403fcc1e 	bne	r8,zero,809320 <__fpcmp_parts_d+0x14>
  8093f0:	00bfffc4 	movi	r2,-1
  8093f4:	f800283a 	ret
  8093f8:	28800117 	ldw	r2,4(r5)
  8093fc:	00c00044 	movi	r3,1
  809400:	103fe41e 	bne	r2,zero,809394 <__fpcmp_parts_d+0x88>
  809404:	00ffffc4 	movi	r3,-1
  809408:	003fe206 	br	809394 <__fpcmp_parts_d+0x88>
  80940c:	0005883a 	mov	r2,zero
  809410:	30ffcc1e 	bne	r6,r3,809344 <__fpcmp_parts_d+0x38>
  809414:	f800283a 	ret
  809418:	11bfea2e 	bgeu	r2,r6,8093c4 <__fpcmp_parts_d+0xb8>
  80941c:	003fd006 	br	809360 <__fpcmp_parts_d+0x54>

00809420 <__ashldi3>:
  809420:	00800804 	movi	r2,32
  809424:	119bc83a 	sub	r13,r2,r6
  809428:	2013883a 	mov	r9,r4
  80942c:	2005883a 	mov	r2,r4
  809430:	2815883a 	mov	r10,r5
  809434:	30000826 	beq	r6,zero,809458 <__ashldi3+0x38>
  809438:	0349c83a 	sub	r4,zero,r13
  80943c:	2986983a 	sll	r3,r5,r6
  809440:	1344d83a 	srl	r2,r2,r13
  809444:	0340070e 	bge	zero,r13,809464 <__ashldi3+0x44>
  809448:	4996983a 	sll	r11,r9,r6
  80944c:	1898b03a 	or	r12,r3,r2
  809450:	5813883a 	mov	r9,r11
  809454:	6015883a 	mov	r10,r12
  809458:	5007883a 	mov	r3,r10
  80945c:	4805883a 	mov	r2,r9
  809460:	f800283a 	ret
  809464:	4918983a 	sll	r12,r9,r4
  809468:	0017883a 	mov	r11,zero
  80946c:	003ff806 	br	809450 <__ashldi3+0x30>

00809470 <close>:
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809470:	defff804 	addi	sp,sp,-32
  809474:	dfc00715 	stw	ra,28(sp)
  809478:	df000615 	stw	fp,24(sp)
  80947c:	df000604 	addi	fp,sp,24
  809480:	e13ffa15 	stw	r4,-24(fp)
  alt_fd* fd;
  int     rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  809484:	e0bffa17 	ldw	r2,-24(fp)
  809488:	1004803a 	cmplt	r2,r2,zero
  80948c:	1000091e 	bne	r2,zero,8094b4 <close+0x44>
  809490:	e13ffa17 	ldw	r4,-24(fp)
  809494:	01400304 	movi	r5,12
  809498:	08006ec0 	call	8006ec <__mulsi3>
  80949c:	1007883a 	mov	r3,r2
  8094a0:	00802074 	movhi	r2,129
  8094a4:	10838004 	addi	r2,r2,3584
  8094a8:	1887883a 	add	r3,r3,r2
  8094ac:	e0fffe15 	stw	r3,-8(fp)
  8094b0:	00000106 	br	8094b8 <close+0x48>
  8094b4:	e03ffe15 	stw	zero,-8(fp)
  8094b8:	e0bffe17 	ldw	r2,-8(fp)
  8094bc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  8094c0:	e0bffb17 	ldw	r2,-20(fp)
  8094c4:	1005003a 	cmpeq	r2,r2,zero
  8094c8:	10001d1e 	bne	r2,zero,809540 <close+0xd0>
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8094cc:	e0bffb17 	ldw	r2,-20(fp)
  8094d0:	10800017 	ldw	r2,0(r2)
  8094d4:	10800417 	ldw	r2,16(r2)
  8094d8:	1005003a 	cmpeq	r2,r2,zero
  8094dc:	1000071e 	bne	r2,zero,8094fc <close+0x8c>
  8094e0:	e0bffb17 	ldw	r2,-20(fp)
  8094e4:	10800017 	ldw	r2,0(r2)
  8094e8:	10800417 	ldw	r2,16(r2)
  8094ec:	e13ffb17 	ldw	r4,-20(fp)
  8094f0:	103ee83a 	callr	r2
  8094f4:	e0bfff15 	stw	r2,-4(fp)
  8094f8:	00000106 	br	809500 <close+0x90>
  8094fc:	e03fff15 	stw	zero,-4(fp)
  809500:	e0bfff17 	ldw	r2,-4(fp)
  809504:	e0bffc15 	stw	r2,-16(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  809508:	e13ffa17 	ldw	r4,-24(fp)
  80950c:	0809c2c0 	call	809c2c <alt_release_fd>
    if (rval < 0)
  809510:	e0bffc17 	ldw	r2,-16(fp)
  809514:	1004403a 	cmpge	r2,r2,zero
  809518:	1000071e 	bne	r2,zero,809538 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80951c:	080956c0 	call	80956c <alt_get_errno>
  809520:	e0fffc17 	ldw	r3,-16(fp)
  809524:	00c7c83a 	sub	r3,zero,r3
  809528:	10c00015 	stw	r3,0(r2)
      return -1;
  80952c:	00bfffc4 	movi	r2,-1
  809530:	e0bffd15 	stw	r2,-12(fp)
  809534:	00000806 	br	809558 <close+0xe8>
    }
    return 0;
  809538:	e03ffd15 	stw	zero,-12(fp)
  80953c:	00000606 	br	809558 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809540:	080956c0 	call	80956c <alt_get_errno>
  809544:	1007883a 	mov	r3,r2
  809548:	00801444 	movi	r2,81
  80954c:	18800015 	stw	r2,0(r3)
    return -1;
  809550:	00bfffc4 	movi	r2,-1
  809554:	e0bffd15 	stw	r2,-12(fp)
  }
}
  809558:	e0bffd17 	ldw	r2,-12(fp)
  80955c:	dfc00717 	ldw	ra,28(sp)
  809560:	df000617 	ldw	fp,24(sp)
  809564:	dec00804 	addi	sp,sp,32
  809568:	f800283a 	ret

0080956c <alt_get_errno>:
  80956c:	defffd04 	addi	sp,sp,-12
  809570:	dfc00215 	stw	ra,8(sp)
  809574:	df000115 	stw	fp,4(sp)
  809578:	df000104 	addi	fp,sp,4
  80957c:	d0a01517 	ldw	r2,-32684(gp)
  809580:	1005003a 	cmpeq	r2,r2,zero
  809584:	1000041e 	bne	r2,zero,809598 <alt_get_errno+0x2c>
  809588:	d0a01517 	ldw	r2,-32684(gp)
  80958c:	103ee83a 	callr	r2
  809590:	e0bfff15 	stw	r2,-4(fp)
  809594:	00000206 	br	8095a0 <alt_get_errno+0x34>
  809598:	d0a03004 	addi	r2,gp,-32576
  80959c:	e0bfff15 	stw	r2,-4(fp)
  8095a0:	e0bfff17 	ldw	r2,-4(fp)
  8095a4:	dfc00217 	ldw	ra,8(sp)
  8095a8:	df000117 	ldw	fp,4(sp)
  8095ac:	dec00304 	addi	sp,sp,12
  8095b0:	f800283a 	ret

008095b4 <alt_dev_null_write>:
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  8095b4:	defffc04 	addi	sp,sp,-16
  8095b8:	df000315 	stw	fp,12(sp)
  8095bc:	df000304 	addi	fp,sp,12
  8095c0:	e13ffd15 	stw	r4,-12(fp)
  8095c4:	e17ffe15 	stw	r5,-8(fp)
  8095c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  8095cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8095d0:	df000317 	ldw	fp,12(sp)
  8095d4:	dec00404 	addi	sp,sp,16
  8095d8:	f800283a 	ret

008095dc <fstat>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  8095dc:	defff904 	addi	sp,sp,-28
  8095e0:	dfc00615 	stw	ra,24(sp)
  8095e4:	df000515 	stw	fp,20(sp)
  8095e8:	df000504 	addi	fp,sp,20
  8095ec:	e13ffb15 	stw	r4,-20(fp)
  8095f0:	e17ffc15 	stw	r5,-16(fp)
  alt_fd*  fd;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8095f4:	e0bffb17 	ldw	r2,-20(fp)
  8095f8:	1004803a 	cmplt	r2,r2,zero
  8095fc:	1000091e 	bne	r2,zero,809624 <fstat+0x48>
  809600:	e13ffb17 	ldw	r4,-20(fp)
  809604:	01400304 	movi	r5,12
  809608:	08006ec0 	call	8006ec <__mulsi3>
  80960c:	1007883a 	mov	r3,r2
  809610:	00802074 	movhi	r2,129
  809614:	10838004 	addi	r2,r2,3584
  809618:	1887883a 	add	r3,r3,r2
  80961c:	e0ffff15 	stw	r3,-4(fp)
  809620:	00000106 	br	809628 <fstat+0x4c>
  809624:	e03fff15 	stw	zero,-4(fp)
  809628:	e0bfff17 	ldw	r2,-4(fp)
  80962c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  809630:	e0bffd17 	ldw	r2,-12(fp)
  809634:	1005003a 	cmpeq	r2,r2,zero
  809638:	1000121e 	bne	r2,zero,809684 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80963c:	e0bffd17 	ldw	r2,-12(fp)
  809640:	10800017 	ldw	r2,0(r2)
  809644:	10800817 	ldw	r2,32(r2)
  809648:	1005003a 	cmpeq	r2,r2,zero
  80964c:	1000081e 	bne	r2,zero,809670 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  809650:	e0bffd17 	ldw	r2,-12(fp)
  809654:	10800017 	ldw	r2,0(r2)
  809658:	10800817 	ldw	r2,32(r2)
  80965c:	e13ffd17 	ldw	r4,-12(fp)
  809660:	e17ffc17 	ldw	r5,-16(fp)
  809664:	103ee83a 	callr	r2
  809668:	e0bffe15 	stw	r2,-8(fp)
  80966c:	00000b06 	br	80969c <fstat+0xc0>
    }

    /* 
     * If no function is provided, mark the fd as belonging to a character 
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809670:	e0fffc17 	ldw	r3,-16(fp)
  809674:	00880004 	movi	r2,8192
  809678:	18800115 	stw	r2,4(r3)
      return 0;
  80967c:	e03ffe15 	stw	zero,-8(fp)
  809680:	00000606 	br	80969c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809684:	08096b00 	call	8096b0 <alt_get_errno>
  809688:	1007883a 	mov	r3,r2
  80968c:	00801444 	movi	r2,81
  809690:	18800015 	stw	r2,0(r3)
    return -1;
  809694:	00bfffc4 	movi	r2,-1
  809698:	e0bffe15 	stw	r2,-8(fp)
  }
}
  80969c:	e0bffe17 	ldw	r2,-8(fp)
  8096a0:	dfc00617 	ldw	ra,24(sp)
  8096a4:	df000517 	ldw	fp,20(sp)
  8096a8:	dec00704 	addi	sp,sp,28
  8096ac:	f800283a 	ret

008096b0 <alt_get_errno>:
  8096b0:	defffd04 	addi	sp,sp,-12
  8096b4:	dfc00215 	stw	ra,8(sp)
  8096b8:	df000115 	stw	fp,4(sp)
  8096bc:	df000104 	addi	fp,sp,4
  8096c0:	d0a01517 	ldw	r2,-32684(gp)
  8096c4:	1005003a 	cmpeq	r2,r2,zero
  8096c8:	1000041e 	bne	r2,zero,8096dc <alt_get_errno+0x2c>
  8096cc:	d0a01517 	ldw	r2,-32684(gp)
  8096d0:	103ee83a 	callr	r2
  8096d4:	e0bfff15 	stw	r2,-4(fp)
  8096d8:	00000206 	br	8096e4 <alt_get_errno+0x34>
  8096dc:	d0a03004 	addi	r2,gp,-32576
  8096e0:	e0bfff15 	stw	r2,-4(fp)
  8096e4:	e0bfff17 	ldw	r2,-4(fp)
  8096e8:	dfc00217 	ldw	ra,8(sp)
  8096ec:	df000117 	ldw	fp,4(sp)
  8096f0:	dec00304 	addi	sp,sp,12
  8096f4:	f800283a 	ret

008096f8 <isatty>:
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  8096f8:	deffeb04 	addi	sp,sp,-84
  8096fc:	dfc01415 	stw	ra,80(sp)
  809700:	df001315 	stw	fp,76(sp)
  809704:	df001304 	addi	fp,sp,76
  809708:	e13fed15 	stw	r4,-76(fp)
  alt_fd*     fd;
  struct stat stat;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80970c:	e0bfed17 	ldw	r2,-76(fp)
  809710:	1004803a 	cmplt	r2,r2,zero
  809714:	1000091e 	bne	r2,zero,80973c <isatty+0x44>
  809718:	e13fed17 	ldw	r4,-76(fp)
  80971c:	01400304 	movi	r5,12
  809720:	08006ec0 	call	8006ec <__mulsi3>
  809724:	1007883a 	mov	r3,r2
  809728:	00802074 	movhi	r2,129
  80972c:	10838004 	addi	r2,r2,3584
  809730:	1887883a 	add	r3,r3,r2
  809734:	e0ffff15 	stw	r3,-4(fp)
  809738:	00000106 	br	809740 <isatty+0x48>
  80973c:	e03fff15 	stw	zero,-4(fp)
  809740:	e0bfff17 	ldw	r2,-4(fp)
  809744:	e0bfee15 	stw	r2,-72(fp)
  
  if (fd)
  809748:	e0bfee17 	ldw	r2,-72(fp)
  80974c:	1005003a 	cmpeq	r2,r2,zero
  809750:	10000f1e 	bne	r2,zero,809790 <isatty+0x98>
  {
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809754:	e0bfee17 	ldw	r2,-72(fp)
  809758:	10800017 	ldw	r2,0(r2)
  80975c:	10800817 	ldw	r2,32(r2)
  809760:	1004c03a 	cmpne	r2,r2,zero
  809764:	1000031e 	bne	r2,zero,809774 <isatty+0x7c>
    {
      return 1;
  809768:	00800044 	movi	r2,1
  80976c:	e0bffe15 	stw	r2,-8(fp)
  809770:	00000c06 	br	8097a4 <isatty+0xac>
    }

    /*
     * If a driver does provide an implementation of the fstat() function, then
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809774:	e17fef04 	addi	r5,fp,-68
  809778:	e13fed17 	ldw	r4,-76(fp)
  80977c:	08095dc0 	call	8095dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  809780:	e0bff017 	ldw	r2,-64(fp)
  809784:	10880020 	cmpeqi	r2,r2,8192
  809788:	e0bffe15 	stw	r2,-8(fp)
  80978c:	00000506 	br	8097a4 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809790:	08097b80 	call	8097b8 <alt_get_errno>
  809794:	1007883a 	mov	r3,r2
  809798:	00801444 	movi	r2,81
  80979c:	18800015 	stw	r2,0(r3)
    return 0;
  8097a0:	e03ffe15 	stw	zero,-8(fp)
  }
}
  8097a4:	e0bffe17 	ldw	r2,-8(fp)
  8097a8:	dfc01417 	ldw	ra,80(sp)
  8097ac:	df001317 	ldw	fp,76(sp)
  8097b0:	dec01504 	addi	sp,sp,84
  8097b4:	f800283a 	ret

008097b8 <alt_get_errno>:
  8097b8:	defffd04 	addi	sp,sp,-12
  8097bc:	dfc00215 	stw	ra,8(sp)
  8097c0:	df000115 	stw	fp,4(sp)
  8097c4:	df000104 	addi	fp,sp,4
  8097c8:	d0a01517 	ldw	r2,-32684(gp)
  8097cc:	1005003a 	cmpeq	r2,r2,zero
  8097d0:	1000041e 	bne	r2,zero,8097e4 <alt_get_errno+0x2c>
  8097d4:	d0a01517 	ldw	r2,-32684(gp)
  8097d8:	103ee83a 	callr	r2
  8097dc:	e0bfff15 	stw	r2,-4(fp)
  8097e0:	00000206 	br	8097ec <alt_get_errno+0x34>
  8097e4:	d0a03004 	addi	r2,gp,-32576
  8097e8:	e0bfff15 	stw	r2,-4(fp)
  8097ec:	e0bfff17 	ldw	r2,-4(fp)
  8097f0:	dfc00217 	ldw	ra,8(sp)
  8097f4:	df000117 	ldw	fp,4(sp)
  8097f8:	dec00304 	addi	sp,sp,12
  8097fc:	f800283a 	ret

00809800 <alt_load>:
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  809800:	defffe04 	addi	sp,sp,-8
  809804:	dfc00115 	stw	ra,4(sp)
  809808:	df000015 	stw	fp,0(sp)
  80980c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  809810:	01002074 	movhi	r4,129
  809814:	21018804 	addi	r4,r4,1568
  809818:	01402074 	movhi	r5,129
  80981c:	29418804 	addi	r5,r5,1568
  809820:	01802074 	movhi	r6,129
  809824:	31884804 	addi	r6,r6,8480
  809828:	080987c0 	call	80987c <alt_load_section>
		                &__ram_rwdata_start,
		                &__ram_rwdata_end);

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80982c:	01002034 	movhi	r4,128
  809830:	21000004 	addi	r4,r4,0
  809834:	01404234 	movhi	r5,264
  809838:	29400804 	addi	r5,r5,32
  80983c:	01804234 	movhi	r6,264
  809840:	31807204 	addi	r6,r6,456
  809844:	080987c0 	call	80987c <alt_load_section>
		                &__ram_exceptions_start,
		                &__ram_exceptions_end);

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  809848:	01002074 	movhi	r4,129
  80984c:	21001504 	addi	r4,r4,84
  809850:	01402074 	movhi	r5,129
  809854:	29401504 	addi	r5,r5,84
  809858:	01802074 	movhi	r6,129
  80985c:	31818804 	addi	r6,r6,1568
  809860:	080987c0 	call	80987c <alt_load_section>
		                &__ram_rodata_start,
		                &__ram_rodata_end);
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  809864:	080f2a00 	call	80f2a0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  809868:	080f4f00 	call	80f4f0 <alt_icache_flush_all>
}
  80986c:	dfc00117 	ldw	ra,4(sp)
  809870:	df000017 	ldw	fp,0(sp)
  809874:	dec00204 	addi	sp,sp,8
  809878:	f800283a 	ret

0080987c <alt_load_section>:
  80987c:	defffc04 	addi	sp,sp,-16
  809880:	df000315 	stw	fp,12(sp)
  809884:	df000304 	addi	fp,sp,12
  809888:	e13ffd15 	stw	r4,-12(fp)
  80988c:	e17ffe15 	stw	r5,-8(fp)
  809890:	e1bfff15 	stw	r6,-4(fp)
  809894:	e0fffe17 	ldw	r3,-8(fp)
  809898:	e0bffd17 	ldw	r2,-12(fp)
  80989c:	18800e26 	beq	r3,r2,8098d8 <alt_load_section+0x5c>
  8098a0:	e0fffe17 	ldw	r3,-8(fp)
  8098a4:	e0bfff17 	ldw	r2,-4(fp)
  8098a8:	18800b26 	beq	r3,r2,8098d8 <alt_load_section+0x5c>
  8098ac:	e17ffe04 	addi	r5,fp,-8
  8098b0:	28c00017 	ldw	r3,0(r5)
  8098b4:	e0bffd17 	ldw	r2,-12(fp)
  8098b8:	11000017 	ldw	r4,0(r2)
  8098bc:	10800104 	addi	r2,r2,4
  8098c0:	e0bffd15 	stw	r2,-12(fp)
  8098c4:	1805883a 	mov	r2,r3
  8098c8:	11000015 	stw	r4,0(r2)
  8098cc:	18c00104 	addi	r3,r3,4
  8098d0:	28c00015 	stw	r3,0(r5)
  8098d4:	003ff206 	br	8098a0 <alt_load_section+0x24>
  8098d8:	df000317 	ldw	fp,12(sp)
  8098dc:	dec00404 	addi	sp,sp,16
  8098e0:	f800283a 	ret

008098e4 <lseek>:
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8098e4:	defff804 	addi	sp,sp,-32
  8098e8:	dfc00715 	stw	ra,28(sp)
  8098ec:	df000615 	stw	fp,24(sp)
  8098f0:	df000604 	addi	fp,sp,24
  8098f4:	e13ffa15 	stw	r4,-24(fp)
  8098f8:	e17ffb15 	stw	r5,-20(fp)
  8098fc:	e1bffc15 	stw	r6,-16(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  809900:	e03ffe15 	stw	zero,-8(fp)

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809904:	e0bffa17 	ldw	r2,-24(fp)
  809908:	1004803a 	cmplt	r2,r2,zero
  80990c:	1000091e 	bne	r2,zero,809934 <lseek+0x50>
  809910:	e13ffa17 	ldw	r4,-24(fp)
  809914:	01400304 	movi	r5,12
  809918:	08006ec0 	call	8006ec <__mulsi3>
  80991c:	1007883a 	mov	r3,r2
  809920:	00802074 	movhi	r2,129
  809924:	10838004 	addi	r2,r2,3584
  809928:	1887883a 	add	r3,r3,r2
  80992c:	e0ffff15 	stw	r3,-4(fp)
  809930:	00000106 	br	809938 <lseek+0x54>
  809934:	e03fff15 	stw	zero,-4(fp)
  809938:	e0bfff17 	ldw	r2,-4(fp)
  80993c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd) 
  809940:	e0bffd17 	ldw	r2,-12(fp)
  809944:	1005003a 	cmpeq	r2,r2,zero
  809948:	1000111e 	bne	r2,zero,809990 <lseek+0xac>
  {
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80994c:	e0bffd17 	ldw	r2,-12(fp)
  809950:	10800017 	ldw	r2,0(r2)
  809954:	10800717 	ldw	r2,28(r2)
  809958:	1005003a 	cmpeq	r2,r2,zero
  80995c:	1000091e 	bne	r2,zero,809984 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  809960:	e0bffd17 	ldw	r2,-12(fp)
  809964:	10800017 	ldw	r2,0(r2)
  809968:	10800717 	ldw	r2,28(r2)
  80996c:	e13ffd17 	ldw	r4,-12(fp)
  809970:	e17ffb17 	ldw	r5,-20(fp)
  809974:	e1bffc17 	ldw	r6,-16(fp)
  809978:	103ee83a 	callr	r2
  80997c:	e0bffe15 	stw	r2,-8(fp)
  809980:	00000506 	br	809998 <lseek+0xb4>
    }
    /*
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  809984:	00bfde84 	movi	r2,-134
  809988:	e0bffe15 	stw	r2,-8(fp)
  80998c:	00000206 	br	809998 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  809990:	00bfebc4 	movi	r2,-81
  809994:	e0bffe15 	stw	r2,-8(fp)
  }

  if (rc < 0)
  809998:	e0bffe17 	ldw	r2,-8(fp)
  80999c:	1004403a 	cmpge	r2,r2,zero
  8099a0:	1000071e 	bne	r2,zero,8099c0 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  8099a4:	08099d40 	call	8099d4 <alt_get_errno>
  8099a8:	1007883a 	mov	r3,r2
  8099ac:	e0bffe17 	ldw	r2,-8(fp)
  8099b0:	0085c83a 	sub	r2,zero,r2
  8099b4:	18800015 	stw	r2,0(r3)
    rc = -1;
  8099b8:	00bfffc4 	movi	r2,-1
  8099bc:	e0bffe15 	stw	r2,-8(fp)
  }

  return rc;
  8099c0:	e0bffe17 	ldw	r2,-8(fp)
}
  8099c4:	dfc00717 	ldw	ra,28(sp)
  8099c8:	df000617 	ldw	fp,24(sp)
  8099cc:	dec00804 	addi	sp,sp,32
  8099d0:	f800283a 	ret

008099d4 <alt_get_errno>:
  8099d4:	defffd04 	addi	sp,sp,-12
  8099d8:	dfc00215 	stw	ra,8(sp)
  8099dc:	df000115 	stw	fp,4(sp)
  8099e0:	df000104 	addi	fp,sp,4
  8099e4:	d0a01517 	ldw	r2,-32684(gp)
  8099e8:	1005003a 	cmpeq	r2,r2,zero
  8099ec:	1000041e 	bne	r2,zero,809a00 <alt_get_errno+0x2c>
  8099f0:	d0a01517 	ldw	r2,-32684(gp)
  8099f4:	103ee83a 	callr	r2
  8099f8:	e0bfff15 	stw	r2,-4(fp)
  8099fc:	00000206 	br	809a08 <alt_get_errno+0x34>
  809a00:	d0a03004 	addi	r2,gp,-32576
  809a04:	e0bfff15 	stw	r2,-4(fp)
  809a08:	e0bfff17 	ldw	r2,-4(fp)
  809a0c:	dfc00217 	ldw	ra,8(sp)
  809a10:	df000117 	ldw	fp,4(sp)
  809a14:	dec00304 	addi	sp,sp,12
  809a18:	f800283a 	ret

00809a1c <alt_main>:
 * the users application, i.e. main().
 */

void alt_main (void)
{
  809a1c:	defffc04 	addi	sp,sp,-16
  809a20:	dfc00315 	stw	ra,12(sp)
  809a24:	df000215 	stw	fp,8(sp)
  809a28:	df000204 	addi	fp,sp,8
  int result;

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  809a2c:	0009883a 	mov	r4,zero
  809a30:	0809ec80 	call	809ec8 <alt_irq_init>
  809a34:	e03fff15 	stw	zero,-4(fp)

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();

  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  809a38:	0809ef80 	call	809ef8 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");

#if !defined(ALT_USE_DIRECT_DRIVERS) && (defined(ALT_STDIN_PRESENT) || defined(ALT_STDOUT_PRESENT) || defined(ALT_STDERR_PRESENT))

  /*
   * Redirect stdio to the apropriate devices now that the devices have
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  809a3c:	01002074 	movhi	r4,129
  809a40:	21016d04 	addi	r4,r4,1460
  809a44:	01402074 	movhi	r5,129
  809a48:	29416d04 	addi	r5,r5,1460
  809a4c:	01802074 	movhi	r6,129
  809a50:	31816d04 	addi	r6,r6,1460
  809a54:	080f5e40 	call	80f5e4 <alt_io_redirect>
#endif

#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  809a58:	080f3b00 	call	80f3b0 <_do_ctors>
#endif /* ALT_NO_C_PLUS_PLUS */

#if !defined(ALT_NO_C_PLUS_PLUS) && !defined(ALT_NO_CLEAN_EXIT) && !defined(ALT_NO_EXIT)
  /*
   * Set the C++ destructors to be called at system shutdown. This is only done
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  809a5c:	01002074 	movhi	r4,129
  809a60:	213d0204 	addi	r4,r4,-3064
  809a64:	080fe140 	call	80fe14 <atexit>
#endif

  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  809a68:	d1201617 	ldw	r4,-32680(gp)
  809a6c:	d1601717 	ldw	r5,-32676(gp)
  809a70:	d1a01817 	ldw	r6,-32672(gp)
  809a74:	08001e40 	call	8001e4 <main>
  809a78:	e0bffe15 	stw	r2,-8(fp)
  close(STDOUT_FILENO);
  809a7c:	01000044 	movi	r4,1
  809a80:	08094700 	call	809470 <close>
  exit (result);
  809a84:	e13ffe17 	ldw	r4,-8(fp)
  809a88:	080feb00 	call	80feb0 <exit>

00809a8c <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  809a8c:	defffe04 	addi	sp,sp,-8
  809a90:	df000115 	stw	fp,4(sp)
  809a94:	df000104 	addi	fp,sp,4
  809a98:	e13fff15 	stw	r4,-4(fp)
  809a9c:	df000117 	ldw	fp,4(sp)
  809aa0:	dec00204 	addi	sp,sp,8
  809aa4:	f800283a 	ret

00809aa8 <__malloc_unlock>:
}

/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  809aa8:	defffe04 	addi	sp,sp,-8
  809aac:	df000115 	stw	fp,4(sp)
  809ab0:	df000104 	addi	fp,sp,4
  809ab4:	e13fff15 	stw	r4,-4(fp)
  809ab8:	df000117 	ldw	fp,4(sp)
  809abc:	dec00204 	addi	sp,sp,8
  809ac0:	f800283a 	ret

00809ac4 <read>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  809ac4:	defff704 	addi	sp,sp,-36
  809ac8:	dfc00815 	stw	ra,32(sp)
  809acc:	df000715 	stw	fp,28(sp)
  809ad0:	df000704 	addi	fp,sp,28
  809ad4:	e13ff915 	stw	r4,-28(fp)
  809ad8:	e17ffa15 	stw	r5,-24(fp)
  809adc:	e1bffb15 	stw	r6,-20(fp)
  alt_fd*  fd;
  int      rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809ae0:	e0bff917 	ldw	r2,-28(fp)
  809ae4:	1004803a 	cmplt	r2,r2,zero
  809ae8:	1000091e 	bne	r2,zero,809b10 <read+0x4c>
  809aec:	e13ff917 	ldw	r4,-28(fp)
  809af0:	01400304 	movi	r5,12
  809af4:	08006ec0 	call	8006ec <__mulsi3>
  809af8:	1007883a 	mov	r3,r2
  809afc:	00802074 	movhi	r2,129
  809b00:	10838004 	addi	r2,r2,3584
  809b04:	1887883a 	add	r3,r3,r2
  809b08:	e0ffff15 	stw	r3,-4(fp)
  809b0c:	00000106 	br	809b14 <read+0x50>
  809b10:	e03fff15 	stw	zero,-4(fp)
  809b14:	e0bfff17 	ldw	r2,-4(fp)
  809b18:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd)
  809b1c:	e0bffc17 	ldw	r2,-16(fp)
  809b20:	1005003a 	cmpeq	r2,r2,zero
  809b24:	1000241e 	bne	r2,zero,809bb8 <read+0xf4>
  {
    /*
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  809b28:	e0bffc17 	ldw	r2,-16(fp)
  809b2c:	10800217 	ldw	r2,8(r2)
  809b30:	108000cc 	andi	r2,r2,3
  809b34:	10800060 	cmpeqi	r2,r2,1
  809b38:	10001a1e 	bne	r2,zero,809ba4 <read+0xe0>
  809b3c:	e0bffc17 	ldw	r2,-16(fp)
  809b40:	10800017 	ldw	r2,0(r2)
  809b44:	10800517 	ldw	r2,20(r2)
  809b48:	1005003a 	cmpeq	r2,r2,zero
  809b4c:	1000151e 	bne	r2,zero,809ba4 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  809b50:	e0bffc17 	ldw	r2,-16(fp)
  809b54:	10800017 	ldw	r2,0(r2)
  809b58:	10800517 	ldw	r2,20(r2)
  809b5c:	e13ffc17 	ldw	r4,-16(fp)
  809b60:	e17ffa17 	ldw	r5,-24(fp)
  809b64:	e1bffb17 	ldw	r6,-20(fp)
  809b68:	103ee83a 	callr	r2
  809b6c:	e0bffd15 	stw	r2,-12(fp)
  809b70:	e0bffd17 	ldw	r2,-12(fp)
  809b74:	1004403a 	cmpge	r2,r2,zero
  809b78:	1000071e 	bne	r2,zero,809b98 <read+0xd4>
        {
          ALT_ERRNO = -rval;
  809b7c:	0809be40 	call	809be4 <alt_get_errno>
  809b80:	e0fffd17 	ldw	r3,-12(fp)
  809b84:	00c7c83a 	sub	r3,zero,r3
  809b88:	10c00015 	stw	r3,0(r2)
          return -1;
  809b8c:	00bfffc4 	movi	r2,-1
  809b90:	e0bffe15 	stw	r2,-8(fp)
  809b94:	00000e06 	br	809bd0 <read+0x10c>
        }
        return rval;
  809b98:	e0bffd17 	ldw	r2,-12(fp)
  809b9c:	e0bffe15 	stw	r2,-8(fp)
  809ba0:	00000b06 	br	809bd0 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  809ba4:	0809be40 	call	809be4 <alt_get_errno>
  809ba8:	1007883a 	mov	r3,r2
  809bac:	00800344 	movi	r2,13
  809bb0:	18800015 	stw	r2,0(r3)
  809bb4:	00000406 	br	809bc8 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  809bb8:	0809be40 	call	809be4 <alt_get_errno>
  809bbc:	1007883a 	mov	r3,r2
  809bc0:	00801444 	movi	r2,81
  809bc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  809bc8:	00bfffc4 	movi	r2,-1
  809bcc:	e0bffe15 	stw	r2,-8(fp)
}
  809bd0:	e0bffe17 	ldw	r2,-8(fp)
  809bd4:	dfc00817 	ldw	ra,32(sp)
  809bd8:	df000717 	ldw	fp,28(sp)
  809bdc:	dec00904 	addi	sp,sp,36
  809be0:	f800283a 	ret

00809be4 <alt_get_errno>:
  809be4:	defffd04 	addi	sp,sp,-12
  809be8:	dfc00215 	stw	ra,8(sp)
  809bec:	df000115 	stw	fp,4(sp)
  809bf0:	df000104 	addi	fp,sp,4
  809bf4:	d0a01517 	ldw	r2,-32684(gp)
  809bf8:	1005003a 	cmpeq	r2,r2,zero
  809bfc:	1000041e 	bne	r2,zero,809c10 <alt_get_errno+0x2c>
  809c00:	d0a01517 	ldw	r2,-32684(gp)
  809c04:	103ee83a 	callr	r2
  809c08:	e0bfff15 	stw	r2,-4(fp)
  809c0c:	00000206 	br	809c18 <alt_get_errno+0x34>
  809c10:	d0a03004 	addi	r2,gp,-32576
  809c14:	e0bfff15 	stw	r2,-4(fp)
  809c18:	e0bfff17 	ldw	r2,-4(fp)
  809c1c:	dfc00217 	ldw	ra,8(sp)
  809c20:	df000117 	ldw	fp,4(sp)
  809c24:	dec00304 	addi	sp,sp,12
  809c28:	f800283a 	ret

00809c2c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  809c2c:	defffc04 	addi	sp,sp,-16
  809c30:	dfc00315 	stw	ra,12(sp)
  809c34:	df000215 	stw	fp,8(sp)
  809c38:	dc000115 	stw	r16,4(sp)
  809c3c:	df000204 	addi	fp,sp,8
  809c40:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  809c44:	e0bffe17 	ldw	r2,-8(fp)
  809c48:	108000d0 	cmplti	r2,r2,3
  809c4c:	10000f1e 	bne	r2,zero,809c8c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  809c50:	04002074 	movhi	r16,129
  809c54:	84038004 	addi	r16,r16,3584
  809c58:	e13ffe17 	ldw	r4,-8(fp)
  809c5c:	01400304 	movi	r5,12
  809c60:	08006ec0 	call	8006ec <__mulsi3>
  809c64:	1405883a 	add	r2,r2,r16
  809c68:	10800204 	addi	r2,r2,8
  809c6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  809c70:	04002074 	movhi	r16,129
  809c74:	84038004 	addi	r16,r16,3584
  809c78:	e13ffe17 	ldw	r4,-8(fp)
  809c7c:	01400304 	movi	r5,12
  809c80:	08006ec0 	call	8006ec <__mulsi3>
  809c84:	1405883a 	add	r2,r2,r16
  809c88:	10000015 	stw	zero,0(r2)
  }
}
  809c8c:	dfc00317 	ldw	ra,12(sp)
  809c90:	df000217 	ldw	fp,8(sp)
  809c94:	dc000117 	ldw	r16,4(sp)
  809c98:	dec00404 	addi	sp,sp,16
  809c9c:	f800283a 	ret

00809ca0 <sbrk>:
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  809ca0:	defff904 	addi	sp,sp,-28
  809ca4:	df000615 	stw	fp,24(sp)
  809ca8:	df000604 	addi	fp,sp,24
  809cac:	e13ffa15 	stw	r4,-24(fp)
  809cb0:	0005303a 	rdctl	r2,status
  809cb4:	e0bffe15 	stw	r2,-8(fp)
  809cb8:	e0fffe17 	ldw	r3,-8(fp)
  809cbc:	00bfff84 	movi	r2,-2
  809cc0:	1884703a 	and	r2,r3,r2
  809cc4:	1001703a 	wrctl	status,r2
  809cc8:	e0bffe17 	ldw	r2,-8(fp)
  809ccc:	e0bffd15 	stw	r2,-12(fp)
  809cd0:	e0bffd17 	ldw	r2,-12(fp)
  809cd4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  809cd8:	d0a01917 	ldw	r2,-32668(gp)
  809cdc:	10c000c4 	addi	r3,r2,3
  809ce0:	00bfff04 	movi	r2,-4
  809ce4:	1884703a 	and	r2,r3,r2
  809ce8:	d0a01915 	stw	r2,-32668(gp)

#ifdef ALT_MAX_HEAP_BYTES
  /*  
   * User specified a maximum heap size.  Return -1 if it would
   * be exceeded by this sbrk call.
   */
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  809cec:	d0e01917 	ldw	r3,-32668(gp)
  809cf0:	e0bffa17 	ldw	r2,-24(fp)
  809cf4:	1887883a 	add	r3,r3,r2
  809cf8:	00804034 	movhi	r2,256
  809cfc:	10800004 	addi	r2,r2,0
  809d00:	10c0072e 	bgeu	r2,r3,809d20 <sbrk+0x80>
  809d04:	e0bffb17 	ldw	r2,-20(fp)
  809d08:	e0bffe15 	stw	r2,-8(fp)
  809d0c:	e0bffe17 	ldw	r2,-8(fp)
  809d10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  809d14:	00bfffc4 	movi	r2,-1
  809d18:	e0bfff15 	stw	r2,-4(fp)
  809d1c:	00000c06 	br	809d50 <sbrk+0xb0>
  }
#endif

  prev_heap_end = heap_end; 
  809d20:	d0a01917 	ldw	r2,-32668(gp)
  809d24:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  809d28:	d0e01917 	ldw	r3,-32668(gp)
  809d2c:	e0bffa17 	ldw	r2,-24(fp)
  809d30:	1885883a 	add	r2,r3,r2
  809d34:	d0a01915 	stw	r2,-32668(gp)
  809d38:	e0bffb17 	ldw	r2,-20(fp)
  809d3c:	e0bffe15 	stw	r2,-8(fp)
  809d40:	e0bffe17 	ldw	r2,-8(fp)
  809d44:	1001703a 	wrctl	status,r2

#ifdef ALT_STACK_CHECK
  /*
   * If the stack and heap are contiguous then extending the heap reduces the
   * space available for the stack.  If we are still using the default stack
   * then adjust the stack limit to note this, while checking for stack
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
  {
    if (alt_stack_pointer() <= heap_end)
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
  }

#ifdef ALT_EXCEPTION_STACK
  /*
   * If we are executing from the exception stack then compare against the
   * stack we switched away from as well.  The exception stack is a fixed
   * size so doesn't need to be checked.
   */

  if (alt_exception_old_stack_limit == prev_heap_end)
  {
    if (alt_exception_old_stack_limit <= heap_end)
      alt_report_stack_overflow();

    alt_exception_old_stack_limit = heap_end;
  }
#endif

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  809d48:	e0bffc17 	ldw	r2,-16(fp)
  809d4c:	e0bfff15 	stw	r2,-4(fp)
} 
  809d50:	e0bfff17 	ldw	r2,-4(fp)
  809d54:	df000617 	ldw	fp,24(sp)
  809d58:	dec00704 	addi	sp,sp,28
  809d5c:	f800283a 	ret

00809d60 <write>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  809d60:	defff704 	addi	sp,sp,-36
  809d64:	dfc00815 	stw	ra,32(sp)
  809d68:	df000715 	stw	fp,28(sp)
  809d6c:	df000704 	addi	fp,sp,28
  809d70:	e13ff915 	stw	r4,-28(fp)
  809d74:	e17ffa15 	stw	r5,-24(fp)
  809d78:	e1bffb15 	stw	r6,-20(fp)
  alt_fd*  fd;
  int      rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809d7c:	e0bff917 	ldw	r2,-28(fp)
  809d80:	1004803a 	cmplt	r2,r2,zero
  809d84:	1000091e 	bne	r2,zero,809dac <write+0x4c>
  809d88:	e13ff917 	ldw	r4,-28(fp)
  809d8c:	01400304 	movi	r5,12
  809d90:	08006ec0 	call	8006ec <__mulsi3>
  809d94:	1007883a 	mov	r3,r2
  809d98:	00802074 	movhi	r2,129
  809d9c:	10838004 	addi	r2,r2,3584
  809da0:	1887883a 	add	r3,r3,r2
  809da4:	e0ffff15 	stw	r3,-4(fp)
  809da8:	00000106 	br	809db0 <write+0x50>
  809dac:	e03fff15 	stw	zero,-4(fp)
  809db0:	e0bfff17 	ldw	r2,-4(fp)
  809db4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd)
  809db8:	e0bffc17 	ldw	r2,-16(fp)
  809dbc:	1005003a 	cmpeq	r2,r2,zero
  809dc0:	1000241e 	bne	r2,zero,809e54 <write+0xf4>
  {
    /*
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  809dc4:	e0bffc17 	ldw	r2,-16(fp)
  809dc8:	10800217 	ldw	r2,8(r2)
  809dcc:	108000cc 	andi	r2,r2,3
  809dd0:	1005003a 	cmpeq	r2,r2,zero
  809dd4:	10001a1e 	bne	r2,zero,809e40 <write+0xe0>
  809dd8:	e0bffc17 	ldw	r2,-16(fp)
  809ddc:	10800017 	ldw	r2,0(r2)
  809de0:	10800617 	ldw	r2,24(r2)
  809de4:	1005003a 	cmpeq	r2,r2,zero
  809de8:	1000151e 	bne	r2,zero,809e40 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  809dec:	e0bffc17 	ldw	r2,-16(fp)
  809df0:	10800017 	ldw	r2,0(r2)
  809df4:	10800617 	ldw	r2,24(r2)
  809df8:	e13ffc17 	ldw	r4,-16(fp)
  809dfc:	e17ffa17 	ldw	r5,-24(fp)
  809e00:	e1bffb17 	ldw	r6,-20(fp)
  809e04:	103ee83a 	callr	r2
  809e08:	e0bffd15 	stw	r2,-12(fp)
  809e0c:	e0bffd17 	ldw	r2,-12(fp)
  809e10:	1004403a 	cmpge	r2,r2,zero
  809e14:	1000071e 	bne	r2,zero,809e34 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  809e18:	0809e800 	call	809e80 <alt_get_errno>
  809e1c:	e0fffd17 	ldw	r3,-12(fp)
  809e20:	00c7c83a 	sub	r3,zero,r3
  809e24:	10c00015 	stw	r3,0(r2)
        return -1;
  809e28:	00bfffc4 	movi	r2,-1
  809e2c:	e0bffe15 	stw	r2,-8(fp)
  809e30:	00000e06 	br	809e6c <write+0x10c>
      }
      return rval;
  809e34:	e0bffd17 	ldw	r2,-12(fp)
  809e38:	e0bffe15 	stw	r2,-8(fp)
  809e3c:	00000b06 	br	809e6c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  809e40:	0809e800 	call	809e80 <alt_get_errno>
  809e44:	1007883a 	mov	r3,r2
  809e48:	00800344 	movi	r2,13
  809e4c:	18800015 	stw	r2,0(r3)
  809e50:	00000406 	br	809e64 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  809e54:	0809e800 	call	809e80 <alt_get_errno>
  809e58:	1007883a 	mov	r3,r2
  809e5c:	00801444 	movi	r2,81
  809e60:	18800015 	stw	r2,0(r3)
  }
  return -1;
  809e64:	00bfffc4 	movi	r2,-1
  809e68:	e0bffe15 	stw	r2,-8(fp)
}
  809e6c:	e0bffe17 	ldw	r2,-8(fp)
  809e70:	dfc00817 	ldw	ra,32(sp)
  809e74:	df000717 	ldw	fp,28(sp)
  809e78:	dec00904 	addi	sp,sp,36
  809e7c:	f800283a 	ret

00809e80 <alt_get_errno>:
  809e80:	defffd04 	addi	sp,sp,-12
  809e84:	dfc00215 	stw	ra,8(sp)
  809e88:	df000115 	stw	fp,4(sp)
  809e8c:	df000104 	addi	fp,sp,4
  809e90:	d0a01517 	ldw	r2,-32684(gp)
  809e94:	1005003a 	cmpeq	r2,r2,zero
  809e98:	1000041e 	bne	r2,zero,809eac <alt_get_errno+0x2c>
  809e9c:	d0a01517 	ldw	r2,-32684(gp)
  809ea0:	103ee83a 	callr	r2
  809ea4:	e0bfff15 	stw	r2,-4(fp)
  809ea8:	00000206 	br	809eb4 <alt_get_errno+0x34>
  809eac:	d0a03004 	addi	r2,gp,-32576
  809eb0:	e0bfff15 	stw	r2,-4(fp)
  809eb4:	e0bfff17 	ldw	r2,-4(fp)
  809eb8:	dfc00217 	ldw	ra,8(sp)
  809ebc:	df000117 	ldw	fp,4(sp)
  809ec0:	dec00304 	addi	sp,sp,12
  809ec4:	f800283a 	ret

00809ec8 <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  809ec8:	defffd04 	addi	sp,sp,-12
  809ecc:	dfc00215 	stw	ra,8(sp)
  809ed0:	df000115 	stw	fp,4(sp)
  809ed4:	df000104 	addi	fp,sp,4
  809ed8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
  809edc:	080fc500 	call	80fc50 <altera_nios2_irq_init>
  809ee0:	00800044 	movi	r2,1
  809ee4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  809ee8:	dfc00217 	ldw	ra,8(sp)
  809eec:	df000117 	ldw	fp,4(sp)
  809ef0:	dec00304 	addi	sp,sp,12
  809ef4:	f800283a 	ret

00809ef8 <alt_sys_init>:

/*
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  809ef8:	defffe04 	addi	sp,sp,-8
  809efc:	dfc00115 	stw	ra,4(sp)
  809f00:	df000015 	stw	fp,0(sp)
  809f04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  809f08:	01002074 	movhi	r4,129
  809f0c:	2103ea04 	addi	r4,r4,4008
  809f10:	000b883a 	mov	r5,zero
  809f14:	000d883a 	mov	r6,zero
  809f18:	080a0c40 	call	80a0c4 <altera_avalon_jtag_uart_init>
  809f1c:	01002074 	movhi	r4,129
  809f20:	2103e004 	addi	r4,r4,3968
  809f24:	0809f5c0 	call	809f5c <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
  809f28:	01002074 	movhi	r4,129
  809f2c:	2107f804 	addi	r4,r4,8160
  809f30:	0809f5c0 	call	809f5c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
  809f34:	01002074 	movhi	r4,129
  809f38:	21080404 	addi	r4,r4,8208
  809f3c:	0809f5c0 	call	809f5c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SDCARD, SDCARD);
  809f40:	01002074 	movhi	r4,129
  809f44:	21081004 	addi	r4,r4,8256
  809f48:	0809f5c0 	call	809f5c <alt_dev_reg>
}
  809f4c:	dfc00117 	ldw	ra,4(sp)
  809f50:	df000017 	ldw	fp,0(sp)
  809f54:	dec00204 	addi	sp,sp,8
  809f58:	f800283a 	ret

00809f5c <alt_dev_reg>:
  809f5c:	defffd04 	addi	sp,sp,-12
  809f60:	dfc00215 	stw	ra,8(sp)
  809f64:	df000115 	stw	fp,4(sp)
  809f68:	df000104 	addi	fp,sp,4
  809f6c:	e13fff15 	stw	r4,-4(fp)
  809f70:	e13fff17 	ldw	r4,-4(fp)
  809f74:	d1601204 	addi	r5,gp,-32696
  809f78:	080f2b80 	call	80f2b8 <alt_dev_llist_insert>
  809f7c:	dfc00217 	ldw	ra,8(sp)
  809f80:	df000117 	ldw	fp,4(sp)
  809f84:	dec00304 	addi	sp,sp,12
  809f88:	f800283a 	ret

00809f8c <altera_avalon_jtag_uart_read_fd>:
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  809f8c:	defffa04 	addi	sp,sp,-24
  809f90:	dfc00515 	stw	ra,20(sp)
  809f94:	df000415 	stw	fp,16(sp)
  809f98:	df000404 	addi	fp,sp,16
  809f9c:	e13ffc15 	stw	r4,-16(fp)
  809fa0:	e17ffd15 	stw	r5,-12(fp)
  809fa4:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  809fa8:	e0bffc17 	ldw	r2,-16(fp)
  809fac:	10800017 	ldw	r2,0(r2)
  809fb0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  809fb4:	e0bfff17 	ldw	r2,-4(fp)
  809fb8:	11000a04 	addi	r4,r2,40
  809fbc:	e0bffc17 	ldw	r2,-16(fp)
  809fc0:	e17ffd17 	ldw	r5,-12(fp)
  809fc4:	e1bffe17 	ldw	r6,-8(fp)
  809fc8:	11c00217 	ldw	r7,8(r2)
  809fcc:	080a5c00 	call	80a5c0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  809fd0:	dfc00517 	ldw	ra,20(sp)
  809fd4:	df000417 	ldw	fp,16(sp)
  809fd8:	dec00604 	addi	sp,sp,24
  809fdc:	f800283a 	ret

00809fe0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  809fe0:	defffa04 	addi	sp,sp,-24
  809fe4:	dfc00515 	stw	ra,20(sp)
  809fe8:	df000415 	stw	fp,16(sp)
  809fec:	df000404 	addi	fp,sp,16
  809ff0:	e13ffc15 	stw	r4,-16(fp)
  809ff4:	e17ffd15 	stw	r5,-12(fp)
  809ff8:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  809ffc:	e0bffc17 	ldw	r2,-16(fp)
  80a000:	10800017 	ldw	r2,0(r2)
  80a004:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80a008:	e0bfff17 	ldw	r2,-4(fp)
  80a00c:	11000a04 	addi	r4,r2,40
  80a010:	e0bffc17 	ldw	r2,-16(fp)
  80a014:	e17ffd17 	ldw	r5,-12(fp)
  80a018:	e1bffe17 	ldw	r6,-8(fp)
  80a01c:	11c00217 	ldw	r7,8(r2)
  80a020:	080a7f40 	call	80a7f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80a024:	dfc00517 	ldw	ra,20(sp)
  80a028:	df000417 	ldw	fp,16(sp)
  80a02c:	dec00604 	addi	sp,sp,24
  80a030:	f800283a 	ret

0080a034 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80a034:	defffc04 	addi	sp,sp,-16
  80a038:	dfc00315 	stw	ra,12(sp)
  80a03c:	df000215 	stw	fp,8(sp)
  80a040:	df000204 	addi	fp,sp,8
  80a044:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80a048:	e0bffe17 	ldw	r2,-8(fp)
  80a04c:	10800017 	ldw	r2,0(r2)
  80a050:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80a054:	e0bfff17 	ldw	r2,-4(fp)
  80a058:	11000a04 	addi	r4,r2,40
  80a05c:	e0bffe17 	ldw	r2,-8(fp)
  80a060:	11400217 	ldw	r5,8(r2)
  80a064:	080a45c0 	call	80a45c <altera_avalon_jtag_uart_close>
}
  80a068:	dfc00317 	ldw	ra,12(sp)
  80a06c:	df000217 	ldw	fp,8(sp)
  80a070:	dec00404 	addi	sp,sp,16
  80a074:	f800283a 	ret

0080a078 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80a078:	defffa04 	addi	sp,sp,-24
  80a07c:	dfc00515 	stw	ra,20(sp)
  80a080:	df000415 	stw	fp,16(sp)
  80a084:	df000404 	addi	fp,sp,16
  80a088:	e13ffc15 	stw	r4,-16(fp)
  80a08c:	e17ffd15 	stw	r5,-12(fp)
  80a090:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80a094:	e0bffc17 	ldw	r2,-16(fp)
  80a098:	10800017 	ldw	r2,0(r2)
  80a09c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80a0a0:	e0bfff17 	ldw	r2,-4(fp)
  80a0a4:	11000a04 	addi	r4,r2,40
  80a0a8:	e17ffd17 	ldw	r5,-12(fp)
  80a0ac:	e1bffe17 	ldw	r6,-8(fp)
  80a0b0:	080a4c80 	call	80a4c8 <altera_avalon_jtag_uart_ioctl>
}
  80a0b4:	dfc00517 	ldw	ra,20(sp)
  80a0b8:	df000417 	ldw	fp,16(sp)
  80a0bc:	dec00604 	addi	sp,sp,24
  80a0c0:	f800283a 	ret

0080a0c4 <altera_avalon_jtag_uart_init>:
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80a0c4:	defff704 	addi	sp,sp,-36
  80a0c8:	dfc00815 	stw	ra,32(sp)
  80a0cc:	df000715 	stw	fp,28(sp)
  80a0d0:	df000704 	addi	fp,sp,28
  80a0d4:	e13ff915 	stw	r4,-28(fp)
  80a0d8:	e17ffa15 	stw	r5,-24(fp)
  80a0dc:	e1bffb15 	stw	r6,-20(fp)
  80a0e0:	e03ffc15 	stw	zero,-16(fp)
  80a0e4:	e03ffd15 	stw	zero,-12(fp)
  80a0e8:	e03ffe15 	stw	zero,-8(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80a0ec:	e0fff917 	ldw	r3,-28(fp)
  80a0f0:	00800044 	movi	r2,1
  80a0f4:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80a0f8:	e0bff917 	ldw	r2,-28(fp)
  80a0fc:	10800017 	ldw	r2,0(r2)
  80a100:	10800104 	addi	r2,r2,4
  80a104:	1007883a 	mov	r3,r2
  80a108:	e0bff917 	ldw	r2,-28(fp)
  80a10c:	10800817 	ldw	r2,32(r2)
  80a110:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  80a114:	e13ffb17 	ldw	r4,-20(fp)
  80a118:	e17ff917 	ldw	r5,-28(fp)
  80a11c:	01802074 	movhi	r6,129
  80a120:	31a85f04 	addi	r6,r6,-24196
  80a124:	080f6580 	call	80f658 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80a128:	e0bff917 	ldw	r2,-28(fp)
  80a12c:	10000915 	stw	zero,36(r2)
  80a130:	d0a02917 	ldw	r2,-32604(gp)
  80a134:	e0bfff15 	stw	r2,-4(fp)
  80a138:	e17fff17 	ldw	r5,-4(fp)
  80a13c:	e0bff917 	ldw	r2,-28(fp)
  80a140:	11000204 	addi	r4,r2,8
  80a144:	01802074 	movhi	r6,129
  80a148:	31a8e704 	addi	r6,r6,-23652
  80a14c:	e1fff917 	ldw	r7,-28(fp)
  80a150:	080f14c0 	call	80f14c <alt_alarm_start>
  80a154:	1004403a 	cmpge	r2,r2,zero
  80a158:	1000041e 	bne	r2,zero,80a16c <altera_avalon_jtag_uart_init+0xa8>

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80a15c:	e0fff917 	ldw	r3,-28(fp)
  80a160:	00a00034 	movhi	r2,32768
  80a164:	10bfffc4 	addi	r2,r2,-1
  80a168:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80a16c:	dfc00817 	ldw	ra,32(sp)
  80a170:	df000717 	ldw	fp,28(sp)
  80a174:	dec00904 	addi	sp,sp,36
  80a178:	f800283a 	ret

0080a17c <altera_avalon_jtag_uart_irq>:

/*
 * Interrupt routine
 */ 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80a17c:	defff704 	addi	sp,sp,-36
  80a180:	df000815 	stw	fp,32(sp)
  80a184:	df000804 	addi	fp,sp,32
  80a188:	e13ff815 	stw	r4,-32(fp)
  80a18c:	e17ff915 	stw	r5,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80a190:	e0bff817 	ldw	r2,-32(fp)
  80a194:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  80a198:	e0bffa17 	ldw	r2,-24(fp)
  80a19c:	10800017 	ldw	r2,0(r2)
  80a1a0:	e0bffb15 	stw	r2,-20(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80a1a4:	e0bffb17 	ldw	r2,-20(fp)
  80a1a8:	10800104 	addi	r2,r2,4
  80a1ac:	10800037 	ldwio	r2,0(r2)
  80a1b0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80a1b4:	e0bffc17 	ldw	r2,-16(fp)
  80a1b8:	1080c00c 	andi	r2,r2,768
  80a1bc:	1004c03a 	cmpne	r2,r2,zero
  80a1c0:	1000011e 	bne	r2,zero,80a1c8 <altera_avalon_jtag_uart_irq+0x4c>
      break;
  80a1c4:	00007206 	br	80a390 <altera_avalon_jtag_uart_irq+0x214>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80a1c8:	e0bffc17 	ldw	r2,-16(fp)
  80a1cc:	1080400c 	andi	r2,r2,256
  80a1d0:	1005003a 	cmpeq	r2,r2,zero
  80a1d4:	1000371e 	bne	r2,zero,80a2b4 <altera_avalon_jtag_uart_irq+0x138>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80a1d8:	00800074 	movhi	r2,1
  80a1dc:	10800004 	addi	r2,r2,0
  80a1e0:	e0bffd15 	stw	r2,-12(fp)

      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a1e4:	e0bffa17 	ldw	r2,-24(fp)
  80a1e8:	10800a17 	ldw	r2,40(r2)
  80a1ec:	10800044 	addi	r2,r2,1
  80a1f0:	1081ffcc 	andi	r2,r2,2047
  80a1f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80a1f8:	e0bffa17 	ldw	r2,-24(fp)
  80a1fc:	10c00b17 	ldw	r3,44(r2)
  80a200:	e0bffe17 	ldw	r2,-8(fp)
  80a204:	1880011e 	bne	r3,r2,80a20c <altera_avalon_jtag_uart_irq+0x90>
          break;
  80a208:	00001706 	br	80a268 <altera_avalon_jtag_uart_irq+0xec>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80a20c:	e0bffb17 	ldw	r2,-20(fp)
  80a210:	10800037 	ldwio	r2,0(r2)
  80a214:	e0bffd15 	stw	r2,-12(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80a218:	e0bffd17 	ldw	r2,-12(fp)
  80a21c:	10a0000c 	andi	r2,r2,32768
  80a220:	1004c03a 	cmpne	r2,r2,zero
  80a224:	1000011e 	bne	r2,zero,80a22c <altera_avalon_jtag_uart_irq+0xb0>
          break;
  80a228:	00000f06 	br	80a268 <altera_avalon_jtag_uart_irq+0xec>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80a22c:	e0fffa17 	ldw	r3,-24(fp)
  80a230:	e0bffa17 	ldw	r2,-24(fp)
  80a234:	10800a17 	ldw	r2,40(r2)
  80a238:	1885883a 	add	r2,r3,r2
  80a23c:	10c00e04 	addi	r3,r2,56
  80a240:	e0bffd17 	ldw	r2,-12(fp)
  80a244:	18800005 	stb	r2,0(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a248:	e0fffa17 	ldw	r3,-24(fp)
  80a24c:	e0bffa17 	ldw	r2,-24(fp)
  80a250:	10800a17 	ldw	r2,40(r2)
  80a254:	10800044 	addi	r2,r2,1
  80a258:	1081ffcc 	andi	r2,r2,2047
  80a25c:	18800a15 	stw	r2,40(r3)
  80a260:	e03fff15 	stw	zero,-4(fp)
  80a264:	003fdf06 	br	80a1e4 <altera_avalon_jtag_uart_irq+0x68>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80a268:	e0bffd17 	ldw	r2,-12(fp)
  80a26c:	10bfffec 	andhi	r2,r2,65535
  80a270:	1005003a 	cmpeq	r2,r2,zero
  80a274:	10000f1e 	bne	r2,zero,80a2b4 <altera_avalon_jtag_uart_irq+0x138>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80a278:	e13ffa17 	ldw	r4,-24(fp)
  80a27c:	e0bffa17 	ldw	r2,-24(fp)
  80a280:	10c00817 	ldw	r3,32(r2)
  80a284:	00bfff84 	movi	r2,-2
  80a288:	1884703a 	and	r2,r3,r2
  80a28c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80a290:	e0bffb17 	ldw	r2,-20(fp)
  80a294:	10800104 	addi	r2,r2,4
  80a298:	1007883a 	mov	r3,r2
  80a29c:	e0bffa17 	ldw	r2,-24(fp)
  80a2a0:	10800817 	ldw	r2,32(r2)
  80a2a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80a2a8:	e0bffb17 	ldw	r2,-20(fp)
  80a2ac:	10800104 	addi	r2,r2,4
  80a2b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80a2b4:	e0bffc17 	ldw	r2,-16(fp)
  80a2b8:	1080800c 	andi	r2,r2,512
  80a2bc:	1005003a 	cmpeq	r2,r2,zero
  80a2c0:	103fb81e 	bne	r2,zero,80a1a4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80a2c4:	e0bffc17 	ldw	r2,-16(fp)
  80a2c8:	10bfffec 	andhi	r2,r2,65535
  80a2cc:	1004d43a 	srli	r2,r2,16
  80a2d0:	e0bfff15 	stw	r2,-4(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80a2d4:	e0bfff17 	ldw	r2,-4(fp)
  80a2d8:	1005003a 	cmpeq	r2,r2,zero
  80a2dc:	1000181e 	bne	r2,zero,80a340 <altera_avalon_jtag_uart_irq+0x1c4>
  80a2e0:	e0bffa17 	ldw	r2,-24(fp)
  80a2e4:	e0fffa17 	ldw	r3,-24(fp)
  80a2e8:	11000d17 	ldw	r4,52(r2)
  80a2ec:	18800c17 	ldw	r2,48(r3)
  80a2f0:	20801326 	beq	r4,r2,80a340 <altera_avalon_jtag_uart_irq+0x1c4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80a2f4:	e13ffb17 	ldw	r4,-20(fp)
  80a2f8:	e0fffa17 	ldw	r3,-24(fp)
  80a2fc:	e0bffa17 	ldw	r2,-24(fp)
  80a300:	10800d17 	ldw	r2,52(r2)
  80a304:	1885883a 	add	r2,r3,r2
  80a308:	10820e04 	addi	r2,r2,2104
  80a30c:	10800007 	ldb	r2,0(r2)
  80a310:	20800035 	stwio	r2,0(r4)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a314:	e0fffa17 	ldw	r3,-24(fp)
  80a318:	e0bffa17 	ldw	r2,-24(fp)
  80a31c:	10800d17 	ldw	r2,52(r2)
  80a320:	10800044 	addi	r2,r2,1
  80a324:	1081ffcc 	andi	r2,r2,2047
  80a328:	18800d15 	stw	r2,52(r3)
  80a32c:	e03ffe15 	stw	zero,-8(fp)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80a330:	e0bfff17 	ldw	r2,-4(fp)
  80a334:	10bfffc4 	addi	r2,r2,-1
  80a338:	e0bfff15 	stw	r2,-4(fp)
  80a33c:	003fe506 	br	80a2d4 <altera_avalon_jtag_uart_irq+0x158>
      }

      if (space > 0)
  80a340:	e0bfff17 	ldw	r2,-4(fp)
  80a344:	1005003a 	cmpeq	r2,r2,zero
  80a348:	103f961e 	bne	r2,zero,80a1a4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80a34c:	e13ffa17 	ldw	r4,-24(fp)
  80a350:	e0bffa17 	ldw	r2,-24(fp)
  80a354:	10c00817 	ldw	r3,32(r2)
  80a358:	00bfff44 	movi	r2,-3
  80a35c:	1884703a 	and	r2,r3,r2
  80a360:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80a364:	e0bffa17 	ldw	r2,-24(fp)
  80a368:	10800017 	ldw	r2,0(r2)
  80a36c:	10800104 	addi	r2,r2,4
  80a370:	1007883a 	mov	r3,r2
  80a374:	e0bffa17 	ldw	r2,-24(fp)
  80a378:	10800817 	ldw	r2,32(r2)
  80a37c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80a380:	e0bffb17 	ldw	r2,-20(fp)
  80a384:	10800104 	addi	r2,r2,4
  80a388:	10800037 	ldwio	r2,0(r2)
  80a38c:	003f8506 	br	80a1a4 <altera_avalon_jtag_uart_irq+0x28>
      }
    }
  }
}
  80a390:	df000817 	ldw	fp,32(sp)
  80a394:	dec00904 	addi	sp,sp,36
  80a398:	f800283a 	ret

0080a39c <altera_avalon_jtag_uart_timeout>:

/*
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80a39c:	defffb04 	addi	sp,sp,-20
  80a3a0:	df000415 	stw	fp,16(sp)
  80a3a4:	df000404 	addi	fp,sp,16
  80a3a8:	e13ffc15 	stw	r4,-16(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80a3ac:	e0bffc17 	ldw	r2,-16(fp)
  80a3b0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80a3b4:	e0bffd17 	ldw	r2,-12(fp)
  80a3b8:	10800017 	ldw	r2,0(r2)
  80a3bc:	10800104 	addi	r2,r2,4
  80a3c0:	10800037 	ldwio	r2,0(r2)
  80a3c4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80a3c8:	e0bffe17 	ldw	r2,-8(fp)
  80a3cc:	1081000c 	andi	r2,r2,1024
  80a3d0:	1005003a 	cmpeq	r2,r2,zero
  80a3d4:	10000b1e 	bne	r2,zero,80a404 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80a3d8:	e0bffd17 	ldw	r2,-12(fp)
  80a3dc:	10800017 	ldw	r2,0(r2)
  80a3e0:	10800104 	addi	r2,r2,4
  80a3e4:	1007883a 	mov	r3,r2
  80a3e8:	e0bffd17 	ldw	r2,-12(fp)
  80a3ec:	10800817 	ldw	r2,32(r2)
  80a3f0:	10810014 	ori	r2,r2,1024
  80a3f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80a3f8:	e0bffd17 	ldw	r2,-12(fp)
  80a3fc:	10000915 	stw	zero,36(r2)
  80a400:	00001006 	br	80a444 <altera_avalon_jtag_uart_timeout+0xa8>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80a404:	e0bffd17 	ldw	r2,-12(fp)
  80a408:	10c00917 	ldw	r3,36(r2)
  80a40c:	00a00034 	movhi	r2,32768
  80a410:	10bfff04 	addi	r2,r2,-4
  80a414:	10c00b36 	bltu	r2,r3,80a444 <altera_avalon_jtag_uart_timeout+0xa8>
    sp->host_inactive++;
  80a418:	e0fffd17 	ldw	r3,-12(fp)
  80a41c:	e0bffd17 	ldw	r2,-12(fp)
  80a420:	10800917 	ldw	r2,36(r2)
  80a424:	10800044 	addi	r2,r2,1
  80a428:	18800915 	stw	r2,36(r3)
    
    if (sp->host_inactive >= sp->timeout) {
  80a42c:	e0bffd17 	ldw	r2,-12(fp)
  80a430:	e0fffd17 	ldw	r3,-12(fp)
  80a434:	11000917 	ldw	r4,36(r2)
  80a438:	18800117 	ldw	r2,4(r3)
  80a43c:	20800136 	bltu	r4,r2,80a444 <altera_avalon_jtag_uart_timeout+0xa8>
  80a440:	e03fff15 	stw	zero,-4(fp)
  80a444:	d0a02917 	ldw	r2,-32604(gp)
  80a448:	e0bfff15 	stw	r2,-4(fp)
  80a44c:	e0bfff17 	ldw	r2,-4(fp)
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80a450:	df000417 	ldw	fp,16(sp)
  80a454:	dec00504 	addi	sp,sp,20
  80a458:	f800283a 	ret

0080a45c <altera_avalon_jtag_uart_close>:

/*
 * The close() routine is implemented to drain the JTAG UART transmit buffer
 * when not in "small" mode. This routine will wait for transimt data to be
 * emptied unless a timeout from host-activity occurs. If the driver flags
 * have been set to non-blocking mode, this routine will exit immediately if
 * any data remains. This routine should be called indirectly (i.e. though
 * the C library close() routine) so that the file descriptor associated 
 * with the relevant stream (i.e. stdout) can be closed as well. This routine
 * does not manage file descriptors.
 * 
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80a45c:	defffc04 	addi	sp,sp,-16
  80a460:	df000315 	stw	fp,12(sp)
  80a464:	df000304 	addi	fp,sp,12
  80a468:	e13ffd15 	stw	r4,-12(fp)
  80a46c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80a470:	e0bffd17 	ldw	r2,-12(fp)
  80a474:	e0fffd17 	ldw	r3,-12(fp)
  80a478:	11000d17 	ldw	r4,52(r2)
  80a47c:	18800c17 	ldw	r2,48(r3)
  80a480:	20800c26 	beq	r4,r2,80a4b4 <altera_avalon_jtag_uart_close+0x58>
  80a484:	e0bffd17 	ldw	r2,-12(fp)
  80a488:	e0fffd17 	ldw	r3,-12(fp)
  80a48c:	11000917 	ldw	r4,36(r2)
  80a490:	18800117 	ldw	r2,4(r3)
  80a494:	2080072e 	bgeu	r4,r2,80a4b4 <altera_avalon_jtag_uart_close+0x58>
    if (flags & O_NONBLOCK) {
  80a498:	e0bffe17 	ldw	r2,-8(fp)
  80a49c:	1090000c 	andi	r2,r2,16384
  80a4a0:	1005003a 	cmpeq	r2,r2,zero
  80a4a4:	103ff21e 	bne	r2,zero,80a470 <altera_avalon_jtag_uart_close+0x14>
      return -EWOULDBLOCK; 
  80a4a8:	00bffd44 	movi	r2,-11
  80a4ac:	e0bfff15 	stw	r2,-4(fp)
  80a4b0:	00000106 	br	80a4b8 <altera_avalon_jtag_uart_close+0x5c>
    }
  }

  return 0;
  80a4b4:	e03fff15 	stw	zero,-4(fp)
}
  80a4b8:	e0bfff17 	ldw	r2,-4(fp)
  80a4bc:	df000317 	ldw	fp,12(sp)
  80a4c0:	dec00404 	addi	sp,sp,16
  80a4c4:	f800283a 	ret

0080a4c8 <altera_avalon_jtag_uart_ioctl>:

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80a4c8:	defff704 	addi	sp,sp,-36
  80a4cc:	df000815 	stw	fp,32(sp)
  80a4d0:	df000804 	addi	fp,sp,32
  80a4d4:	e13ff815 	stw	r4,-32(fp)
  80a4d8:	e17ff915 	stw	r5,-28(fp)
  80a4dc:	e1bffa15 	stw	r6,-24(fp)
  int rc = -ENOTTY;
  80a4e0:	00bff9c4 	movi	r2,-25
  80a4e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80a4e8:	e0bff917 	ldw	r2,-28(fp)
  80a4ec:	e0bfff15 	stw	r2,-4(fp)
  80a4f0:	e0ffff17 	ldw	r3,-4(fp)
  80a4f4:	189a8060 	cmpeqi	r2,r3,27137
  80a4f8:	1000041e 	bne	r2,zero,80a50c <altera_avalon_jtag_uart_ioctl+0x44>
  80a4fc:	e0ffff17 	ldw	r3,-4(fp)
  80a500:	189a80a0 	cmpeqi	r2,r3,27138
  80a504:	10001d1e 	bne	r2,zero,80a57c <altera_avalon_jtag_uart_ioctl+0xb4>
  80a508:	00002906 	br	80a5b0 <altera_avalon_jtag_uart_ioctl+0xe8>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80a50c:	e0bff817 	ldw	r2,-32(fp)
  80a510:	10c00117 	ldw	r3,4(r2)
  80a514:	00a00034 	movhi	r2,32768
  80a518:	10bfffc4 	addi	r2,r2,-1
  80a51c:	18802426 	beq	r3,r2,80a5b0 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      int timeout = *((int *)arg);
  80a520:	e0bffa17 	ldw	r2,-24(fp)
  80a524:	10800017 	ldw	r2,0(r2)
  80a528:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80a52c:	e0bff817 	ldw	r2,-32(fp)
  80a530:	e0bffd15 	stw	r2,-12(fp)
  80a534:	e0bffc17 	ldw	r2,-16(fp)
  80a538:	10800090 	cmplti	r2,r2,2
  80a53c:	1000071e 	bne	r2,zero,80a55c <altera_avalon_jtag_uart_ioctl+0x94>
  80a540:	e0fffc17 	ldw	r3,-16(fp)
  80a544:	00a00034 	movhi	r2,32768
  80a548:	10bfffc4 	addi	r2,r2,-1
  80a54c:	18800326 	beq	r3,r2,80a55c <altera_avalon_jtag_uart_ioctl+0x94>
  80a550:	e0fffc17 	ldw	r3,-16(fp)
  80a554:	e0fffe15 	stw	r3,-8(fp)
  80a558:	00000306 	br	80a568 <altera_avalon_jtag_uart_ioctl+0xa0>
  80a55c:	00a00034 	movhi	r2,32768
  80a560:	10bfff84 	addi	r2,r2,-2
  80a564:	e0bffe15 	stw	r2,-8(fp)
  80a568:	e0fffe17 	ldw	r3,-8(fp)
  80a56c:	e0bffd17 	ldw	r2,-12(fp)
  80a570:	10c00115 	stw	r3,4(r2)
      rc = 0;
  80a574:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80a578:	00000d06 	br	80a5b0 <altera_avalon_jtag_uart_ioctl+0xe8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80a57c:	e0bff817 	ldw	r2,-32(fp)
  80a580:	10c00117 	ldw	r3,4(r2)
  80a584:	00a00034 	movhi	r2,32768
  80a588:	10bfffc4 	addi	r2,r2,-1
  80a58c:	18800826 	beq	r3,r2,80a5b0 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80a590:	e17ffa17 	ldw	r5,-24(fp)
  80a594:	e0bff817 	ldw	r2,-32(fp)
  80a598:	e0fff817 	ldw	r3,-32(fp)
  80a59c:	11000917 	ldw	r4,36(r2)
  80a5a0:	18800117 	ldw	r2,4(r3)
  80a5a4:	2085803a 	cmpltu	r2,r4,r2
  80a5a8:	28800015 	stw	r2,0(r5)
      rc = 0;
  80a5ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;

  default:
    break;
  }

  return rc;
  80a5b0:	e0bffb17 	ldw	r2,-20(fp)
}
  80a5b4:	df000817 	ldw	fp,32(sp)
  80a5b8:	dec00904 	addi	sp,sp,36
  80a5bc:	f800283a 	ret

0080a5c0 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80a5c0:	defff204 	addi	sp,sp,-56
  80a5c4:	dfc00d15 	stw	ra,52(sp)
  80a5c8:	df000c15 	stw	fp,48(sp)
  80a5cc:	df000c04 	addi	fp,sp,48
  80a5d0:	e13ff415 	stw	r4,-48(fp)
  80a5d4:	e17ff515 	stw	r5,-44(fp)
  80a5d8:	e1bff615 	stw	r6,-40(fp)
  80a5dc:	e1fff715 	stw	r7,-36(fp)
  char * ptr = buffer;
  80a5e0:	e0bff517 	ldw	r2,-44(fp)
  80a5e4:	e0bff815 	stw	r2,-32(fp)
  80a5e8:	e03ffb15 	stw	zero,-20(fp)

  alt_irq_context context;
  unsigned int n;

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80a5ec:	e0bff617 	ldw	r2,-40(fp)
  80a5f0:	10800050 	cmplti	r2,r2,1
  80a5f4:	10004b1e 	bne	r2,zero,80a724 <altera_avalon_jtag_uart_read+0x164>
  {
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80a5f8:	e0bff417 	ldw	r2,-48(fp)
  80a5fc:	10800a17 	ldw	r2,40(r2)
  80a600:	e0bffc15 	stw	r2,-16(fp)
      out = sp->rx_out;
  80a604:	e0bff417 	ldw	r2,-48(fp)
  80a608:	10800b17 	ldw	r2,44(r2)
  80a60c:	e0bffd15 	stw	r2,-12(fp)

      if (in >= out)
  80a610:	e0fffc17 	ldw	r3,-16(fp)
  80a614:	e0bffd17 	ldw	r2,-12(fp)
  80a618:	18800536 	bltu	r3,r2,80a630 <altera_avalon_jtag_uart_read+0x70>
        n = in - out;
  80a61c:	e0bffc17 	ldw	r2,-16(fp)
  80a620:	e0fffd17 	ldw	r3,-12(fp)
  80a624:	10c5c83a 	sub	r2,r2,r3
  80a628:	e0bffa15 	stw	r2,-24(fp)
  80a62c:	00000406 	br	80a640 <altera_avalon_jtag_uart_read+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80a630:	00820004 	movi	r2,2048
  80a634:	e0fffd17 	ldw	r3,-12(fp)
  80a638:	10c5c83a 	sub	r2,r2,r3
  80a63c:	e0bffa15 	stw	r2,-24(fp)

      if (n == 0)
  80a640:	e0bffa17 	ldw	r2,-24(fp)
  80a644:	1004c03a 	cmpne	r2,r2,zero
  80a648:	1000011e 	bne	r2,zero,80a650 <altera_avalon_jtag_uart_read+0x90>
        break; /* No more data available */
  80a64c:	00001e06 	br	80a6c8 <altera_avalon_jtag_uart_read+0x108>

      if (n > space)
  80a650:	e0fff617 	ldw	r3,-40(fp)
  80a654:	e0bffa17 	ldw	r2,-24(fp)
  80a658:	1880022e 	bgeu	r3,r2,80a664 <altera_avalon_jtag_uart_read+0xa4>
        n = space;
  80a65c:	e0bff617 	ldw	r2,-40(fp)
  80a660:	e0bffa15 	stw	r2,-24(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80a664:	e0fff417 	ldw	r3,-48(fp)
  80a668:	e0bffd17 	ldw	r2,-12(fp)
  80a66c:	1885883a 	add	r2,r3,r2
  80a670:	11400e04 	addi	r5,r2,56
  80a674:	e13ff817 	ldw	r4,-32(fp)
  80a678:	e1bffa17 	ldw	r6,-24(fp)
  80a67c:	080563c0 	call	80563c <memcpy>
      ptr   += n;
  80a680:	e0fff817 	ldw	r3,-32(fp)
  80a684:	e0bffa17 	ldw	r2,-24(fp)
  80a688:	1885883a 	add	r2,r3,r2
  80a68c:	e0bff815 	stw	r2,-32(fp)
      space -= n;
  80a690:	e0fff617 	ldw	r3,-40(fp)
  80a694:	e0bffa17 	ldw	r2,-24(fp)
  80a698:	1885c83a 	sub	r2,r3,r2
  80a69c:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a6a0:	e13ff417 	ldw	r4,-48(fp)
  80a6a4:	e0fffd17 	ldw	r3,-12(fp)
  80a6a8:	e0bffa17 	ldw	r2,-24(fp)
  80a6ac:	1885883a 	add	r2,r3,r2
  80a6b0:	1081ffcc 	andi	r2,r2,2047
  80a6b4:	20800b15 	stw	r2,44(r4)
    }
  80a6b8:	e0bff617 	ldw	r2,-40(fp)
  80a6bc:	10800050 	cmplti	r2,r2,1
  80a6c0:	1000011e 	bne	r2,zero,80a6c8 <altera_avalon_jtag_uart_read+0x108>
  80a6c4:	003fcc06 	br	80a5f8 <altera_avalon_jtag_uart_read+0x38>
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80a6c8:	e0fff817 	ldw	r3,-32(fp)
  80a6cc:	e0bff517 	ldw	r2,-44(fp)
  80a6d0:	18800126 	beq	r3,r2,80a6d8 <altera_avalon_jtag_uart_read+0x118>
      break;
  80a6d4:	00001306 	br	80a724 <altera_avalon_jtag_uart_read+0x164>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80a6d8:	e0bff717 	ldw	r2,-36(fp)
  80a6dc:	1090000c 	andi	r2,r2,16384
  80a6e0:	1005003a 	cmpeq	r2,r2,zero
  80a6e4:	1000011e 	bne	r2,zero,80a6ec <altera_avalon_jtag_uart_read+0x12c>
      break;
  80a6e8:	00000e06 	br	80a724 <altera_avalon_jtag_uart_read+0x164>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
      /*
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
                     ALT_JTAG_UART_READ_RDY | ALT_JTAG_UART_TIMEOUT,
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80a6ec:	e0bff417 	ldw	r2,-48(fp)
  80a6f0:	10c00a17 	ldw	r3,40(r2)
  80a6f4:	e0bffc17 	ldw	r2,-16(fp)
  80a6f8:	1880061e 	bne	r3,r2,80a714 <altera_avalon_jtag_uart_read+0x154>
  80a6fc:	e0bff417 	ldw	r2,-48(fp)
  80a700:	e0fff417 	ldw	r3,-48(fp)
  80a704:	11000917 	ldw	r4,36(r2)
  80a708:	18800117 	ldw	r2,4(r3)
  80a70c:	2080012e 	bgeu	r4,r2,80a714 <altera_avalon_jtag_uart_read+0x154>
  80a710:	003ff606 	br	80a6ec <altera_avalon_jtag_uart_read+0x12c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80a714:	e0bff417 	ldw	r2,-48(fp)
  80a718:	10c00a17 	ldw	r3,40(r2)
  80a71c:	e0bffc17 	ldw	r2,-16(fp)
  80a720:	18bfb21e 	bne	r3,r2,80a5ec <altera_avalon_jtag_uart_read+0x2c>
  80a724:	e03ffd15 	stw	zero,-12(fp)
      break;
  }

  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80a728:	e0fff817 	ldw	r3,-32(fp)
  80a72c:	e0bff517 	ldw	r2,-44(fp)
  80a730:	18801a26 	beq	r3,r2,80a79c <altera_avalon_jtag_uart_read+0x1dc>
  80a734:	0005303a 	rdctl	r2,status
  80a738:	e0bffe15 	stw	r2,-8(fp)
  80a73c:	e0fffe17 	ldw	r3,-8(fp)
  80a740:	00bfff84 	movi	r2,-2
  80a744:	1884703a 	and	r2,r3,r2
  80a748:	1001703a 	wrctl	status,r2
  80a74c:	e0bffe17 	ldw	r2,-8(fp)
  80a750:	e0bffc15 	stw	r2,-16(fp)
  80a754:	e0bffc17 	ldw	r2,-16(fp)
  80a758:	e0bff915 	stw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80a75c:	e0fff417 	ldw	r3,-48(fp)
  80a760:	e0bff417 	ldw	r2,-48(fp)
  80a764:	10800817 	ldw	r2,32(r2)
  80a768:	10800054 	ori	r2,r2,1
  80a76c:	18800815 	stw	r2,32(r3)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80a770:	e0bff417 	ldw	r2,-48(fp)
  80a774:	10800017 	ldw	r2,0(r2)
  80a778:	10800104 	addi	r2,r2,4
  80a77c:	1007883a 	mov	r3,r2
  80a780:	e0bff417 	ldw	r2,-48(fp)
  80a784:	10800817 	ldw	r2,32(r2)
  80a788:	18800035 	stwio	r2,0(r3)
  80a78c:	e0bff917 	ldw	r2,-28(fp)
  80a790:	e0bffe15 	stw	r2,-8(fp)
  80a794:	e0bffe17 	ldw	r2,-8(fp)
  80a798:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80a79c:	e0fff817 	ldw	r3,-32(fp)
  80a7a0:	e0bff517 	ldw	r2,-44(fp)
  80a7a4:	18800526 	beq	r3,r2,80a7bc <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
  80a7a8:	e0bff817 	ldw	r2,-32(fp)
  80a7ac:	e0fff517 	ldw	r3,-44(fp)
  80a7b0:	10c5c83a 	sub	r2,r2,r3
  80a7b4:	e0bfff15 	stw	r2,-4(fp)
  80a7b8:	00000906 	br	80a7e0 <altera_avalon_jtag_uart_read+0x220>
  else if (flags & O_NONBLOCK)
  80a7bc:	e0bff717 	ldw	r2,-36(fp)
  80a7c0:	1090000c 	andi	r2,r2,16384
  80a7c4:	1005003a 	cmpeq	r2,r2,zero
  80a7c8:	1000031e 	bne	r2,zero,80a7d8 <altera_avalon_jtag_uart_read+0x218>
    return -EWOULDBLOCK;
  80a7cc:	00bffd44 	movi	r2,-11
  80a7d0:	e0bfff15 	stw	r2,-4(fp)
  80a7d4:	00000206 	br	80a7e0 <altera_avalon_jtag_uart_read+0x220>
  else
    return -EIO;
  80a7d8:	00bffec4 	movi	r2,-5
  80a7dc:	e0bfff15 	stw	r2,-4(fp)
}
  80a7e0:	e0bfff17 	ldw	r2,-4(fp)
  80a7e4:	dfc00d17 	ldw	ra,52(sp)
  80a7e8:	df000c17 	ldw	fp,48(sp)
  80a7ec:	dec00e04 	addi	sp,sp,56
  80a7f0:	f800283a 	ret

0080a7f4 <altera_avalon_jtag_uart_write>:

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80a7f4:	defff104 	addi	sp,sp,-60
  80a7f8:	dfc00e15 	stw	ra,56(sp)
  80a7fc:	df000d15 	stw	fp,52(sp)
  80a800:	df000d04 	addi	fp,sp,52
  80a804:	e13ff315 	stw	r4,-52(fp)
  80a808:	e17ff415 	stw	r5,-48(fp)
  80a80c:	e1bff515 	stw	r6,-44(fp)
  80a810:	e1fff615 	stw	r7,-40(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80a814:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80a818:	e0bff417 	ldw	r2,-48(fp)
  80a81c:	e0bffb15 	stw	r2,-20(fp)
  80a820:	e03ffc15 	stw	zero,-16(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80a824:	e0bff517 	ldw	r2,-44(fp)
  80a828:	10800050 	cmplti	r2,r2,1
  80a82c:	10003a1e 	bne	r2,zero,80a918 <altera_avalon_jtag_uart_write+0x124>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80a830:	e0bff317 	ldw	r2,-52(fp)
  80a834:	10800c17 	ldw	r2,48(r2)
  80a838:	e0bff715 	stw	r2,-36(fp)
      out = sp->tx_out;
  80a83c:	e0bff317 	ldw	r2,-52(fp)
  80a840:	10800d17 	ldw	r2,52(r2)
  80a844:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  80a848:	e0fff717 	ldw	r3,-36(fp)
  80a84c:	e0bff817 	ldw	r2,-32(fp)
  80a850:	1880062e 	bgeu	r3,r2,80a86c <altera_avalon_jtag_uart_write+0x78>
        n = out - 1 - in;
  80a854:	e0fff817 	ldw	r3,-32(fp)
  80a858:	e0bff717 	ldw	r2,-36(fp)
  80a85c:	1885c83a 	sub	r2,r3,r2
  80a860:	10bfffc4 	addi	r2,r2,-1
  80a864:	e0bff915 	stw	r2,-28(fp)
  80a868:	00000c06 	br	80a89c <altera_avalon_jtag_uart_write+0xa8>
      else if (out > 0)
  80a86c:	e0bff817 	ldw	r2,-32(fp)
  80a870:	1005003a 	cmpeq	r2,r2,zero
  80a874:	1000051e 	bne	r2,zero,80a88c <altera_avalon_jtag_uart_write+0x98>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80a878:	00820004 	movi	r2,2048
  80a87c:	e0fff717 	ldw	r3,-36(fp)
  80a880:	10c5c83a 	sub	r2,r2,r3
  80a884:	e0bff915 	stw	r2,-28(fp)
  80a888:	00000406 	br	80a89c <altera_avalon_jtag_uart_write+0xa8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80a88c:	0081ffc4 	movi	r2,2047
  80a890:	e0fff717 	ldw	r3,-36(fp)
  80a894:	10c5c83a 	sub	r2,r2,r3
  80a898:	e0bff915 	stw	r2,-28(fp)

      if (n == 0)
  80a89c:	e0bff917 	ldw	r2,-28(fp)
  80a8a0:	1004c03a 	cmpne	r2,r2,zero
  80a8a4:	1000011e 	bne	r2,zero,80a8ac <altera_avalon_jtag_uart_write+0xb8>
        break;
  80a8a8:	00001b06 	br	80a918 <altera_avalon_jtag_uart_write+0x124>

      if (n > count)
  80a8ac:	e0fff517 	ldw	r3,-44(fp)
  80a8b0:	e0bff917 	ldw	r2,-28(fp)
  80a8b4:	1880022e 	bgeu	r3,r2,80a8c0 <altera_avalon_jtag_uart_write+0xcc>
        n = count;
  80a8b8:	e0bff517 	ldw	r2,-44(fp)
  80a8bc:	e0bff915 	stw	r2,-28(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80a8c0:	e0fff317 	ldw	r3,-52(fp)
  80a8c4:	e0bff717 	ldw	r2,-36(fp)
  80a8c8:	1885883a 	add	r2,r3,r2
  80a8cc:	11020e04 	addi	r4,r2,2104
  80a8d0:	e17ff417 	ldw	r5,-48(fp)
  80a8d4:	e1bff917 	ldw	r6,-28(fp)
  80a8d8:	080563c0 	call	80563c <memcpy>
      ptr   += n;
  80a8dc:	e0fff417 	ldw	r3,-48(fp)
  80a8e0:	e0bff917 	ldw	r2,-28(fp)
  80a8e4:	1885883a 	add	r2,r3,r2
  80a8e8:	e0bff415 	stw	r2,-48(fp)
      count -= n;
  80a8ec:	e0fff517 	ldw	r3,-44(fp)
  80a8f0:	e0bff917 	ldw	r2,-28(fp)
  80a8f4:	1885c83a 	sub	r2,r3,r2
  80a8f8:	e0bff515 	stw	r2,-44(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80a8fc:	e13ff317 	ldw	r4,-52(fp)
  80a900:	e0fff717 	ldw	r3,-36(fp)
  80a904:	e0bff917 	ldw	r2,-28(fp)
  80a908:	1885883a 	add	r2,r3,r2
  80a90c:	1081ffcc 	andi	r2,r2,2047
  80a910:	20800c15 	stw	r2,48(r4)
  80a914:	003fc306 	br	80a824 <altera_avalon_jtag_uart_write+0x30>
  80a918:	0005303a 	rdctl	r2,status
  80a91c:	e0bffe15 	stw	r2,-8(fp)
  80a920:	e0fffe17 	ldw	r3,-8(fp)
  80a924:	00bfff84 	movi	r2,-2
  80a928:	1884703a 	and	r2,r3,r2
  80a92c:	1001703a 	wrctl	status,r2
  80a930:	e0bffe17 	ldw	r2,-8(fp)
  80a934:	e0bffd15 	stw	r2,-12(fp)
  80a938:	e0bffd17 	ldw	r2,-12(fp)
  80a93c:	e0bffa15 	stw	r2,-24(fp)
    }

    /*
     * If interrupts are disabled then we could transmit here, we only need 
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80a940:	e0fff317 	ldw	r3,-52(fp)
  80a944:	e0bff317 	ldw	r2,-52(fp)
  80a948:	10800817 	ldw	r2,32(r2)
  80a94c:	10800094 	ori	r2,r2,2
  80a950:	18800815 	stw	r2,32(r3)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80a954:	e0bff317 	ldw	r2,-52(fp)
  80a958:	10800017 	ldw	r2,0(r2)
  80a95c:	10800104 	addi	r2,r2,4
  80a960:	1007883a 	mov	r3,r2
  80a964:	e0bff317 	ldw	r2,-52(fp)
  80a968:	10800817 	ldw	r2,32(r2)
  80a96c:	18800035 	stwio	r2,0(r3)
  80a970:	e0bffa17 	ldw	r2,-24(fp)
  80a974:	e0bffe15 	stw	r2,-8(fp)
  80a978:	e0bffe17 	ldw	r2,-8(fp)
  80a97c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);

    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80a980:	e0bff517 	ldw	r2,-44(fp)
  80a984:	10800050 	cmplti	r2,r2,1
  80a988:	1000141e 	bne	r2,zero,80a9dc <altera_avalon_jtag_uart_write+0x1e8>
    {
      if (flags & O_NONBLOCK)
  80a98c:	e0bff617 	ldw	r2,-40(fp)
  80a990:	1090000c 	andi	r2,r2,16384
  80a994:	1005003a 	cmpeq	r2,r2,zero
  80a998:	1000011e 	bne	r2,zero,80a9a0 <altera_avalon_jtag_uart_write+0x1ac>
        break;
  80a99c:	00001306 	br	80a9ec <altera_avalon_jtag_uart_write+0x1f8>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
        /*
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
                       ALT_JTAG_UART_WRITE_RDY | ALT_JTAG_UART_TIMEOUT,
                       OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                       0);
      }
      else {
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
          ;
      }
#else
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80a9a0:	e0bff317 	ldw	r2,-52(fp)
  80a9a4:	10c00d17 	ldw	r3,52(r2)
  80a9a8:	e0bff817 	ldw	r2,-32(fp)
  80a9ac:	1880061e 	bne	r3,r2,80a9c8 <altera_avalon_jtag_uart_write+0x1d4>
  80a9b0:	e0bff317 	ldw	r2,-52(fp)
  80a9b4:	e0fff317 	ldw	r3,-52(fp)
  80a9b8:	11000917 	ldw	r4,36(r2)
  80a9bc:	18800117 	ldw	r2,4(r3)
  80a9c0:	2080012e 	bgeu	r4,r2,80a9c8 <altera_avalon_jtag_uart_write+0x1d4>
  80a9c4:	003ff606 	br	80a9a0 <altera_avalon_jtag_uart_write+0x1ac>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  80a9c8:	e0bff317 	ldw	r2,-52(fp)
  80a9cc:	10c00d17 	ldw	r3,52(r2)
  80a9d0:	e0bff817 	ldw	r2,-32(fp)
  80a9d4:	1880011e 	bne	r3,r2,80a9dc <altera_avalon_jtag_uart_write+0x1e8>
        break;
  80a9d8:	00000406 	br	80a9ec <altera_avalon_jtag_uart_write+0x1f8>
    }
  }
  80a9dc:	e0bff517 	ldw	r2,-44(fp)
  80a9e0:	10800050 	cmplti	r2,r2,1
  80a9e4:	1000011e 	bne	r2,zero,80a9ec <altera_avalon_jtag_uart_write+0x1f8>
  80a9e8:	003f8e06 	br	80a824 <altera_avalon_jtag_uart_write+0x30>
  80a9ec:	e03ffe15 	stw	zero,-8(fp)
  while (count > 0);

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80a9f0:	e0fff417 	ldw	r3,-48(fp)
  80a9f4:	e0bffb17 	ldw	r2,-20(fp)
  80a9f8:	18800526 	beq	r3,r2,80aa10 <altera_avalon_jtag_uart_write+0x21c>
    return ptr - start;
  80a9fc:	e0bff417 	ldw	r2,-48(fp)
  80aa00:	e0fffb17 	ldw	r3,-20(fp)
  80aa04:	10c5c83a 	sub	r2,r2,r3
  80aa08:	e0bfff15 	stw	r2,-4(fp)
  80aa0c:	00000906 	br	80aa34 <altera_avalon_jtag_uart_write+0x240>
  else if (flags & O_NONBLOCK)
  80aa10:	e0bff617 	ldw	r2,-40(fp)
  80aa14:	1090000c 	andi	r2,r2,16384
  80aa18:	1005003a 	cmpeq	r2,r2,zero
  80aa1c:	1000031e 	bne	r2,zero,80aa2c <altera_avalon_jtag_uart_write+0x238>
    return -EWOULDBLOCK;
  80aa20:	00bffd44 	movi	r2,-11
  80aa24:	e0bfff15 	stw	r2,-4(fp)
  80aa28:	00000206 	br	80aa34 <altera_avalon_jtag_uart_write+0x240>
  else
    return -EIO; /* Host not connected */
  80aa2c:	00bffec4 	movi	r2,-5
  80aa30:	e0bfff15 	stw	r2,-4(fp)
}
  80aa34:	e0bfff17 	ldw	r2,-4(fp)
  80aa38:	dfc00e17 	ldw	ra,56(sp)
  80aa3c:	df000d17 	ldw	fp,52(sp)
  80aa40:	dec00f04 	addi	sp,sp,60
  80aa44:	f800283a 	ret

0080aa48 <alt_up_audio_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
  80aa48:	defffc04 	addi	sp,sp,-16
  80aa4c:	dfc00315 	stw	ra,12(sp)
  80aa50:	df000215 	stw	fp,8(sp)
  80aa54:	df000204 	addi	fp,sp,8
  80aa58:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
  80aa5c:	e13ffe17 	ldw	r4,-8(fp)
  80aa60:	d1601204 	addi	r5,gp,-32696
  80aa64:	080f4600 	call	80f460 <alt_find_dev>
  80aa68:	e0bfff15 	stw	r2,-4(fp)
  return dev;
  80aa6c:	e0bfff17 	ldw	r2,-4(fp)
}
  80aa70:	dfc00317 	ldw	ra,12(sp)
  80aa74:	df000217 	ldw	fp,8(sp)
  80aa78:	dec00404 	addi	sp,sp,16
  80aa7c:	f800283a 	ret

0080aa80 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
  80aa80:	defffd04 	addi	sp,sp,-12
  80aa84:	df000215 	stw	fp,8(sp)
  80aa88:	df000204 	addi	fp,sp,8
  80aa8c:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80aa90:	e0bffe17 	ldw	r2,-8(fp)
  80aa94:	10800a17 	ldw	r2,40(r2)
  80aa98:	10800037 	ldwio	r2,0(r2)
  80aa9c:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
  80aaa0:	e0bfff17 	ldw	r2,-4(fp)
  80aaa4:	10800054 	ori	r2,r2,1
  80aaa8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80aaac:	e0bffe17 	ldw	r2,-8(fp)
  80aab0:	10c00a17 	ldw	r3,40(r2)
  80aab4:	e0bfff17 	ldw	r2,-4(fp)
  80aab8:	18800035 	stwio	r2,0(r3)
}
  80aabc:	df000217 	ldw	fp,8(sp)
  80aac0:	dec00304 	addi	sp,sp,12
  80aac4:	f800283a 	ret

0080aac8 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
  80aac8:	defffd04 	addi	sp,sp,-12
  80aacc:	df000215 	stw	fp,8(sp)
  80aad0:	df000204 	addi	fp,sp,8
  80aad4:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80aad8:	e0bffe17 	ldw	r2,-8(fp)
  80aadc:	10800a17 	ldw	r2,40(r2)
  80aae0:	10800037 	ldwio	r2,0(r2)
  80aae4:	e0bfff15 	stw	r2,-4(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
  80aae8:	e0ffff17 	ldw	r3,-4(fp)
  80aaec:	00bfff84 	movi	r2,-2
  80aaf0:	1884703a 	and	r2,r3,r2
  80aaf4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80aaf8:	e0bffe17 	ldw	r2,-8(fp)
  80aafc:	10c00a17 	ldw	r3,40(r2)
  80ab00:	e0bfff17 	ldw	r2,-4(fp)
  80ab04:	18800035 	stwio	r2,0(r3)
}
  80ab08:	df000217 	ldw	fp,8(sp)
  80ab0c:	dec00304 	addi	sp,sp,12
  80ab10:	f800283a 	ret

0080ab14 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
  80ab14:	defffd04 	addi	sp,sp,-12
  80ab18:	df000215 	stw	fp,8(sp)
  80ab1c:	df000204 	addi	fp,sp,8
  80ab20:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80ab24:	e0bffe17 	ldw	r2,-8(fp)
  80ab28:	10800a17 	ldw	r2,40(r2)
  80ab2c:	10800037 	ldwio	r2,0(r2)
  80ab30:	e0bfff15 	stw	r2,-4(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
  80ab34:	e0bfff17 	ldw	r2,-4(fp)
  80ab38:	10800094 	ori	r2,r2,2
  80ab3c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80ab40:	e0bffe17 	ldw	r2,-8(fp)
  80ab44:	10c00a17 	ldw	r3,40(r2)
  80ab48:	e0bfff17 	ldw	r2,-4(fp)
  80ab4c:	18800035 	stwio	r2,0(r3)
}
  80ab50:	df000217 	ldw	fp,8(sp)
  80ab54:	dec00304 	addi	sp,sp,12
  80ab58:	f800283a 	ret

0080ab5c <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
  80ab5c:	defffd04 	addi	sp,sp,-12
  80ab60:	df000215 	stw	fp,8(sp)
  80ab64:	df000204 	addi	fp,sp,8
  80ab68:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80ab6c:	e0bffe17 	ldw	r2,-8(fp)
  80ab70:	10800a17 	ldw	r2,40(r2)
  80ab74:	10800037 	ldwio	r2,0(r2)
  80ab78:	e0bfff15 	stw	r2,-4(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
  80ab7c:	e0ffff17 	ldw	r3,-4(fp)
  80ab80:	00bfff44 	movi	r2,-3
  80ab84:	1884703a 	and	r2,r3,r2
  80ab88:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80ab8c:	e0bffe17 	ldw	r2,-8(fp)
  80ab90:	10c00a17 	ldw	r3,40(r2)
  80ab94:	e0bfff17 	ldw	r2,-4(fp)
  80ab98:	18800035 	stwio	r2,0(r3)
}
  80ab9c:	df000217 	ldw	fp,8(sp)
  80aba0:	dec00304 	addi	sp,sp,12
  80aba4:	f800283a 	ret

0080aba8 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
  80aba8:	defffd04 	addi	sp,sp,-12
  80abac:	df000215 	stw	fp,8(sp)
  80abb0:	df000204 	addi	fp,sp,8
  80abb4:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80abb8:	e0bffe17 	ldw	r2,-8(fp)
  80abbc:	10800a17 	ldw	r2,40(r2)
  80abc0:	10800037 	ldwio	r2,0(r2)
  80abc4:	e0bfff15 	stw	r2,-4(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
  80abc8:	e0bfff17 	ldw	r2,-4(fp)
  80abcc:	1004d23a 	srli	r2,r2,8
  80abd0:	1080004c 	andi	r2,r2,1
}
  80abd4:	df000217 	ldw	fp,8(sp)
  80abd8:	dec00304 	addi	sp,sp,12
  80abdc:	f800283a 	ret

0080abe0 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
  80abe0:	defffd04 	addi	sp,sp,-12
  80abe4:	df000215 	stw	fp,8(sp)
  80abe8:	df000204 	addi	fp,sp,8
  80abec:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80abf0:	e0bffe17 	ldw	r2,-8(fp)
  80abf4:	10800a17 	ldw	r2,40(r2)
  80abf8:	10800037 	ldwio	r2,0(r2)
  80abfc:	e0bfff15 	stw	r2,-4(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
  80ac00:	e0bfff17 	ldw	r2,-4(fp)
  80ac04:	1004d27a 	srli	r2,r2,9
  80ac08:	1080004c 	andi	r2,r2,1
}
  80ac0c:	df000217 	ldw	fp,8(sp)
  80ac10:	dec00304 	addi	sp,sp,12
  80ac14:	f800283a 	ret

0080ac18 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
  80ac18:	defffd04 	addi	sp,sp,-12
  80ac1c:	df000215 	stw	fp,8(sp)
  80ac20:	df000204 	addi	fp,sp,8
  80ac24:	e13ffe15 	stw	r4,-8(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
  80ac28:	e0bffe17 	ldw	r2,-8(fp)
  80ac2c:	10800a17 	ldw	r2,40(r2)
  80ac30:	10800037 	ldwio	r2,0(r2)
  80ac34:	e0bfff15 	stw	r2,-4(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
  80ac38:	e0bfff17 	ldw	r2,-4(fp)
  80ac3c:	10800114 	ori	r2,r2,4
  80ac40:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
  80ac44:	e0bfff17 	ldw	r2,-4(fp)
  80ac48:	10800214 	ori	r2,r2,8
  80ac4c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80ac50:	e0bffe17 	ldw	r2,-8(fp)
  80ac54:	10c00a17 	ldw	r3,40(r2)
  80ac58:	e0bfff17 	ldw	r2,-4(fp)
  80ac5c:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
  80ac60:	e0ffff17 	ldw	r3,-4(fp)
  80ac64:	00bffec4 	movi	r2,-5
  80ac68:	1884703a 	and	r2,r3,r2
  80ac6c:	e0bfff15 	stw	r2,-4(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
  80ac70:	e0ffff17 	ldw	r3,-4(fp)
  80ac74:	00bffdc4 	movi	r2,-9
  80ac78:	1884703a 	and	r2,r3,r2
  80ac7c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
  80ac80:	e0bffe17 	ldw	r2,-8(fp)
  80ac84:	10c00a17 	ldw	r3,40(r2)
  80ac88:	e0bfff17 	ldw	r2,-4(fp)
  80ac8c:	18800035 	stwio	r2,0(r3)
}
  80ac90:	df000217 	ldw	fp,8(sp)
  80ac94:	dec00304 	addi	sp,sp,12
  80ac98:	f800283a 	ret

0080ac9c <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
  80ac9c:	defffb04 	addi	sp,sp,-20
  80aca0:	df000415 	stw	fp,16(sp)
  80aca4:	df000404 	addi	fp,sp,16
  80aca8:	e13ffc15 	stw	r4,-16(fp)
  80acac:	e17ffd15 	stw	r5,-12(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  80acb0:	e0bffc17 	ldw	r2,-16(fp)
  80acb4:	10800a17 	ldw	r2,40(r2)
  80acb8:	10800104 	addi	r2,r2,4
  80acbc:	10800037 	ldwio	r2,0(r2)
  80acc0:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80acc4:	e0bffd17 	ldw	r2,-12(fp)
  80acc8:	1004c03a 	cmpne	r2,r2,zero
  80accc:	1000071e 	bne	r2,zero,80acec <alt_up_audio_read_fifo_avail+0x50>
  80acd0:	e0bffe17 	ldw	r2,-8(fp)
  80acd4:	10bfc00c 	andi	r2,r2,65280
  80acd8:	e0bfff15 	stw	r2,-4(fp)
  80acdc:	e0bfff17 	ldw	r2,-4(fp)
  80ace0:	1004d23a 	srli	r2,r2,8
  80ace4:	e0bfff15 	stw	r2,-4(fp)
  80ace8:	00000306 	br	80acf8 <alt_up_audio_read_fifo_avail+0x5c>
  80acec:	e0bffe17 	ldw	r2,-8(fp)
  80acf0:	10803fcc 	andi	r2,r2,255
  80acf4:	e0bfff15 	stw	r2,-4(fp)
  80acf8:	e0bfff17 	ldw	r2,-4(fp)
  80acfc:	e0bffe15 	stw	r2,-8(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
  80ad00:	e0bffe17 	ldw	r2,-8(fp)
}
  80ad04:	df000417 	ldw	fp,16(sp)
  80ad08:	dec00504 	addi	sp,sp,20
  80ad0c:	f800283a 	ret

0080ad10 <alt_up_audio_record_r>:

/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80ad10:	defff904 	addi	sp,sp,-28
  80ad14:	dfc00615 	stw	ra,24(sp)
  80ad18:	df000515 	stw	fp,20(sp)
  80ad1c:	df000504 	addi	fp,sp,20
  80ad20:	e13ffb15 	stw	r4,-20(fp)
  80ad24:	e17ffc15 	stw	r5,-16(fp)
  80ad28:	e1bffd15 	stw	r6,-12(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
  80ad2c:	e13ffb17 	ldw	r4,-20(fp)
  80ad30:	01400044 	movi	r5,1
  80ad34:	080ac9c0 	call	80ac9c <alt_up_audio_read_fifo_avail>
  80ad38:	e0bffe15 	stw	r2,-8(fp)
	if (data_words <= BUF_THRESHOLD)
  80ad3c:	e0bffe17 	ldw	r2,-8(fp)
  80ad40:	10801868 	cmpgeui	r2,r2,97
  80ad44:	1000021e 	bne	r2,zero,80ad50 <alt_up_audio_record_r+0x40>
		return 0;
  80ad48:	e03fff15 	stw	zero,-4(fp)
  80ad4c:	00000606 	br	80ad68 <alt_up_audio_record_r+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  80ad50:	e13ffb17 	ldw	r4,-20(fp)
  80ad54:	e17ffc17 	ldw	r5,-16(fp)
  80ad58:	e1bffd17 	ldw	r6,-12(fp)
  80ad5c:	01c00044 	movi	r7,1
  80ad60:	080af400 	call	80af40 <alt_up_audio_read_fifo>
  80ad64:	e0bfff15 	stw	r2,-4(fp)
}
  80ad68:	e0bfff17 	ldw	r2,-4(fp)
  80ad6c:	dfc00617 	ldw	ra,24(sp)
  80ad70:	df000517 	ldw	fp,20(sp)
  80ad74:	dec00704 	addi	sp,sp,28
  80ad78:	f800283a 	ret

0080ad7c <alt_up_audio_record_l>:

/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80ad7c:	defff904 	addi	sp,sp,-28
  80ad80:	dfc00615 	stw	ra,24(sp)
  80ad84:	df000515 	stw	fp,20(sp)
  80ad88:	df000504 	addi	fp,sp,20
  80ad8c:	e13ffb15 	stw	r4,-20(fp)
  80ad90:	e17ffc15 	stw	r5,-16(fp)
  80ad94:	e1bffd15 	stw	r6,-12(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
  80ad98:	e13ffb17 	ldw	r4,-20(fp)
  80ad9c:	000b883a 	mov	r5,zero
  80ada0:	080ac9c0 	call	80ac9c <alt_up_audio_read_fifo_avail>
  80ada4:	e0bffe15 	stw	r2,-8(fp)
	if (data_words <= BUF_THRESHOLD)
  80ada8:	e0bffe17 	ldw	r2,-8(fp)
  80adac:	10801868 	cmpgeui	r2,r2,97
  80adb0:	1000021e 	bne	r2,zero,80adbc <alt_up_audio_record_l+0x40>
		return 0;
  80adb4:	e03fff15 	stw	zero,-4(fp)
  80adb8:	00000606 	br	80add4 <alt_up_audio_record_l+0x58>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  80adbc:	e13ffb17 	ldw	r4,-20(fp)
  80adc0:	e17ffc17 	ldw	r5,-16(fp)
  80adc4:	e1bffd17 	ldw	r6,-12(fp)
  80adc8:	000f883a 	mov	r7,zero
  80adcc:	080af400 	call	80af40 <alt_up_audio_read_fifo>
  80add0:	e0bfff15 	stw	r2,-4(fp)
}
  80add4:	e0bfff17 	ldw	r2,-4(fp)
  80add8:	dfc00617 	ldw	ra,24(sp)
  80addc:	df000517 	ldw	fp,20(sp)
  80ade0:	dec00704 	addi	sp,sp,28
  80ade4:	f800283a 	ret

0080ade8 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
  80ade8:	defffb04 	addi	sp,sp,-20
  80adec:	df000415 	stw	fp,16(sp)
  80adf0:	df000404 	addi	fp,sp,16
  80adf4:	e13ffc15 	stw	r4,-16(fp)
  80adf8:	e17ffd15 	stw	r5,-12(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  80adfc:	e0bffc17 	ldw	r2,-16(fp)
  80ae00:	10800a17 	ldw	r2,40(r2)
  80ae04:	10800104 	addi	r2,r2,4
  80ae08:	10800037 	ldwio	r2,0(r2)
  80ae0c:	e0bffe15 	stw	r2,-8(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80ae10:	e0bffd17 	ldw	r2,-12(fp)
  80ae14:	1004c03a 	cmpne	r2,r2,zero
  80ae18:	1000071e 	bne	r2,zero,80ae38 <alt_up_audio_write_fifo_space+0x50>
  80ae1c:	e0bffe17 	ldw	r2,-8(fp)
  80ae20:	10bfc02c 	andhi	r2,r2,65280
  80ae24:	e0bfff15 	stw	r2,-4(fp)
  80ae28:	e0bfff17 	ldw	r2,-4(fp)
  80ae2c:	1004d63a 	srli	r2,r2,24
  80ae30:	e0bfff15 	stw	r2,-4(fp)
  80ae34:	00000606 	br	80ae50 <alt_up_audio_write_fifo_space+0x68>
  80ae38:	e0bffe17 	ldw	r2,-8(fp)
  80ae3c:	10803fec 	andhi	r2,r2,255
  80ae40:	e0bfff15 	stw	r2,-4(fp)
  80ae44:	e0bfff17 	ldw	r2,-4(fp)
  80ae48:	1004d43a 	srli	r2,r2,16
  80ae4c:	e0bfff15 	stw	r2,-4(fp)
  80ae50:	e0bfff17 	ldw	r2,-4(fp)
  80ae54:	e0bffe15 	stw	r2,-8(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
  80ae58:	e0bffe17 	ldw	r2,-8(fp)
}
  80ae5c:	df000417 	ldw	fp,16(sp)
  80ae60:	dec00504 	addi	sp,sp,20
  80ae64:	f800283a 	ret

0080ae68 <alt_up_audio_play_r>:

/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80ae68:	defff904 	addi	sp,sp,-28
  80ae6c:	dfc00615 	stw	ra,24(sp)
  80ae70:	df000515 	stw	fp,20(sp)
  80ae74:	df000504 	addi	fp,sp,20
  80ae78:	e13ffb15 	stw	r4,-20(fp)
  80ae7c:	e17ffc15 	stw	r5,-16(fp)
  80ae80:	e1bffd15 	stw	r6,-12(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
  80ae84:	e13ffb17 	ldw	r4,-20(fp)
  80ae88:	01400044 	movi	r5,1
  80ae8c:	080ade80 	call	80ade8 <alt_up_audio_write_fifo_space>
  80ae90:	e0bffe15 	stw	r2,-8(fp)
	if (space <= BUF_THRESHOLD)
  80ae94:	e0bffe17 	ldw	r2,-8(fp)
  80ae98:	10801868 	cmpgeui	r2,r2,97
  80ae9c:	1000021e 	bne	r2,zero,80aea8 <alt_up_audio_play_r+0x40>
		return 0;
  80aea0:	e03fff15 	stw	zero,-4(fp)
  80aea4:	00000606 	br	80aec0 <alt_up_audio_play_r+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
  80aea8:	e13ffb17 	ldw	r4,-20(fp)
  80aeac:	e17ffc17 	ldw	r5,-16(fp)
  80aeb0:	e1bffd17 	ldw	r6,-12(fp)
  80aeb4:	01c00044 	movi	r7,1
  80aeb8:	080b0400 	call	80b040 <alt_up_audio_write_fifo>
  80aebc:	e0bfff15 	stw	r2,-4(fp)
}
  80aec0:	e0bfff17 	ldw	r2,-4(fp)
  80aec4:	dfc00617 	ldw	ra,24(sp)
  80aec8:	df000517 	ldw	fp,20(sp)
  80aecc:	dec00704 	addi	sp,sp,28
  80aed0:	f800283a 	ret

0080aed4 <alt_up_audio_play_l>:

/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
  80aed4:	defff904 	addi	sp,sp,-28
  80aed8:	dfc00615 	stw	ra,24(sp)
  80aedc:	df000515 	stw	fp,20(sp)
  80aee0:	df000504 	addi	fp,sp,20
  80aee4:	e13ffb15 	stw	r4,-20(fp)
  80aee8:	e17ffc15 	stw	r5,-16(fp)
  80aeec:	e1bffd15 	stw	r6,-12(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
  80aef0:	e13ffb17 	ldw	r4,-20(fp)
  80aef4:	000b883a 	mov	r5,zero
  80aef8:	080ade80 	call	80ade8 <alt_up_audio_write_fifo_space>
  80aefc:	e0bffe15 	stw	r2,-8(fp)
	if (space <= BUF_THRESHOLD)
  80af00:	e0bffe17 	ldw	r2,-8(fp)
  80af04:	10801868 	cmpgeui	r2,r2,97
  80af08:	1000021e 	bne	r2,zero,80af14 <alt_up_audio_play_l+0x40>
		return 0;
  80af0c:	e03fff15 	stw	zero,-4(fp)
  80af10:	00000606 	br	80af2c <alt_up_audio_play_l+0x58>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
  80af14:	e13ffb17 	ldw	r4,-20(fp)
  80af18:	e17ffc17 	ldw	r5,-16(fp)
  80af1c:	e1bffd17 	ldw	r6,-12(fp)
  80af20:	000f883a 	mov	r7,zero
  80af24:	080b0400 	call	80b040 <alt_up_audio_write_fifo>
  80af28:	e0bfff15 	stw	r2,-4(fp)
}
  80af2c:	e0bfff17 	ldw	r2,-4(fp)
  80af30:	dfc00617 	ldw	ra,24(sp)
  80af34:	df000517 	ldw	fp,20(sp)
  80af38:	dec00704 	addi	sp,sp,28
  80af3c:	f800283a 	ret

0080af40 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  80af40:	defff604 	addi	sp,sp,-40
  80af44:	df000915 	stw	fp,36(sp)
  80af48:	df000904 	addi	fp,sp,36
  80af4c:	e13ff715 	stw	r4,-36(fp)
  80af50:	e17ff815 	stw	r5,-32(fp)
  80af54:	e1bff915 	stw	r6,-28(fp)
  80af58:	e1fffa15 	stw	r7,-24(fp)
	unsigned int fifospace;
	int count = 0;
  80af5c:	e03ffc15 	stw	zero,-16(fp)
	while ( count < len ) 
  80af60:	e0fffc17 	ldw	r3,-16(fp)
  80af64:	e0bff917 	ldw	r2,-28(fp)
  80af68:	1880310e 	bge	r3,r2,80b030 <alt_up_audio_read_fifo+0xf0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  80af6c:	e0bff717 	ldw	r2,-36(fp)
  80af70:	10800a17 	ldw	r2,40(r2)
  80af74:	10800104 	addi	r2,r2,4
  80af78:	10800037 	ldwio	r2,0(r2)
  80af7c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80af80:	e0bffa17 	ldw	r2,-24(fp)
  80af84:	1004c03a 	cmpne	r2,r2,zero
  80af88:	1000071e 	bne	r2,zero,80afa8 <alt_up_audio_read_fifo+0x68>
  80af8c:	e0bffb17 	ldw	r2,-20(fp)
  80af90:	10bfc00c 	andi	r2,r2,65280
  80af94:	e0bffd15 	stw	r2,-12(fp)
  80af98:	e0bffd17 	ldw	r2,-12(fp)
  80af9c:	1004d23a 	srli	r2,r2,8
  80afa0:	e0bffd15 	stw	r2,-12(fp)
  80afa4:	00000306 	br	80afb4 <alt_up_audio_read_fifo+0x74>
  80afa8:	e0bffb17 	ldw	r2,-20(fp)
  80afac:	10803fcc 	andi	r2,r2,255
  80afb0:	e0bffd15 	stw	r2,-12(fp)
  80afb4:	e0fffd17 	ldw	r3,-12(fp)
  80afb8:	e0fffb15 	stw	r3,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
  80afbc:	e0bffb17 	ldw	r2,-20(fp)
  80afc0:	1005003a 	cmpeq	r2,r2,zero
  80afc4:	10001a1e 	bne	r2,zero,80b030 <alt_up_audio_read_fifo+0xf0>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
  80afc8:	e0bffc17 	ldw	r2,-16(fp)
  80afcc:	100690ba 	slli	r3,r2,2
  80afd0:	e0bff817 	ldw	r2,-32(fp)
  80afd4:	1887883a 	add	r3,r3,r2
  80afd8:	e0fffe15 	stw	r3,-8(fp)
  80afdc:	e0bffa17 	ldw	r2,-24(fp)
  80afe0:	1004c03a 	cmpne	r2,r2,zero
  80afe4:	1000061e 	bne	r2,zero,80b000 <alt_up_audio_read_fifo+0xc0>
  80afe8:	e0bff717 	ldw	r2,-36(fp)
  80afec:	10800a17 	ldw	r2,40(r2)
  80aff0:	10800204 	addi	r2,r2,8
  80aff4:	10800037 	ldwio	r2,0(r2)
  80aff8:	e0bfff15 	stw	r2,-4(fp)
  80affc:	00000506 	br	80b014 <alt_up_audio_read_fifo+0xd4>
  80b000:	e0bff717 	ldw	r2,-36(fp)
  80b004:	10800a17 	ldw	r2,40(r2)
  80b008:	10800304 	addi	r2,r2,12
  80b00c:	10800037 	ldwio	r2,0(r2)
  80b010:	e0bfff15 	stw	r2,-4(fp)
  80b014:	e0bfff17 	ldw	r2,-4(fp)
  80b018:	e0fffe17 	ldw	r3,-8(fp)
  80b01c:	18800015 	stw	r2,0(r3)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
  80b020:	e0bffc17 	ldw	r2,-16(fp)
  80b024:	10800044 	addi	r2,r2,1
  80b028:	e0bffc15 	stw	r2,-16(fp)
  80b02c:	003fcc06 	br	80af60 <alt_up_audio_read_fifo+0x20>
		}
		else
		{
			// no more data to read
			break;
		}
	}
	return count;
  80b030:	e0bffc17 	ldw	r2,-16(fp)
}
  80b034:	df000917 	ldw	fp,36(sp)
  80b038:	dec00a04 	addi	sp,sp,40
  80b03c:	f800283a 	ret

0080b040 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
  80b040:	defff804 	addi	sp,sp,-32
  80b044:	df000715 	stw	fp,28(sp)
  80b048:	df000704 	addi	fp,sp,28
  80b04c:	e13ff915 	stw	r4,-28(fp)
  80b050:	e17ffa15 	stw	r5,-24(fp)
  80b054:	e1bffb15 	stw	r6,-20(fp)
  80b058:	e1fffc15 	stw	r7,-16(fp)
	unsigned int fifospace;
	int count = 0;
  80b05c:	e03ffe15 	stw	zero,-8(fp)
	while ( count < len ) 
  80b060:	e0fffe17 	ldw	r3,-8(fp)
  80b064:	e0bffb17 	ldw	r2,-20(fp)
  80b068:	18803b0e 	bge	r3,r2,80b158 <alt_up_audio_write_fifo+0x118>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
  80b06c:	e0bff917 	ldw	r2,-28(fp)
  80b070:	10800a17 	ldw	r2,40(r2)
  80b074:	10800104 	addi	r2,r2,4
  80b078:	10800037 	ldwio	r2,0(r2)
  80b07c:	e0bffd15 	stw	r2,-12(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
  80b080:	e0bffc17 	ldw	r2,-16(fp)
  80b084:	1004c03a 	cmpne	r2,r2,zero
  80b088:	1000071e 	bne	r2,zero,80b0a8 <alt_up_audio_write_fifo+0x68>
  80b08c:	e0bffd17 	ldw	r2,-12(fp)
  80b090:	10bfc02c 	andhi	r2,r2,65280
  80b094:	e0bfff15 	stw	r2,-4(fp)
  80b098:	e0bfff17 	ldw	r2,-4(fp)
  80b09c:	1004d63a 	srli	r2,r2,24
  80b0a0:	e0bfff15 	stw	r2,-4(fp)
  80b0a4:	00000606 	br	80b0c0 <alt_up_audio_write_fifo+0x80>
  80b0a8:	e0bffd17 	ldw	r2,-12(fp)
  80b0ac:	10803fec 	andhi	r2,r2,255
  80b0b0:	e0bfff15 	stw	r2,-4(fp)
  80b0b4:	e0bfff17 	ldw	r2,-4(fp)
  80b0b8:	1004d43a 	srli	r2,r2,16
  80b0bc:	e0bfff15 	stw	r2,-4(fp)
  80b0c0:	e0bfff17 	ldw	r2,-4(fp)
  80b0c4:	e0bffd15 	stw	r2,-12(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
  80b0c8:	e0bffd17 	ldw	r2,-12(fp)
  80b0cc:	1005003a 	cmpeq	r2,r2,zero
  80b0d0:	1000211e 	bne	r2,zero,80b158 <alt_up_audio_write_fifo+0x118>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
  80b0d4:	e0bffc17 	ldw	r2,-16(fp)
  80b0d8:	1004c03a 	cmpne	r2,r2,zero
  80b0dc:	10000f1e 	bne	r2,zero,80b11c <alt_up_audio_write_fifo+0xdc>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
  80b0e0:	e0bff917 	ldw	r2,-28(fp)
  80b0e4:	10800a17 	ldw	r2,40(r2)
  80b0e8:	10800204 	addi	r2,r2,8
  80b0ec:	100b883a 	mov	r5,r2
  80b0f0:	e1bffe04 	addi	r6,fp,-8
  80b0f4:	30c00017 	ldw	r3,0(r6)
  80b0f8:	1805883a 	mov	r2,r3
  80b0fc:	100890ba 	slli	r4,r2,2
  80b100:	e0bffa17 	ldw	r2,-24(fp)
  80b104:	2085883a 	add	r2,r4,r2
  80b108:	10800017 	ldw	r2,0(r2)
  80b10c:	28800035 	stwio	r2,0(r5)
  80b110:	18c00044 	addi	r3,r3,1
  80b114:	30c00015 	stw	r3,0(r6)
  80b118:	003fd106 	br	80b060 <alt_up_audio_write_fifo+0x20>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
  80b11c:	e0bff917 	ldw	r2,-28(fp)
  80b120:	10800a17 	ldw	r2,40(r2)
  80b124:	10800304 	addi	r2,r2,12
  80b128:	100b883a 	mov	r5,r2
  80b12c:	e1bffe04 	addi	r6,fp,-8
  80b130:	30c00017 	ldw	r3,0(r6)
  80b134:	1805883a 	mov	r2,r3
  80b138:	100890ba 	slli	r4,r2,2
  80b13c:	e0bffa17 	ldw	r2,-24(fp)
  80b140:	2085883a 	add	r2,r4,r2
  80b144:	10800017 	ldw	r2,0(r2)
  80b148:	28800035 	stwio	r2,0(r5)
  80b14c:	18c00044 	addi	r3,r3,1
  80b150:	30c00015 	stw	r3,0(r6)
  80b154:	003fc206 	br	80b060 <alt_up_audio_write_fifo+0x20>
		}
		else
		{
			// no more space to write
			break;
		}
	}
	return count;
  80b158:	e0bffe17 	ldw	r2,-8(fp)
}
  80b15c:	df000717 	ldw	fp,28(sp)
  80b160:	dec00804 	addi	sp,sp,32
  80b164:	f800283a 	ret

0080b168 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
  80b168:	defffc04 	addi	sp,sp,-16
  80b16c:	df000315 	stw	fp,12(sp)
  80b170:	df000304 	addi	fp,sp,12
  80b174:	e13ffd15 	stw	r4,-12(fp)
  80b178:	e17ffe15 	stw	r5,-8(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
  80b17c:	e0bffe17 	ldw	r2,-8(fp)
  80b180:	1004c03a 	cmpne	r2,r2,zero
  80b184:	1000061e 	bne	r2,zero,80b1a0 <alt_up_audio_read_fifo_head+0x38>
  80b188:	e0bffd17 	ldw	r2,-12(fp)
  80b18c:	10800a17 	ldw	r2,40(r2)
  80b190:	10800204 	addi	r2,r2,8
  80b194:	10800037 	ldwio	r2,0(r2)
  80b198:	e0bfff15 	stw	r2,-4(fp)
  80b19c:	00000506 	br	80b1b4 <alt_up_audio_read_fifo_head+0x4c>
  80b1a0:	e0bffd17 	ldw	r2,-12(fp)
  80b1a4:	10800a17 	ldw	r2,40(r2)
  80b1a8:	10800304 	addi	r2,r2,12
  80b1ac:	10800037 	ldwio	r2,0(r2)
  80b1b0:	e0bfff15 	stw	r2,-4(fp)
  80b1b4:	e0bfff17 	ldw	r2,-4(fp)
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
}
  80b1b8:	df000317 	ldw	fp,12(sp)
  80b1bc:	dec00404 	addi	sp,sp,16
  80b1c0:	f800283a 	ret

0080b1c4 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
  80b1c4:	defffc04 	addi	sp,sp,-16
  80b1c8:	df000315 	stw	fp,12(sp)
  80b1cc:	df000304 	addi	fp,sp,12
  80b1d0:	e13ffd15 	stw	r4,-12(fp)
  80b1d4:	e17ffe15 	stw	r5,-8(fp)
  80b1d8:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
  80b1dc:	e0bfff17 	ldw	r2,-4(fp)
  80b1e0:	1004c03a 	cmpne	r2,r2,zero
  80b1e4:	1000071e 	bne	r2,zero,80b204 <alt_up_audio_write_fifo_head+0x40>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
  80b1e8:	e0bffd17 	ldw	r2,-12(fp)
  80b1ec:	10800a17 	ldw	r2,40(r2)
  80b1f0:	10800204 	addi	r2,r2,8
  80b1f4:	1007883a 	mov	r3,r2
  80b1f8:	e0bffe17 	ldw	r2,-8(fp)
  80b1fc:	18800035 	stwio	r2,0(r3)
  80b200:	00000606 	br	80b21c <alt_up_audio_write_fifo_head+0x58>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
  80b204:	e0bffd17 	ldw	r2,-12(fp)
  80b208:	10800a17 	ldw	r2,40(r2)
  80b20c:	10800304 	addi	r2,r2,12
  80b210:	1007883a 	mov	r3,r2
  80b214:	e0bffe17 	ldw	r2,-8(fp)
  80b218:	18800035 	stwio	r2,0(r3)
}
  80b21c:	df000317 	ldw	fp,12(sp)
  80b220:	dec00404 	addi	sp,sp,16
  80b224:	f800283a 	ret

0080b228 <Write_Sector_Data>:


bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
  80b228:	defffa04 	addi	sp,sp,-24
  80b22c:	dfc00515 	stw	ra,20(sp)
  80b230:	df000415 	stw	fp,16(sp)
  80b234:	df000404 	addi	fp,sp,16
  80b238:	e13ffc15 	stw	r4,-16(fp)
  80b23c:	e17ffd15 	stw	r5,-12(fp)
    bool result = false;
  80b240:	e03ffe15 	stw	zero,-8(fp)

    if (alt_up_sd_card_is_Present())
  80b244:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80b248:	1005003a 	cmpeq	r2,r2,zero
  80b24c:	10001e1e 	bne	r2,zero,80b2c8 <Write_Sector_Data+0xa0>
    {
        short int reg_state = 0xff;
  80b250:	00803fc4 	movi	r2,255
  80b254:	e0bfff0d 	sth	r2,-4(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80b258:	d1202017 	ldw	r4,-32640(gp)
  80b25c:	e0fffc17 	ldw	r3,-16(fp)
  80b260:	e0bffd17 	ldw	r2,-12(fp)
  80b264:	1885883a 	add	r2,r3,r2
  80b268:	1004927a 	slli	r2,r2,9
  80b26c:	20800035 	stwio	r2,0(r4)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
  80b270:	d0e01f17 	ldw	r3,-32644(gp)
  80b274:	00800604 	movi	r2,24
  80b278:	1880002d 	sthio	r2,0(r3)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80b27c:	d0a01c17 	ldw	r2,-32656(gp)
  80b280:	1080002b 	ldhuio	r2,0(r2)
  80b284:	e0bfff0d 	sth	r2,-4(fp)
        } while ((reg_state & 0x04)!=0);
  80b288:	e0bfff0b 	ldhu	r2,-4(fp)
  80b28c:	1080010c 	andi	r2,r2,4
  80b290:	1005003a 	cmpeq	r2,r2,zero
  80b294:	1000011e 	bne	r2,zero,80b29c <Write_Sector_Data+0x74>
  80b298:	003ff806 	br	80b27c <Write_Sector_Data+0x54>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
  80b29c:	e0bfff0b 	ldhu	r2,-4(fp)
  80b2a0:	1080040c 	andi	r2,r2,16
  80b2a4:	1004c03a 	cmpne	r2,r2,zero
  80b2a8:	1000071e 	bne	r2,zero,80b2c8 <Write_Sector_Data+0xa0>
        {
            result = true;
  80b2ac:	00800044 	movi	r2,1
  80b2b0:	e0bffe15 	stw	r2,-8(fp)
            current_sector_modified = false;
  80b2b4:	d0202515 	stw	zero,-32620(gp)
            current_sector_index = sector_index+partition_offset;
  80b2b8:	e0fffc17 	ldw	r3,-16(fp)
  80b2bc:	e0bffd17 	ldw	r2,-12(fp)
  80b2c0:	1885883a 	add	r2,r3,r2
  80b2c4:	d0a02615 	stw	r2,-32616(gp)
        }
    }
    return result;
  80b2c8:	e0bffe17 	ldw	r2,-8(fp)
}
  80b2cc:	dfc00517 	ldw	ra,20(sp)
  80b2d0:	df000417 	ldw	fp,16(sp)
  80b2d4:	dec00604 	addi	sp,sp,24
  80b2d8:	f800283a 	ret

0080b2dc <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
  80b2dc:	defffd04 	addi	sp,sp,-12
  80b2e0:	dfc00215 	stw	ra,8(sp)
  80b2e4:	df000115 	stw	fp,4(sp)
  80b2e8:	df000104 	addi	fp,sp,4
    bool result = true;
  80b2ec:	00800044 	movi	r2,1
  80b2f0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
  80b2f4:	d0a02517 	ldw	r2,-32620(gp)
  80b2f8:	1005003a 	cmpeq	r2,r2,zero
  80b2fc:	1000041e 	bne	r2,zero,80b310 <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
  80b300:	d1202617 	ldw	r4,-32616(gp)
  80b304:	000b883a 	mov	r5,zero
  80b308:	080b2280 	call	80b228 <Write_Sector_Data>
  80b30c:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
  80b310:	e0bfff17 	ldw	r2,-4(fp)
}
  80b314:	dfc00217 	ldw	ra,8(sp)
  80b318:	df000117 	ldw	fp,4(sp)
  80b31c:	dec00304 	addi	sp,sp,12
  80b320:	f800283a 	ret

0080b324 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
  80b324:	defff904 	addi	sp,sp,-28
  80b328:	dfc00615 	stw	ra,24(sp)
  80b32c:	df000515 	stw	fp,20(sp)
  80b330:	df000504 	addi	fp,sp,20
  80b334:	e13ffb15 	stw	r4,-20(fp)
  80b338:	e17ffc15 	stw	r5,-16(fp)
	bool result = false;
  80b33c:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present())
  80b340:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80b344:	1005003a 	cmpeq	r2,r2,zero
  80b348:	1000281e 	bne	r2,zero,80b3ec <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
  80b34c:	00803fc4 	movi	r2,255
  80b350:	e0bffe0d 	sth	r2,-8(fp)

        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
  80b354:	d0a02517 	ldw	r2,-32620(gp)
  80b358:	1005003a 	cmpeq	r2,r2,zero
  80b35c:	1000071e 	bne	r2,zero,80b37c <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
  80b360:	d1202617 	ldw	r4,-32616(gp)
  80b364:	000b883a 	mov	r5,zero
  80b368:	080b2280 	call	80b228 <Write_Sector_Data>
  80b36c:	1004c03a 	cmpne	r2,r2,zero
  80b370:	1000021e 	bne	r2,zero,80b37c <Read_Sector_Data+0x58>
            {
                return false;
  80b374:	e03fff15 	stw	zero,-4(fp)
  80b378:	00001e06 	br	80b3f4 <Read_Sector_Data+0xd0>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
  80b37c:	d1202017 	ldw	r4,-32640(gp)
  80b380:	e0fffb17 	ldw	r3,-20(fp)
  80b384:	e0bffc17 	ldw	r2,-16(fp)
  80b388:	1885883a 	add	r2,r3,r2
  80b38c:	1004927a 	slli	r2,r2,9
  80b390:	20800035 	stwio	r2,0(r4)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
  80b394:	d0e01f17 	ldw	r3,-32644(gp)
  80b398:	00800444 	movi	r2,17
  80b39c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
  80b3a0:	d0a01c17 	ldw	r2,-32656(gp)
  80b3a4:	1080002b 	ldhuio	r2,0(r2)
  80b3a8:	e0bffe0d 	sth	r2,-8(fp)
		} while ((reg_state & 0x04)!=0);
  80b3ac:	e0bffe0b 	ldhu	r2,-8(fp)
  80b3b0:	1080010c 	andi	r2,r2,4
  80b3b4:	1005003a 	cmpeq	r2,r2,zero
  80b3b8:	1000011e 	bne	r2,zero,80b3c0 <Read_Sector_Data+0x9c>
  80b3bc:	003ff806 	br	80b3a0 <Read_Sector_Data+0x7c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
  80b3c0:	e0bffe0b 	ldhu	r2,-8(fp)
  80b3c4:	1080040c 	andi	r2,r2,16
  80b3c8:	1004c03a 	cmpne	r2,r2,zero
  80b3cc:	1000071e 	bne	r2,zero,80b3ec <Read_Sector_Data+0xc8>
		{
			result = true;
  80b3d0:	00800044 	movi	r2,1
  80b3d4:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
  80b3d8:	d0202515 	stw	zero,-32620(gp)
            current_sector_index = sector_index+partition_offset;
  80b3dc:	e0fffb17 	ldw	r3,-20(fp)
  80b3e0:	e0bffc17 	ldw	r2,-16(fp)
  80b3e4:	1885883a 	add	r2,r3,r2
  80b3e8:	d0a02615 	stw	r2,-32616(gp)
		}
	}
	return result;
  80b3ec:	e0bffd17 	ldw	r2,-12(fp)
  80b3f0:	e0bfff15 	stw	r2,-4(fp)
}
  80b3f4:	e0bfff17 	ldw	r2,-4(fp)
  80b3f8:	dfc00617 	ldw	ra,24(sp)
  80b3fc:	df000517 	ldw	fp,20(sp)
  80b400:	dec00704 	addi	sp,sp,28
  80b404:	f800283a 	ret

0080b408 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
  80b408:	defffa04 	addi	sp,sp,-24
  80b40c:	dfc00515 	stw	ra,20(sp)
  80b410:	df000415 	stw	fp,16(sp)
  80b414:	df000404 	addi	fp,sp,16
  80b418:	e13ffc15 	stw	r4,-16(fp)
  80b41c:	e17ffd15 	stw	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
  80b420:	e0bffc17 	ldw	r2,-16(fp)
  80b424:	1006d23a 	srli	r3,r2,8
  80b428:	d0a02217 	ldw	r2,-32632(gp)
  80b42c:	1885883a 	add	r2,r3,r2
  80b430:	e0bffe15 	stw	r2,-8(fp)

    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80b434:	00802074 	movhi	r2,129
  80b438:	10886204 	addi	r2,r2,8584
  80b43c:	e0fffe17 	ldw	r3,-8(fp)
  80b440:	10801117 	ldw	r2,68(r2)
  80b444:	1885883a 	add	r2,r3,r2
  80b448:	e0bffe15 	stw	r2,-8(fp)

    if (sector_index != current_sector_index)
  80b44c:	e0fffe17 	ldw	r3,-8(fp)
  80b450:	d0a02617 	ldw	r2,-32616(gp)
  80b454:	18800726 	beq	r3,r2,80b474 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80b458:	e13ffe17 	ldw	r4,-8(fp)
  80b45c:	000b883a 	mov	r5,zero
  80b460:	080b3240 	call	80b324 <Read_Sector_Data>
  80b464:	1004c03a 	cmpne	r2,r2,zero
  80b468:	1000021e 	bne	r2,zero,80b474 <get_cluster_flag+0x6c>
        {
            return false;
  80b46c:	e03fff15 	stw	zero,-4(fp)
  80b470:	00000c06 	br	80b4a4 <get_cluster_flag+0x9c>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
  80b474:	e17ffd17 	ldw	r5,-12(fp)
  80b478:	d1202417 	ldw	r4,-32624(gp)
  80b47c:	e0bffc17 	ldw	r2,-16(fp)
  80b480:	10c03fcc 	andi	r3,r2,255
  80b484:	1805883a 	mov	r2,r3
  80b488:	10c7883a 	add	r3,r2,r3
  80b48c:	20800a17 	ldw	r2,40(r4)
  80b490:	1885883a 	add	r2,r3,r2
  80b494:	1080002b 	ldhuio	r2,0(r2)
  80b498:	2880000d 	sth	r2,0(r5)
    return true;
  80b49c:	00800044 	movi	r2,1
  80b4a0:	e0bfff15 	stw	r2,-4(fp)
}
  80b4a4:	e0bfff17 	ldw	r2,-4(fp)
  80b4a8:	dfc00517 	ldw	ra,20(sp)
  80b4ac:	df000417 	ldw	fp,16(sp)
  80b4b0:	dec00604 	addi	sp,sp,24
  80b4b4:	f800283a 	ret

0080b4b8 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
  80b4b8:	defff904 	addi	sp,sp,-28
  80b4bc:	dfc00615 	stw	ra,24(sp)
  80b4c0:	df000515 	stw	fp,20(sp)
  80b4c4:	df000504 	addi	fp,sp,20
  80b4c8:	e13ffb15 	stw	r4,-20(fp)
  80b4cc:	e1bffd15 	stw	r6,-12(fp)
  80b4d0:	e17ffc0d 	sth	r5,-16(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
  80b4d4:	e0bffb17 	ldw	r2,-20(fp)
  80b4d8:	1006d23a 	srli	r3,r2,8
  80b4dc:	d0a02217 	ldw	r2,-32632(gp)
  80b4e0:	1885883a 	add	r2,r3,r2
  80b4e4:	e0bffe15 	stw	r2,-8(fp)

    if (first_fat)
  80b4e8:	e0bffd17 	ldw	r2,-12(fp)
  80b4ec:	1005003a 	cmpeq	r2,r2,zero
  80b4f0:	1000071e 	bne	r2,zero,80b510 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
  80b4f4:	00802074 	movhi	r2,129
  80b4f8:	10886204 	addi	r2,r2,8584
  80b4fc:	e0fffe17 	ldw	r3,-8(fp)
  80b500:	10801117 	ldw	r2,68(r2)
  80b504:	1885883a 	add	r2,r3,r2
  80b508:	e0bffe15 	stw	r2,-8(fp)
  80b50c:	00000606 	br	80b528 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
  80b510:	00802074 	movhi	r2,129
  80b514:	10886204 	addi	r2,r2,8584
  80b518:	e0fffe17 	ldw	r3,-8(fp)
  80b51c:	10801217 	ldw	r2,72(r2)
  80b520:	1885883a 	add	r2,r3,r2
  80b524:	e0bffe15 	stw	r2,-8(fp)
    }

    if (sector_index != current_sector_index)
  80b528:	e0fffe17 	ldw	r3,-8(fp)
  80b52c:	d0a02617 	ldw	r2,-32616(gp)
  80b530:	18800726 	beq	r3,r2,80b550 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
  80b534:	e13ffe17 	ldw	r4,-8(fp)
  80b538:	000b883a 	mov	r5,zero
  80b53c:	080b3240 	call	80b324 <Read_Sector_Data>
  80b540:	1004c03a 	cmpne	r2,r2,zero
  80b544:	1000021e 	bne	r2,zero,80b550 <mark_cluster+0x98>
        {
            return false;
  80b548:	e03fff15 	stw	zero,-4(fp)
  80b54c:	00000e06 	br	80b588 <mark_cluster+0xd0>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
  80b550:	d1202417 	ldw	r4,-32624(gp)
  80b554:	e0bffb17 	ldw	r2,-20(fp)
  80b558:	10c03fcc 	andi	r3,r2,255
  80b55c:	1805883a 	mov	r2,r3
  80b560:	10c7883a 	add	r3,r2,r3
  80b564:	20800a17 	ldw	r2,40(r4)
  80b568:	1885883a 	add	r2,r3,r2
  80b56c:	1007883a 	mov	r3,r2
  80b570:	e0bffc0f 	ldh	r2,-16(fp)
  80b574:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
  80b578:	00800044 	movi	r2,1
  80b57c:	d0a02515 	stw	r2,-32620(gp)
    return true;
  80b580:	00800044 	movi	r2,1
  80b584:	e0bfff15 	stw	r2,-4(fp)
}
  80b588:	e0bfff17 	ldw	r2,-4(fp)
  80b58c:	dfc00617 	ldw	ra,24(sp)
  80b590:	df000517 	ldw	fp,20(sp)
  80b594:	dec00704 	addi	sp,sp,28
  80b598:	f800283a 	ret

0080b59c <Check_for_Master_Boot_Record>:


bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false.
{
  80b59c:	defff704 	addi	sp,sp,-36
  80b5a0:	dfc00815 	stw	ra,32(sp)
  80b5a4:	df000715 	stw	fp,28(sp)
  80b5a8:	df000704 	addi	fp,sp,28
	bool result = false;
  80b5ac:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
  80b5b0:	0009883a 	mov	r4,zero
  80b5b4:	000b883a 	mov	r5,zero
  80b5b8:	080b3240 	call	80b324 <Read_Sector_Data>
  80b5bc:	1005003a 	cmpeq	r2,r2,zero
  80b5c0:	1000581e 	bne	r2,zero,80b724 <Check_for_Master_Boot_Record+0x188>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
  80b5c4:	d0a02417 	ldw	r2,-32624(gp)
  80b5c8:	10800a17 	ldw	r2,40(r2)
  80b5cc:	10807f84 	addi	r2,r2,510
  80b5d0:	1080002b 	ldhuio	r2,0(r2)
  80b5d4:	10bfffcc 	andi	r2,r2,65535
  80b5d8:	10a0001c 	xori	r2,r2,32768
  80b5dc:	10a00004 	addi	r2,r2,-32768
  80b5e0:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
  80b5e4:	e0bffb17 	ldw	r2,-20(fp)
  80b5e8:	10ffffcc 	andi	r3,r2,65535
  80b5ec:	00aa9554 	movui	r2,43605
  80b5f0:	18804c1e 	bne	r3,r2,80b724 <Check_for_Master_Boot_Record+0x188>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
  80b5f4:	e03ffa15 	stw	zero,-24(fp)
  80b5f8:	e0bffa17 	ldw	r2,-24(fp)
  80b5fc:	10800108 	cmpgei	r2,r2,4
  80b600:	1000481e 	bne	r2,zero,80b724 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
  80b604:	e0bffa17 	ldw	r2,-24(fp)
  80b608:	1004913a 	slli	r2,r2,4
  80b60c:	10806f84 	addi	r2,r2,446
  80b610:	e0bffe15 	stw	r2,-8(fp)
				char type;

				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
  80b614:	d0a02417 	ldw	r2,-32624(gp)
  80b618:	10c00a17 	ldw	r3,40(r2)
  80b61c:	e0bffe17 	ldw	r2,-8(fp)
  80b620:	1885883a 	add	r2,r3,r2
  80b624:	10800104 	addi	r2,r2,4
  80b628:	10800023 	ldbuio	r2,0(r2)
  80b62c:	e0bfff05 	stb	r2,-4(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
  80b630:	e0bfff07 	ldb	r2,-4(fp)
  80b634:	10800060 	cmpeqi	r2,r2,1
  80b638:	10000a1e 	bne	r2,zero,80b664 <Check_for_Master_Boot_Record+0xc8>
  80b63c:	e0bfff07 	ldb	r2,-4(fp)
  80b640:	10800120 	cmpeqi	r2,r2,4
  80b644:	1000071e 	bne	r2,zero,80b664 <Check_for_Master_Boot_Record+0xc8>
  80b648:	e0bfff07 	ldb	r2,-4(fp)
  80b64c:	108001a0 	cmpeqi	r2,r2,6
  80b650:	1000041e 	bne	r2,zero,80b664 <Check_for_Master_Boot_Record+0xc8>
  80b654:	e0bfff07 	ldb	r2,-4(fp)
  80b658:	108003a0 	cmpeqi	r2,r2,14
  80b65c:	1000011e 	bne	r2,zero,80b664 <Check_for_Master_Boot_Record+0xc8>
  80b660:	00002c06 	br	80b714 <Check_for_Master_Boot_Record+0x178>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
  80b664:	d0a02417 	ldw	r2,-32624(gp)
  80b668:	10c00a17 	ldw	r3,40(r2)
  80b66c:	e0bffe17 	ldw	r2,-8(fp)
  80b670:	1885883a 	add	r2,r3,r2
  80b674:	10800284 	addi	r2,r2,10
  80b678:	1080002b 	ldhuio	r2,0(r2)
  80b67c:	10bfffcc 	andi	r2,r2,65535
  80b680:	1008943a 	slli	r4,r2,16
  80b684:	d0a02417 	ldw	r2,-32624(gp)
  80b688:	10c00a17 	ldw	r3,40(r2)
  80b68c:	e0bffe17 	ldw	r2,-8(fp)
  80b690:	1885883a 	add	r2,r3,r2
  80b694:	10800204 	addi	r2,r2,8
  80b698:	1080002b 	ldhuio	r2,0(r2)
  80b69c:	10bfffcc 	andi	r2,r2,65535
  80b6a0:	2084b03a 	or	r2,r4,r2
  80b6a4:	e0bffc15 	stw	r2,-16(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
  80b6a8:	d0a02417 	ldw	r2,-32624(gp)
  80b6ac:	10c00a17 	ldw	r3,40(r2)
  80b6b0:	e0bffe17 	ldw	r2,-8(fp)
  80b6b4:	1885883a 	add	r2,r3,r2
  80b6b8:	10800384 	addi	r2,r2,14
  80b6bc:	1080002b 	ldhuio	r2,0(r2)
  80b6c0:	10bfffcc 	andi	r2,r2,65535
  80b6c4:	1008943a 	slli	r4,r2,16
  80b6c8:	d0a02417 	ldw	r2,-32624(gp)
  80b6cc:	10c00a17 	ldw	r3,40(r2)
  80b6d0:	e0bffe17 	ldw	r2,-8(fp)
  80b6d4:	1885883a 	add	r2,r3,r2
  80b6d8:	10800304 	addi	r2,r2,12
  80b6dc:	1080002b 	ldhuio	r2,0(r2)
  80b6e0:	10bfffcc 	andi	r2,r2,65535
  80b6e4:	2084b03a 	or	r2,r4,r2
  80b6e8:	e0bffd15 	stw	r2,-12(fp)

					// Check if the partition is valid
					if (partition_size > 0)
  80b6ec:	e0bffd17 	ldw	r2,-12(fp)
  80b6f0:	10800050 	cmplti	r2,r2,1
  80b6f4:	1000071e 	bne	r2,zero,80b714 <Check_for_Master_Boot_Record+0x178>
					{
						result = true;
  80b6f8:	00800044 	movi	r2,1
  80b6fc:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
  80b700:	e0bffd17 	ldw	r2,-12(fp)
  80b704:	d0a02315 	stw	r2,-32628(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
  80b708:	e0bffc17 	ldw	r2,-16(fp)
  80b70c:	d0a02215 	stw	r2,-32632(gp)
						break;
  80b710:	00000406 	br	80b724 <Check_for_Master_Boot_Record+0x188>
  80b714:	e0bffa17 	ldw	r2,-24(fp)
  80b718:	10800044 	addi	r2,r2,1
  80b71c:	e0bffa15 	stw	r2,-24(fp)
  80b720:	003fb506 	br	80b5f8 <Check_for_Master_Boot_Record+0x5c>
					}
				}
			}
		}
	}

	return result;
  80b724:	e0bff917 	ldw	r2,-28(fp)
}
  80b728:	dfc00817 	ldw	ra,32(sp)
  80b72c:	df000717 	ldw	fp,28(sp)
  80b730:	dec00904 	addi	sp,sp,36
  80b734:	f800283a 	ret

0080b738 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
  80b738:	defff804 	addi	sp,sp,-32
  80b73c:	dfc00715 	stw	ra,28(sp)
  80b740:	df000615 	stw	fp,24(sp)
  80b744:	df000604 	addi	fp,sp,24
  80b748:	e13ffa15 	stw	r4,-24(fp)
  80b74c:	e17ffb15 	stw	r5,-20(fp)
  80b750:	e1bffc15 	stw	r6,-16(fp)
  80b754:	e1fffd15 	stw	r7,-12(fp)
	bool result = false;
  80b758:	e03ffe15 	stw	zero,-8(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80b75c:	e0bffa17 	ldw	r2,-24(fp)
  80b760:	108007cc 	andi	r2,r2,31
  80b764:	1004c03a 	cmpne	r2,r2,zero
  80b768:	1000791e 	bne	r2,zero,80b950 <Read_File_Record_At_Offset+0x218>
  80b76c:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80b770:	1005003a 	cmpeq	r2,r2,zero
  80b774:	1000761e 	bne	r2,zero,80b950 <Read_File_Record_At_Offset+0x218>
  80b778:	d0a01b17 	ldw	r2,-32660(gp)
  80b77c:	1005003a 	cmpeq	r2,r2,zero
  80b780:	1000731e 	bne	r2,zero,80b950 <Read_File_Record_At_Offset+0x218>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
  80b784:	e03fff15 	stw	zero,-4(fp)
  80b788:	e0bfff17 	ldw	r2,-4(fp)
  80b78c:	10800208 	cmpgei	r2,r2,8
  80b790:	10000f1e 	bne	r2,zero,80b7d0 <Read_File_Record_At_Offset+0x98>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
  80b794:	e0fffb17 	ldw	r3,-20(fp)
  80b798:	e0bfff17 	ldw	r2,-4(fp)
  80b79c:	188b883a 	add	r5,r3,r2
  80b7a0:	d1202417 	ldw	r4,-32624(gp)
  80b7a4:	e0fffa17 	ldw	r3,-24(fp)
  80b7a8:	e0bfff17 	ldw	r2,-4(fp)
  80b7ac:	1887883a 	add	r3,r3,r2
  80b7b0:	20800a17 	ldw	r2,40(r4)
  80b7b4:	1885883a 	add	r2,r3,r2
  80b7b8:	10800023 	ldbuio	r2,0(r2)
  80b7bc:	28800005 	stb	r2,0(r5)
  80b7c0:	e0bfff17 	ldw	r2,-4(fp)
  80b7c4:	10800044 	addi	r2,r2,1
  80b7c8:	e0bfff15 	stw	r2,-4(fp)
  80b7cc:	003fee06 	br	80b788 <Read_File_Record_At_Offset+0x50>
		}
		for (counter = 0; counter < 3; counter++)
  80b7d0:	e03fff15 	stw	zero,-4(fp)
  80b7d4:	e0bfff17 	ldw	r2,-4(fp)
  80b7d8:	108000c8 	cmpgei	r2,r2,3
  80b7dc:	1000111e 	bne	r2,zero,80b824 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
  80b7e0:	e0fffb17 	ldw	r3,-20(fp)
  80b7e4:	e0bfff17 	ldw	r2,-4(fp)
  80b7e8:	1885883a 	add	r2,r3,r2
  80b7ec:	11400204 	addi	r5,r2,8
  80b7f0:	d1202417 	ldw	r4,-32624(gp)
  80b7f4:	e0fffa17 	ldw	r3,-24(fp)
  80b7f8:	e0bfff17 	ldw	r2,-4(fp)
  80b7fc:	1887883a 	add	r3,r3,r2
  80b800:	20800a17 	ldw	r2,40(r4)
  80b804:	1885883a 	add	r2,r3,r2
  80b808:	10800204 	addi	r2,r2,8
  80b80c:	10800023 	ldbuio	r2,0(r2)
  80b810:	28800005 	stb	r2,0(r5)
  80b814:	e0bfff17 	ldw	r2,-4(fp)
  80b818:	10800044 	addi	r2,r2,1
  80b81c:	e0bfff15 	stw	r2,-4(fp)
  80b820:	003fec06 	br	80b7d4 <Read_File_Record_At_Offset+0x9c>
		}
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
  80b824:	e13ffb17 	ldw	r4,-20(fp)
  80b828:	d0a02417 	ldw	r2,-32624(gp)
  80b82c:	10c00a17 	ldw	r3,40(r2)
  80b830:	e0bffa17 	ldw	r2,-24(fp)
  80b834:	1885883a 	add	r2,r3,r2
  80b838:	108002c4 	addi	r2,r2,11
  80b83c:	10800023 	ldbuio	r2,0(r2)
  80b840:	208002c5 	stb	r2,11(r4)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
  80b844:	e13ffb17 	ldw	r4,-20(fp)
  80b848:	d0a02417 	ldw	r2,-32624(gp)
  80b84c:	10c00a17 	ldw	r3,40(r2)
  80b850:	e0bffa17 	ldw	r2,-24(fp)
  80b854:	1885883a 	add	r2,r3,r2
  80b858:	10800384 	addi	r2,r2,14
  80b85c:	1080002b 	ldhuio	r2,0(r2)
  80b860:	2080030d 	sth	r2,12(r4)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
  80b864:	e13ffb17 	ldw	r4,-20(fp)
  80b868:	d0a02417 	ldw	r2,-32624(gp)
  80b86c:	10c00a17 	ldw	r3,40(r2)
  80b870:	e0bffa17 	ldw	r2,-24(fp)
  80b874:	1885883a 	add	r2,r3,r2
  80b878:	10800404 	addi	r2,r2,16
  80b87c:	1080002b 	ldhuio	r2,0(r2)
  80b880:	2080038d 	sth	r2,14(r4)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
  80b884:	e13ffb17 	ldw	r4,-20(fp)
  80b888:	d0a02417 	ldw	r2,-32624(gp)
  80b88c:	10c00a17 	ldw	r3,40(r2)
  80b890:	e0bffa17 	ldw	r2,-24(fp)
  80b894:	1885883a 	add	r2,r3,r2
  80b898:	10800484 	addi	r2,r2,18
  80b89c:	1080002b 	ldhuio	r2,0(r2)
  80b8a0:	2080040d 	sth	r2,16(r4)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
  80b8a4:	e13ffb17 	ldw	r4,-20(fp)
  80b8a8:	d0a02417 	ldw	r2,-32624(gp)
  80b8ac:	10c00a17 	ldw	r3,40(r2)
  80b8b0:	e0bffa17 	ldw	r2,-24(fp)
  80b8b4:	1885883a 	add	r2,r3,r2
  80b8b8:	10800584 	addi	r2,r2,22
  80b8bc:	1080002b 	ldhuio	r2,0(r2)
  80b8c0:	2080048d 	sth	r2,18(r4)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
  80b8c4:	e13ffb17 	ldw	r4,-20(fp)
  80b8c8:	d0a02417 	ldw	r2,-32624(gp)
  80b8cc:	10c00a17 	ldw	r3,40(r2)
  80b8d0:	e0bffa17 	ldw	r2,-24(fp)
  80b8d4:	1885883a 	add	r2,r3,r2
  80b8d8:	10800604 	addi	r2,r2,24
  80b8dc:	1080002b 	ldhuio	r2,0(r2)
  80b8e0:	2080050d 	sth	r2,20(r4)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
  80b8e4:	e13ffb17 	ldw	r4,-20(fp)
  80b8e8:	d0a02417 	ldw	r2,-32624(gp)
  80b8ec:	10c00a17 	ldw	r3,40(r2)
  80b8f0:	e0bffa17 	ldw	r2,-24(fp)
  80b8f4:	1885883a 	add	r2,r3,r2
  80b8f8:	10800684 	addi	r2,r2,26
  80b8fc:	1080002b 	ldhuio	r2,0(r2)
  80b900:	2080058d 	sth	r2,22(r4)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
  80b904:	e13ffb17 	ldw	r4,-20(fp)
  80b908:	d0a02417 	ldw	r2,-32624(gp)
  80b90c:	10c00a17 	ldw	r3,40(r2)
  80b910:	e0bffa17 	ldw	r2,-24(fp)
  80b914:	1885883a 	add	r2,r3,r2
  80b918:	10800704 	addi	r2,r2,28
  80b91c:	10800037 	ldwio	r2,0(r2)
  80b920:	20800615 	stw	r2,24(r4)
		record->file_record_cluster = cluster_index;
  80b924:	e0fffb17 	ldw	r3,-20(fp)
  80b928:	e0bffc17 	ldw	r2,-16(fp)
  80b92c:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
  80b930:	e0fffb17 	ldw	r3,-20(fp)
  80b934:	e0bffd17 	ldw	r2,-12(fp)
  80b938:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
  80b93c:	e0fffb17 	ldw	r3,-20(fp)
  80b940:	e0bffa17 	ldw	r2,-24(fp)
  80b944:	18800c0d 	sth	r2,48(r3)
		result = true;
  80b948:	00800044 	movi	r2,1
  80b94c:	e0bffe15 	stw	r2,-8(fp)
	}
	return result;
  80b950:	e0bffe17 	ldw	r2,-8(fp)
}
  80b954:	dfc00717 	ldw	ra,28(sp)
  80b958:	df000617 	ldw	fp,24(sp)
  80b95c:	dec00804 	addi	sp,sp,32
  80b960:	f800283a 	ret

0080b964 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
  80b964:	defff904 	addi	sp,sp,-28
  80b968:	dfc00615 	stw	ra,24(sp)
  80b96c:	df000515 	stw	fp,20(sp)
  80b970:	df000504 	addi	fp,sp,20
  80b974:	e13ffb15 	stw	r4,-20(fp)
  80b978:	e17ffc15 	stw	r5,-16(fp)
    bool result = false;
  80b97c:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80b980:	e0bffb17 	ldw	r2,-20(fp)
  80b984:	108007cc 	andi	r2,r2,31
  80b988:	1004c03a 	cmpne	r2,r2,zero
  80b98c:	1000891e 	bne	r2,zero,80bbb4 <Write_File_Record_At_Offset+0x250>
  80b990:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80b994:	1005003a 	cmpeq	r2,r2,zero
  80b998:	1000861e 	bne	r2,zero,80bbb4 <Write_File_Record_At_Offset+0x250>
  80b99c:	d0a01b17 	ldw	r2,-32660(gp)
  80b9a0:	1005003a 	cmpeq	r2,r2,zero
  80b9a4:	1000831e 	bne	r2,zero,80bbb4 <Write_File_Record_At_Offset+0x250>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
  80b9a8:	e03ffe15 	stw	zero,-8(fp)
  80b9ac:	e0bffe17 	ldw	r2,-8(fp)
  80b9b0:	10800208 	cmpgei	r2,r2,8
  80b9b4:	10001d1e 	bne	r2,zero,80ba2c <Write_File_Record_At_Offset+0xc8>
        {
            short int two_chars = (short int) record->name[counter+1];
  80b9b8:	e0fffc17 	ldw	r3,-16(fp)
  80b9bc:	e0bffe17 	ldw	r2,-8(fp)
  80b9c0:	1885883a 	add	r2,r3,r2
  80b9c4:	10800044 	addi	r2,r2,1
  80b9c8:	10800003 	ldbu	r2,0(r2)
  80b9cc:	e0bfff0d 	sth	r2,-4(fp)
            two_chars = two_chars << 8;
  80b9d0:	e0bfff0f 	ldh	r2,-4(fp)
  80b9d4:	1004923a 	slli	r2,r2,8
  80b9d8:	e0bfff0d 	sth	r2,-4(fp)
            two_chars = two_chars | record->name[counter];
  80b9dc:	e0fffc17 	ldw	r3,-16(fp)
  80b9e0:	e0bffe17 	ldw	r2,-8(fp)
  80b9e4:	1885883a 	add	r2,r3,r2
  80b9e8:	10c00003 	ldbu	r3,0(r2)
  80b9ec:	e0bfff0b 	ldhu	r2,-4(fp)
  80b9f0:	10c4b03a 	or	r2,r2,r3
  80b9f4:	e0bfff0d 	sth	r2,-4(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
  80b9f8:	d1202417 	ldw	r4,-32624(gp)
  80b9fc:	e0fffb17 	ldw	r3,-20(fp)
  80ba00:	e0bffe17 	ldw	r2,-8(fp)
  80ba04:	1887883a 	add	r3,r3,r2
  80ba08:	20800a17 	ldw	r2,40(r4)
  80ba0c:	1885883a 	add	r2,r3,r2
  80ba10:	1007883a 	mov	r3,r2
  80ba14:	e0bfff0f 	ldh	r2,-4(fp)
  80ba18:	1880002d 	sthio	r2,0(r3)
  80ba1c:	e0bffe17 	ldw	r2,-8(fp)
  80ba20:	10800084 	addi	r2,r2,2
  80ba24:	e0bffe15 	stw	r2,-8(fp)
  80ba28:	003fe006 	br	80b9ac <Write_File_Record_At_Offset+0x48>
        }
        for (counter = 0; counter < 3; counter++)
  80ba2c:	e03ffe15 	stw	zero,-8(fp)
  80ba30:	e0bffe17 	ldw	r2,-8(fp)
  80ba34:	108000c8 	cmpgei	r2,r2,3
  80ba38:	1000121e 	bne	r2,zero,80ba84 <Write_File_Record_At_Offset+0x120>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
  80ba3c:	d1202417 	ldw	r4,-32624(gp)
  80ba40:	e0fffb17 	ldw	r3,-20(fp)
  80ba44:	e0bffe17 	ldw	r2,-8(fp)
  80ba48:	1887883a 	add	r3,r3,r2
  80ba4c:	20800a17 	ldw	r2,40(r4)
  80ba50:	1885883a 	add	r2,r3,r2
  80ba54:	10800204 	addi	r2,r2,8
  80ba58:	1009883a 	mov	r4,r2
  80ba5c:	e0fffc17 	ldw	r3,-16(fp)
  80ba60:	e0bffe17 	ldw	r2,-8(fp)
  80ba64:	1885883a 	add	r2,r3,r2
  80ba68:	10800204 	addi	r2,r2,8
  80ba6c:	10800003 	ldbu	r2,0(r2)
  80ba70:	20800025 	stbio	r2,0(r4)
  80ba74:	e0bffe17 	ldw	r2,-8(fp)
  80ba78:	10800044 	addi	r2,r2,1
  80ba7c:	e0bffe15 	stw	r2,-8(fp)
  80ba80:	003feb06 	br	80ba30 <Write_File_Record_At_Offset+0xcc>
        }
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
  80ba84:	d0a02417 	ldw	r2,-32624(gp)
  80ba88:	10c00a17 	ldw	r3,40(r2)
  80ba8c:	e0bffb17 	ldw	r2,-20(fp)
  80ba90:	1885883a 	add	r2,r3,r2
  80ba94:	108002c4 	addi	r2,r2,11
  80ba98:	1007883a 	mov	r3,r2
  80ba9c:	e0bffc17 	ldw	r2,-16(fp)
  80baa0:	108002c3 	ldbu	r2,11(r2)
  80baa4:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
  80baa8:	d0a02417 	ldw	r2,-32624(gp)
  80baac:	10c00a17 	ldw	r3,40(r2)
  80bab0:	e0bffb17 	ldw	r2,-20(fp)
  80bab4:	1885883a 	add	r2,r3,r2
  80bab8:	10800384 	addi	r2,r2,14
  80babc:	1007883a 	mov	r3,r2
  80bac0:	e0bffc17 	ldw	r2,-16(fp)
  80bac4:	1080030b 	ldhu	r2,12(r2)
  80bac8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
  80bacc:	d0a02417 	ldw	r2,-32624(gp)
  80bad0:	10c00a17 	ldw	r3,40(r2)
  80bad4:	e0bffb17 	ldw	r2,-20(fp)
  80bad8:	1885883a 	add	r2,r3,r2
  80badc:	10800404 	addi	r2,r2,16
  80bae0:	1007883a 	mov	r3,r2
  80bae4:	e0bffc17 	ldw	r2,-16(fp)
  80bae8:	1080038b 	ldhu	r2,14(r2)
  80baec:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
  80baf0:	d0a02417 	ldw	r2,-32624(gp)
  80baf4:	10c00a17 	ldw	r3,40(r2)
  80baf8:	e0bffb17 	ldw	r2,-20(fp)
  80bafc:	1885883a 	add	r2,r3,r2
  80bb00:	10800484 	addi	r2,r2,18
  80bb04:	1007883a 	mov	r3,r2
  80bb08:	e0bffc17 	ldw	r2,-16(fp)
  80bb0c:	1080040b 	ldhu	r2,16(r2)
  80bb10:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
  80bb14:	d0a02417 	ldw	r2,-32624(gp)
  80bb18:	10c00a17 	ldw	r3,40(r2)
  80bb1c:	e0bffb17 	ldw	r2,-20(fp)
  80bb20:	1885883a 	add	r2,r3,r2
  80bb24:	10800584 	addi	r2,r2,22
  80bb28:	1007883a 	mov	r3,r2
  80bb2c:	e0bffc17 	ldw	r2,-16(fp)
  80bb30:	1080048b 	ldhu	r2,18(r2)
  80bb34:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
  80bb38:	d0a02417 	ldw	r2,-32624(gp)
  80bb3c:	10c00a17 	ldw	r3,40(r2)
  80bb40:	e0bffb17 	ldw	r2,-20(fp)
  80bb44:	1885883a 	add	r2,r3,r2
  80bb48:	10800604 	addi	r2,r2,24
  80bb4c:	1007883a 	mov	r3,r2
  80bb50:	e0bffc17 	ldw	r2,-16(fp)
  80bb54:	1080050b 	ldhu	r2,20(r2)
  80bb58:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
  80bb5c:	d0a02417 	ldw	r2,-32624(gp)
  80bb60:	10c00a17 	ldw	r3,40(r2)
  80bb64:	e0bffb17 	ldw	r2,-20(fp)
  80bb68:	1885883a 	add	r2,r3,r2
  80bb6c:	10800684 	addi	r2,r2,26
  80bb70:	1007883a 	mov	r3,r2
  80bb74:	e0bffc17 	ldw	r2,-16(fp)
  80bb78:	1080058b 	ldhu	r2,22(r2)
  80bb7c:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
  80bb80:	d0a02417 	ldw	r2,-32624(gp)
  80bb84:	10c00a17 	ldw	r3,40(r2)
  80bb88:	e0bffb17 	ldw	r2,-20(fp)
  80bb8c:	1885883a 	add	r2,r3,r2
  80bb90:	10800704 	addi	r2,r2,28
  80bb94:	1007883a 	mov	r3,r2
  80bb98:	e0bffc17 	ldw	r2,-16(fp)
  80bb9c:	10800617 	ldw	r2,24(r2)
  80bba0:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;
  80bba4:	00800044 	movi	r2,1
  80bba8:	d0a02515 	stw	r2,-32620(gp)
        result = true;
  80bbac:	00800044 	movi	r2,1
  80bbb0:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
  80bbb4:	e0bffd17 	ldw	r2,-12(fp)
}
  80bbb8:	dfc00617 	ldw	ra,24(sp)
  80bbbc:	df000517 	ldw	fp,20(sp)
  80bbc0:	dec00704 	addi	sp,sp,28
  80bbc4:	f800283a 	ret

0080bbc8 <Check_for_DOS_FAT>:


bool Check_for_DOS_FAT(int FAT_partition_start_sector)
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0.
{
  80bbc8:	defff704 	addi	sp,sp,-36
  80bbcc:	dfc00815 	stw	ra,32(sp)
  80bbd0:	df000715 	stw	fp,28(sp)
  80bbd4:	dc000615 	stw	r16,24(sp)
  80bbd8:	dc400515 	stw	r17,20(sp)
  80bbdc:	df000704 	addi	fp,sp,28
  80bbe0:	e13ff915 	stw	r4,-28(fp)
	bool result = false;
  80bbe4:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
  80bbe8:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
  80bbec:	0009883a 	mov	r4,zero
  80bbf0:	e17ff917 	ldw	r5,-28(fp)
  80bbf4:	080b3240 	call	80b324 <Read_Sector_Data>
  80bbf8:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
  80bbfc:	d0a02417 	ldw	r2,-32624(gp)
  80bc00:	10800a17 	ldw	r2,40(r2)
  80bc04:	10807f84 	addi	r2,r2,510
  80bc08:	1080002b 	ldhuio	r2,0(r2)
  80bc0c:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
  80bc10:	e0bffc0f 	ldh	r2,-16(fp)
  80bc14:	10ffffcc 	andi	r3,r2,65535
  80bc18:	00aa9554 	movui	r2,43605
  80bc1c:	1881531e 	bne	r3,r2,80c16c <Check_for_DOS_FAT+0x5a4>
  80bc20:	e0bffa17 	ldw	r2,-24(fp)
  80bc24:	1005003a 	cmpeq	r2,r2,zero
  80bc28:	1001501e 	bne	r2,zero,80c16c <Check_for_DOS_FAT+0x5a4>
	{
		int num_clusters = 0;
  80bc2c:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
  80bc30:	00c02074 	movhi	r3,129
  80bc34:	18c86204 	addi	r3,r3,8584
  80bc38:	d0a02417 	ldw	r2,-32624(gp)
  80bc3c:	10800a17 	ldw	r2,40(r2)
  80bc40:	10800023 	ldbuio	r2,0(r2)
  80bc44:	18800005 	stb	r2,0(r3)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
  80bc48:	00c02074 	movhi	r3,129
  80bc4c:	18c86204 	addi	r3,r3,8584
  80bc50:	d0a02417 	ldw	r2,-32624(gp)
  80bc54:	10800a17 	ldw	r2,40(r2)
  80bc58:	10800044 	addi	r2,r2,1
  80bc5c:	10800023 	ldbuio	r2,0(r2)
  80bc60:	18800045 	stb	r2,1(r3)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
  80bc64:	00c02074 	movhi	r3,129
  80bc68:	18c86204 	addi	r3,r3,8584
  80bc6c:	d0a02417 	ldw	r2,-32624(gp)
  80bc70:	10800a17 	ldw	r2,40(r2)
  80bc74:	10800084 	addi	r2,r2,2
  80bc78:	10800023 	ldbuio	r2,0(r2)
  80bc7c:	18800085 	stb	r2,2(r3)
		for (counter = 0; counter < 8; counter++)
  80bc80:	e03ffb15 	stw	zero,-20(fp)
  80bc84:	e0bffb17 	ldw	r2,-20(fp)
  80bc88:	10800208 	cmpgei	r2,r2,8
  80bc8c:	10000f1e 	bne	r2,zero,80bccc <Check_for_DOS_FAT+0x104>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
  80bc90:	00c02074 	movhi	r3,129
  80bc94:	18c86204 	addi	r3,r3,8584
  80bc98:	e0bffb17 	ldw	r2,-20(fp)
  80bc9c:	1889883a 	add	r4,r3,r2
  80bca0:	d0a02417 	ldw	r2,-32624(gp)
  80bca4:	10c00a17 	ldw	r3,40(r2)
  80bca8:	e0bffb17 	ldw	r2,-20(fp)
  80bcac:	1885883a 	add	r2,r3,r2
  80bcb0:	108000c4 	addi	r2,r2,3
  80bcb4:	10800023 	ldbuio	r2,0(r2)
  80bcb8:	208000c5 	stb	r2,3(r4)
  80bcbc:	e0bffb17 	ldw	r2,-20(fp)
  80bcc0:	10800044 	addi	r2,r2,1
  80bcc4:	e0bffb15 	stw	r2,-20(fp)
  80bcc8:	003fee06 	br	80bc84 <Check_for_DOS_FAT+0xbc>
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
  80bccc:	01402074 	movhi	r5,129
  80bcd0:	29486204 	addi	r5,r5,8584
  80bcd4:	d0a02417 	ldw	r2,-32624(gp)
  80bcd8:	10800a17 	ldw	r2,40(r2)
  80bcdc:	10800304 	addi	r2,r2,12
  80bce0:	10800023 	ldbuio	r2,0(r2)
  80bce4:	10803fcc 	andi	r2,r2,255
  80bce8:	1008923a 	slli	r4,r2,8
  80bcec:	d0a02417 	ldw	r2,-32624(gp)
  80bcf0:	10800a17 	ldw	r2,40(r2)
  80bcf4:	108002c4 	addi	r2,r2,11
  80bcf8:	10800023 	ldbuio	r2,0(r2)
  80bcfc:	10c03fcc 	andi	r3,r2,255
  80bd00:	18c0201c 	xori	r3,r3,128
  80bd04:	18ffe004 	addi	r3,r3,-128
  80bd08:	2005883a 	mov	r2,r4
  80bd0c:	10c4b03a 	or	r2,r2,r3
  80bd10:	2880030d 	sth	r2,12(r5)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
  80bd14:	00c02074 	movhi	r3,129
  80bd18:	18c86204 	addi	r3,r3,8584
  80bd1c:	d0a02417 	ldw	r2,-32624(gp)
  80bd20:	10800a17 	ldw	r2,40(r2)
  80bd24:	10800344 	addi	r2,r2,13
  80bd28:	10800023 	ldbuio	r2,0(r2)
  80bd2c:	18800385 	stb	r2,14(r3)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
  80bd30:	00c02074 	movhi	r3,129
  80bd34:	18c86204 	addi	r3,r3,8584
  80bd38:	d0a02417 	ldw	r2,-32624(gp)
  80bd3c:	10800a17 	ldw	r2,40(r2)
  80bd40:	10800384 	addi	r2,r2,14
  80bd44:	1080002b 	ldhuio	r2,0(r2)
  80bd48:	1880040d 	sth	r2,16(r3)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
  80bd4c:	00c02074 	movhi	r3,129
  80bd50:	18c86204 	addi	r3,r3,8584
  80bd54:	d0a02417 	ldw	r2,-32624(gp)
  80bd58:	10800a17 	ldw	r2,40(r2)
  80bd5c:	10800404 	addi	r2,r2,16
  80bd60:	10800023 	ldbuio	r2,0(r2)
  80bd64:	18800485 	stb	r2,18(r3)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
  80bd68:	01402074 	movhi	r5,129
  80bd6c:	29486204 	addi	r5,r5,8584
  80bd70:	d0a02417 	ldw	r2,-32624(gp)
  80bd74:	10800a17 	ldw	r2,40(r2)
  80bd78:	10800484 	addi	r2,r2,18
  80bd7c:	10800023 	ldbuio	r2,0(r2)
  80bd80:	10803fcc 	andi	r2,r2,255
  80bd84:	1008923a 	slli	r4,r2,8
  80bd88:	d0a02417 	ldw	r2,-32624(gp)
  80bd8c:	10800a17 	ldw	r2,40(r2)
  80bd90:	10800444 	addi	r2,r2,17
  80bd94:	10800023 	ldbuio	r2,0(r2)
  80bd98:	10c03fcc 	andi	r3,r2,255
  80bd9c:	2005883a 	mov	r2,r4
  80bda0:	10c4b03a 	or	r2,r2,r3
  80bda4:	2880050d 	sth	r2,20(r5)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
  80bda8:	01402074 	movhi	r5,129
  80bdac:	29486204 	addi	r5,r5,8584
  80bdb0:	d0a02417 	ldw	r2,-32624(gp)
  80bdb4:	10800a17 	ldw	r2,40(r2)
  80bdb8:	10800504 	addi	r2,r2,20
  80bdbc:	10800023 	ldbuio	r2,0(r2)
  80bdc0:	10803fcc 	andi	r2,r2,255
  80bdc4:	1008923a 	slli	r4,r2,8
  80bdc8:	d0a02417 	ldw	r2,-32624(gp)
  80bdcc:	10800a17 	ldw	r2,40(r2)
  80bdd0:	108004c4 	addi	r2,r2,19
  80bdd4:	10800023 	ldbuio	r2,0(r2)
  80bdd8:	10c03fcc 	andi	r3,r2,255
  80bddc:	2005883a 	mov	r2,r4
  80bde0:	10c4b03a 	or	r2,r2,r3
  80bde4:	2880058d 	sth	r2,22(r5)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
  80bde8:	00c02074 	movhi	r3,129
  80bdec:	18c86204 	addi	r3,r3,8584
  80bdf0:	d0a02417 	ldw	r2,-32624(gp)
  80bdf4:	10800a17 	ldw	r2,40(r2)
  80bdf8:	10800544 	addi	r2,r2,21
  80bdfc:	10800023 	ldbuio	r2,0(r2)
  80be00:	18800605 	stb	r2,24(r3)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
  80be04:	00c02074 	movhi	r3,129
  80be08:	18c86204 	addi	r3,r3,8584
  80be0c:	d0a02417 	ldw	r2,-32624(gp)
  80be10:	10800a17 	ldw	r2,40(r2)
  80be14:	10800584 	addi	r2,r2,22
  80be18:	1080002b 	ldhuio	r2,0(r2)
  80be1c:	1880068d 	sth	r2,26(r3)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
  80be20:	00c02074 	movhi	r3,129
  80be24:	18c86204 	addi	r3,r3,8584
  80be28:	d0a02417 	ldw	r2,-32624(gp)
  80be2c:	10800a17 	ldw	r2,40(r2)
  80be30:	10800604 	addi	r2,r2,24
  80be34:	1080002b 	ldhuio	r2,0(r2)
  80be38:	1880070d 	sth	r2,28(r3)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
  80be3c:	00c02074 	movhi	r3,129
  80be40:	18c86204 	addi	r3,r3,8584
  80be44:	d0a02417 	ldw	r2,-32624(gp)
  80be48:	10800a17 	ldw	r2,40(r2)
  80be4c:	10800684 	addi	r2,r2,26
  80be50:	1080002b 	ldhuio	r2,0(r2)
  80be54:	1880078d 	sth	r2,30(r3)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
  80be58:	00c02074 	movhi	r3,129
  80be5c:	18c86204 	addi	r3,r3,8584
  80be60:	d0a02417 	ldw	r2,-32624(gp)
  80be64:	10800a17 	ldw	r2,40(r2)
  80be68:	10800704 	addi	r2,r2,28
  80be6c:	10800037 	ldwio	r2,0(r2)
  80be70:	18800815 	stw	r2,32(r3)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
  80be74:	00c02074 	movhi	r3,129
  80be78:	18c86204 	addi	r3,r3,8584
  80be7c:	d0a02417 	ldw	r2,-32624(gp)
  80be80:	10800a17 	ldw	r2,40(r2)
  80be84:	10800804 	addi	r2,r2,32
  80be88:	10800037 	ldwio	r2,0(r2)
  80be8c:	18800915 	stw	r2,36(r3)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
  80be90:	00c02074 	movhi	r3,129
  80be94:	18c86204 	addi	r3,r3,8584
  80be98:	d0a02417 	ldw	r2,-32624(gp)
  80be9c:	10800a17 	ldw	r2,40(r2)
  80bea0:	10800904 	addi	r2,r2,36
  80bea4:	10800023 	ldbuio	r2,0(r2)
  80bea8:	18800a05 	stb	r2,40(r3)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
  80beac:	00c02074 	movhi	r3,129
  80beb0:	18c86204 	addi	r3,r3,8584
  80beb4:	d0a02417 	ldw	r2,-32624(gp)
  80beb8:	10800a17 	ldw	r2,40(r2)
  80bebc:	10800944 	addi	r2,r2,37
  80bec0:	10800023 	ldbuio	r2,0(r2)
  80bec4:	18800a45 	stb	r2,41(r3)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
  80bec8:	00c02074 	movhi	r3,129
  80becc:	18c86204 	addi	r3,r3,8584
  80bed0:	d0a02417 	ldw	r2,-32624(gp)
  80bed4:	10800a17 	ldw	r2,40(r2)
  80bed8:	10800984 	addi	r2,r2,38
  80bedc:	10800023 	ldbuio	r2,0(r2)
  80bee0:	18800a85 	stb	r2,42(r3)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
  80bee4:	00c02074 	movhi	r3,129
  80bee8:	18c86204 	addi	r3,r3,8584
  80beec:	00802074 	movhi	r2,129
  80bef0:	10886204 	addi	r2,r2,8584
  80bef4:	1080040b 	ldhu	r2,16(r2)
  80bef8:	18801115 	stw	r2,68(r3)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80befc:	01402074 	movhi	r5,129
  80bf00:	29486204 	addi	r5,r5,8584
  80bf04:	01002074 	movhi	r4,129
  80bf08:	21086204 	addi	r4,r4,8584
  80bf0c:	00802074 	movhi	r2,129
  80bf10:	10886204 	addi	r2,r2,8584
  80bf14:	10c0068b 	ldhu	r3,26(r2)
  80bf18:	20801117 	ldw	r2,68(r4)
  80bf1c:	10c5883a 	add	r2,r2,r3
  80bf20:	28801215 	stw	r2,72(r5)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
  80bf24:	01402074 	movhi	r5,129
  80bf28:	29486204 	addi	r5,r5,8584
  80bf2c:	01002074 	movhi	r4,129
  80bf30:	21086204 	addi	r4,r4,8584
  80bf34:	00802074 	movhi	r2,129
  80bf38:	10886204 	addi	r2,r2,8584
  80bf3c:	10c0068b 	ldhu	r3,26(r2)
  80bf40:	20801217 	ldw	r2,72(r4)
  80bf44:	10c5883a 	add	r2,r2,r3
  80bf48:	28801315 	stw	r2,76(r5)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);
  80bf4c:	04402074 	movhi	r17,129
  80bf50:	8c486204 	addi	r17,r17,8584
  80bf54:	04002074 	movhi	r16,129
  80bf58:	84086204 	addi	r16,r16,8584
  80bf5c:	00802074 	movhi	r2,129
  80bf60:	10886204 	addi	r2,r2,8584
  80bf64:	1080050b 	ldhu	r2,20(r2)
  80bf68:	1008917a 	slli	r4,r2,5
  80bf6c:	00802074 	movhi	r2,129
  80bf70:	10886204 	addi	r2,r2,8584
  80bf74:	1140030b 	ldhu	r5,12(r2)
  80bf78:	08006300 	call	800630 <__divsi3>
  80bf7c:	1007883a 	mov	r3,r2
  80bf80:	80801317 	ldw	r2,76(r16)
  80bf84:	10c5883a 	add	r2,r2,r3
  80bf88:	88801415 	stw	r2,80(r17)

		if (boot_sector_data.number_of_sectors_in_partition > 0)
  80bf8c:	00802074 	movhi	r2,129
  80bf90:	10886204 	addi	r2,r2,8584
  80bf94:	1080058b 	ldhu	r2,22(r2)
  80bf98:	1005003a 	cmpeq	r2,r2,zero
  80bf9c:	1000091e 	bne	r2,zero,80bfc4 <Check_for_DOS_FAT+0x3fc>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
  80bfa0:	00802074 	movhi	r2,129
  80bfa4:	10886204 	addi	r2,r2,8584
  80bfa8:	1100058b 	ldhu	r4,22(r2)
  80bfac:	00802074 	movhi	r2,129
  80bfb0:	10886204 	addi	r2,r2,8584
  80bfb4:	11400383 	ldbu	r5,14(r2)
  80bfb8:	08006300 	call	800630 <__divsi3>
  80bfbc:	e0bffd15 	stw	r2,-12(fp)
  80bfc0:	00000806 	br	80bfe4 <Check_for_DOS_FAT+0x41c>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
  80bfc4:	00c02074 	movhi	r3,129
  80bfc8:	18c86204 	addi	r3,r3,8584
  80bfcc:	00802074 	movhi	r2,129
  80bfd0:	10886204 	addi	r2,r2,8584
  80bfd4:	11400383 	ldbu	r5,14(r2)
  80bfd8:	19000917 	ldw	r4,36(r3)
  80bfdc:	08006cc0 	call	8006cc <__udivsi3>
  80bfe0:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
  80bfe4:	e0bffd17 	ldw	r2,-12(fp)
  80bfe8:	1083fdc8 	cmpgei	r2,r2,4087
  80bfec:	1000051e 	bne	r2,zero,80c004 <Check_for_DOS_FAT+0x43c>
		{
			boot_sector_data.bits_for_cluster_index = 12;
  80bff0:	00c02074 	movhi	r3,129
  80bff4:	18c86204 	addi	r3,r3,8584
  80bff8:	00800304 	movi	r2,12
  80bffc:	18801085 	stb	r2,66(r3)
  80c000:	00000c06 	br	80c034 <Check_for_DOS_FAT+0x46c>
		}
		else if (num_clusters <= 65517)
  80c004:	e0fffd17 	ldw	r3,-12(fp)
  80c008:	00bffb54 	movui	r2,65517
  80c00c:	10c00516 	blt	r2,r3,80c024 <Check_for_DOS_FAT+0x45c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
  80c010:	00c02074 	movhi	r3,129
  80c014:	18c86204 	addi	r3,r3,8584
  80c018:	00800404 	movi	r2,16
  80c01c:	18801085 	stb	r2,66(r3)
  80c020:	00000406 	br	80c034 <Check_for_DOS_FAT+0x46c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
  80c024:	00c02074 	movhi	r3,129
  80c028:	18c86204 	addi	r3,r3,8584
  80c02c:	00800804 	movi	r2,32
  80c030:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++)
  80c034:	e03ffb15 	stw	zero,-20(fp)
  80c038:	e0bffb17 	ldw	r2,-20(fp)
  80c03c:	10800108 	cmpgei	r2,r2,4
  80c040:	1000101e 	bne	r2,zero,80c084 <Check_for_DOS_FAT+0x4bc>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
  80c044:	00c02074 	movhi	r3,129
  80c048:	18c86204 	addi	r3,r3,8584
  80c04c:	e0bffb17 	ldw	r2,-20(fp)
  80c050:	1885883a 	add	r2,r3,r2
  80c054:	11000a04 	addi	r4,r2,40
  80c058:	d0a02417 	ldw	r2,-32624(gp)
  80c05c:	10c00a17 	ldw	r3,40(r2)
  80c060:	e0bffb17 	ldw	r2,-20(fp)
  80c064:	1885883a 	add	r2,r3,r2
  80c068:	108009c4 	addi	r2,r2,39
  80c06c:	10800023 	ldbuio	r2,0(r2)
  80c070:	208000c5 	stb	r2,3(r4)
  80c074:	e0bffb17 	ldw	r2,-20(fp)
  80c078:	10800044 	addi	r2,r2,1
  80c07c:	e0bffb15 	stw	r2,-20(fp)
  80c080:	003fed06 	br	80c038 <Check_for_DOS_FAT+0x470>
		}
		for (counter = 0; counter < 11; counter++)
  80c084:	e03ffb15 	stw	zero,-20(fp)
  80c088:	e0bffb17 	ldw	r2,-20(fp)
  80c08c:	108002c8 	cmpgei	r2,r2,11
  80c090:	1000101e 	bne	r2,zero,80c0d4 <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
  80c094:	00c02074 	movhi	r3,129
  80c098:	18c86204 	addi	r3,r3,8584
  80c09c:	e0bffb17 	ldw	r2,-20(fp)
  80c0a0:	1885883a 	add	r2,r3,r2
  80c0a4:	11000b04 	addi	r4,r2,44
  80c0a8:	d0a02417 	ldw	r2,-32624(gp)
  80c0ac:	10c00a17 	ldw	r3,40(r2)
  80c0b0:	e0bffb17 	ldw	r2,-20(fp)
  80c0b4:	1885883a 	add	r2,r3,r2
  80c0b8:	10800ac4 	addi	r2,r2,43
  80c0bc:	10800023 	ldbuio	r2,0(r2)
  80c0c0:	208000c5 	stb	r2,3(r4)
  80c0c4:	e0bffb17 	ldw	r2,-20(fp)
  80c0c8:	10800044 	addi	r2,r2,1
  80c0cc:	e0bffb15 	stw	r2,-20(fp)
  80c0d0:	003fed06 	br	80c088 <Check_for_DOS_FAT+0x4c0>
		}
		for (counter = 0; counter < 8; counter++)
  80c0d4:	e03ffb15 	stw	zero,-20(fp)
  80c0d8:	e0bffb17 	ldw	r2,-20(fp)
  80c0dc:	10800208 	cmpgei	r2,r2,8
  80c0e0:	1000101e 	bne	r2,zero,80c124 <Check_for_DOS_FAT+0x55c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
  80c0e4:	00c02074 	movhi	r3,129
  80c0e8:	18c86204 	addi	r3,r3,8584
  80c0ec:	e0bffb17 	ldw	r2,-20(fp)
  80c0f0:	1885883a 	add	r2,r3,r2
  80c0f4:	11000e04 	addi	r4,r2,56
  80c0f8:	d0a02417 	ldw	r2,-32624(gp)
  80c0fc:	10c00a17 	ldw	r3,40(r2)
  80c100:	e0bffb17 	ldw	r2,-20(fp)
  80c104:	1885883a 	add	r2,r3,r2
  80c108:	10800d84 	addi	r2,r2,54
  80c10c:	10800023 	ldbuio	r2,0(r2)
  80c110:	20800085 	stb	r2,2(r4)
  80c114:	e0bffb17 	ldw	r2,-20(fp)
  80c118:	10800044 	addi	r2,r2,1
  80c11c:	e0bffb15 	stw	r2,-20(fp)
  80c120:	003fed06 	br	80c0d8 <Check_for_DOS_FAT+0x510>
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
  80c124:	e03ffb15 	stw	zero,-20(fp)
  80c128:	e0bffb17 	ldw	r2,-20(fp)
  80c12c:	10800508 	cmpgei	r2,r2,20
  80c130:	10000b1e 	bne	r2,zero,80c160 <Check_for_DOS_FAT+0x598>
		{
			active_files[counter].in_use = false;
  80c134:	00c02074 	movhi	r3,129
  80c138:	18c87704 	addi	r3,r3,8668
  80c13c:	e0bffb17 	ldw	r2,-20(fp)
  80c140:	100491ba 	slli	r2,r2,6
  80c144:	10c5883a 	add	r2,r2,r3
  80c148:	10800f04 	addi	r2,r2,60
  80c14c:	10000015 	stw	zero,0(r2)
  80c150:	e0bffb17 	ldw	r2,-20(fp)
  80c154:	10800044 	addi	r2,r2,1
  80c158:	e0bffb15 	stw	r2,-20(fp)
  80c15c:	003ff206 	br	80c128 <Check_for_DOS_FAT+0x560>
		}
		result = true;
  80c160:	00800044 	movi	r2,1
  80c164:	e0bffa15 	stw	r2,-24(fp)
  80c168:	00000106 	br	80c170 <Check_for_DOS_FAT+0x5a8>
	}
    else
    {
        result = false;
  80c16c:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
  80c170:	e0bffa17 	ldw	r2,-24(fp)
}
  80c174:	dfc00817 	ldw	ra,32(sp)
  80c178:	df000717 	ldw	fp,28(sp)
  80c17c:	dc000617 	ldw	r16,24(sp)
  80c180:	dc400517 	ldw	r17,20(sp)
  80c184:	dec00904 	addi	sp,sp,36
  80c188:	f800283a 	ret

0080c18c <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
  80c18c:	defffc04 	addi	sp,sp,-16
  80c190:	dfc00315 	stw	ra,12(sp)
  80c194:	df000215 	stw	fp,8(sp)
  80c198:	df000204 	addi	fp,sp,8
	bool result = false;
  80c19c:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
  80c1a0:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80c1a4:	1005003a 	cmpeq	r2,r2,zero
  80c1a8:	10002b1e 	bne	r2,zero,80c258 <Look_for_FAT16+0xcc>
	{
		short int csd_file_format = *CSD_register_w0;
  80c1ac:	d0a01e17 	ldw	r2,-32648(gp)
  80c1b0:	1080000b 	ldhu	r2,0(r2)
  80c1b4:	e0bfff0d 	sth	r2,-4(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
  80c1b8:	d0202215 	stw	zero,-32632(gp)
		fat_partition_size_in_512_byte_sectors = 0;
  80c1bc:	d0202315 	stw	zero,-32628(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
  80c1c0:	e0bfff0f 	ldh	r2,-4(fp)
  80c1c4:	1004803a 	cmplt	r2,r2,zero
  80c1c8:	1000231e 	bne	r2,zero,80c258 <Look_for_FAT16+0xcc>
  80c1cc:	e0bfff0b 	ldhu	r2,-4(fp)
  80c1d0:	1083000c 	andi	r2,r2,3072
  80c1d4:	10830020 	cmpeqi	r2,r2,3072
  80c1d8:	10001f1e 	bne	r2,zero,80c258 <Look_for_FAT16+0xcc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
  80c1dc:	e0bfff0b 	ldhu	r2,-4(fp)
  80c1e0:	1083000c 	andi	r2,r2,3072
  80c1e4:	10810018 	cmpnei	r2,r2,1024
  80c1e8:	1000031e 	bne	r2,zero,80c1f8 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
  80c1ec:	0009883a 	mov	r4,zero
  80c1f0:	080bbc80 	call	80bbc8 <Check_for_DOS_FAT>
  80c1f4:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
  80c1f8:	e0bfff0b 	ldhu	r2,-4(fp)
  80c1fc:	1083000c 	andi	r2,r2,3072
  80c200:	1004c03a 	cmpne	r2,r2,zero
  80c204:	1000061e 	bne	r2,zero,80c220 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
  80c208:	080b59c0 	call	80b59c <Check_for_Master_Boot_Record>
  80c20c:	1005003a 	cmpeq	r2,r2,zero
  80c210:	1000031e 	bne	r2,zero,80c220 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
  80c214:	d1202217 	ldw	r4,-32632(gp)
  80c218:	080bbc80 	call	80bbc8 <Check_for_DOS_FAT>
  80c21c:	e0bffe15 	stw	r2,-8(fp)
				}
			}
			if (result == true)
  80c220:	e0bffe17 	ldw	r2,-8(fp)
  80c224:	10800058 	cmpnei	r2,r2,1
  80c228:	10000b1e 	bne	r2,zero,80c258 <Look_for_FAT16+0xcc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
  80c22c:	00802074 	movhi	r2,129
  80c230:	10886204 	addi	r2,r2,8584
  80c234:	10801083 	ldbu	r2,66(r2)
  80c238:	10800420 	cmpeqi	r2,r2,16
  80c23c:	1000021e 	bne	r2,zero,80c248 <Look_for_FAT16+0xbc>
				{
					result = false;
  80c240:	e03ffe15 	stw	zero,-8(fp)
  80c244:	00000406 	br	80c258 <Look_for_FAT16+0xcc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
  80c248:	00802074 	movhi	r2,129
  80c24c:	10886204 	addi	r2,r2,8584
  80c250:	1080058b 	ldhu	r2,22(r2)
  80c254:	d0a02315 	stw	r2,-32628(gp)
				}
			}
		}
	}
	return result;
  80c258:	e0bffe17 	ldw	r2,-8(fp)
}
  80c25c:	dfc00317 	ldw	ra,12(sp)
  80c260:	df000217 	ldw	fp,8(sp)
  80c264:	dec00404 	addi	sp,sp,16
  80c268:	f800283a 	ret

0080c26c <filename_to_upper_case>:


void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
  80c26c:	defffb04 	addi	sp,sp,-20
  80c270:	dfc00415 	stw	ra,16(sp)
  80c274:	df000315 	stw	fp,12(sp)
  80c278:	df000304 	addi	fp,sp,12
  80c27c:	e13ffd15 	stw	r4,-12(fp)
    int index;
    int length = strlen(file_name);
  80c280:	e13ffd17 	ldw	r4,-12(fp)
  80c284:	08070040 	call	807004 <strlen>
  80c288:	e0bfff15 	stw	r2,-4(fp)

    for (index = 0; index < length; index++)
  80c28c:	e03ffe15 	stw	zero,-8(fp)
  80c290:	e0fffe17 	ldw	r3,-8(fp)
  80c294:	e0bfff17 	ldw	r2,-4(fp)
  80c298:	1880190e 	bge	r3,r2,80c300 <filename_to_upper_case+0x94>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
  80c29c:	e0fffd17 	ldw	r3,-12(fp)
  80c2a0:	e0bffe17 	ldw	r2,-8(fp)
  80c2a4:	1885883a 	add	r2,r3,r2
  80c2a8:	10800007 	ldb	r2,0(r2)
  80c2ac:	10801850 	cmplti	r2,r2,97
  80c2b0:	10000f1e 	bne	r2,zero,80c2f0 <filename_to_upper_case+0x84>
  80c2b4:	e0fffd17 	ldw	r3,-12(fp)
  80c2b8:	e0bffe17 	ldw	r2,-8(fp)
  80c2bc:	1885883a 	add	r2,r3,r2
  80c2c0:	10800007 	ldb	r2,0(r2)
  80c2c4:	10801ec8 	cmpgei	r2,r2,123
  80c2c8:	1000091e 	bne	r2,zero,80c2f0 <filename_to_upper_case+0x84>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
  80c2cc:	e0fffd17 	ldw	r3,-12(fp)
  80c2d0:	e0bffe17 	ldw	r2,-8(fp)
  80c2d4:	1889883a 	add	r4,r3,r2
  80c2d8:	e0fffd17 	ldw	r3,-12(fp)
  80c2dc:	e0bffe17 	ldw	r2,-8(fp)
  80c2e0:	1885883a 	add	r2,r3,r2
  80c2e4:	10800003 	ldbu	r2,0(r2)
  80c2e8:	10bff804 	addi	r2,r2,-32
  80c2ec:	20800005 	stb	r2,0(r4)
  80c2f0:	e0bffe17 	ldw	r2,-8(fp)
  80c2f4:	10800044 	addi	r2,r2,1
  80c2f8:	e0bffe15 	stw	r2,-8(fp)
  80c2fc:	003fe406 	br	80c290 <filename_to_upper_case+0x24>
        }
    }
}
  80c300:	dfc00417 	ldw	ra,16(sp)
  80c304:	df000317 	ldw	fp,12(sp)
  80c308:	dec00504 	addi	sp,sp,20
  80c30c:	f800283a 	ret

0080c310 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
  80c310:	defff804 	addi	sp,sp,-32
  80c314:	dfc00715 	stw	ra,28(sp)
  80c318:	df000615 	stw	fp,24(sp)
  80c31c:	df000604 	addi	fp,sp,24
  80c320:	e13ffa15 	stw	r4,-24(fp)
    int length = strlen(file_name);
  80c324:	e13ffa17 	ldw	r4,-24(fp)
  80c328:	08070040 	call	807004 <strlen>
  80c32c:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
  80c330:	00bfffc4 	movi	r2,-1
  80c334:	e0bffd15 	stw	r2,-12(fp)
    int last_period = -1;
  80c338:	00bfffc4 	movi	r2,-1
  80c33c:	e0bffe15 	stw	r2,-8(fp)
    bool result = true;
  80c340:	00800044 	movi	r2,1
  80c344:	e0bfff15 	stw	r2,-4(fp)

    for(index = 0; index < length; index++)
  80c348:	e03ffc15 	stw	zero,-16(fp)
  80c34c:	e0fffc17 	ldw	r3,-16(fp)
  80c350:	e0bffb17 	ldw	r2,-20(fp)
  80c354:	1880550e 	bge	r3,r2,80c4ac <check_file_name_for_FAT16_compliance+0x19c>
    {
        if ((file_name[index] == ' ') ||
  80c358:	e0fffa17 	ldw	r3,-24(fp)
  80c35c:	e0bffc17 	ldw	r2,-16(fp)
  80c360:	1885883a 	add	r2,r3,r2
  80c364:	10800007 	ldb	r2,0(r2)
  80c368:	10800820 	cmpeqi	r2,r2,32
  80c36c:	1000301e 	bne	r2,zero,80c430 <check_file_name_for_FAT16_compliance+0x120>
  80c370:	e0bffc17 	ldw	r2,-16(fp)
  80c374:	10ffffc4 	addi	r3,r2,-1
  80c378:	e0bffd17 	ldw	r2,-12(fp)
  80c37c:	18800c1e 	bne	r3,r2,80c3b0 <check_file_name_for_FAT16_compliance+0xa0>
  80c380:	e0fffa17 	ldw	r3,-24(fp)
  80c384:	e0bffc17 	ldw	r2,-16(fp)
  80c388:	1885883a 	add	r2,r3,r2
  80c38c:	10800007 	ldb	r2,0(r2)
  80c390:	10801720 	cmpeqi	r2,r2,92
  80c394:	1000261e 	bne	r2,zero,80c430 <check_file_name_for_FAT16_compliance+0x120>
  80c398:	e0fffa17 	ldw	r3,-24(fp)
  80c39c:	e0bffc17 	ldw	r2,-16(fp)
  80c3a0:	1885883a 	add	r2,r3,r2
  80c3a4:	10800007 	ldb	r2,0(r2)
  80c3a8:	10800be0 	cmpeqi	r2,r2,47
  80c3ac:	1000201e 	bne	r2,zero,80c430 <check_file_name_for_FAT16_compliance+0x120>
  80c3b0:	e0fffc17 	ldw	r3,-16(fp)
  80c3b4:	e0bffe17 	ldw	r2,-8(fp)
  80c3b8:	1885c83a 	sub	r2,r3,r2
  80c3bc:	10800258 	cmpnei	r2,r2,9
  80c3c0:	1000061e 	bne	r2,zero,80c3dc <check_file_name_for_FAT16_compliance+0xcc>
  80c3c4:	e0fffa17 	ldw	r3,-24(fp)
  80c3c8:	e0bffc17 	ldw	r2,-16(fp)
  80c3cc:	1885883a 	add	r2,r3,r2
  80c3d0:	10800007 	ldb	r2,0(r2)
  80c3d4:	10800b98 	cmpnei	r2,r2,46
  80c3d8:	1000151e 	bne	r2,zero,80c430 <check_file_name_for_FAT16_compliance+0x120>
  80c3dc:	e0fffd17 	ldw	r3,-12(fp)
  80c3e0:	e0bffe17 	ldw	r2,-8(fp)
  80c3e4:	18801426 	beq	r3,r2,80c438 <check_file_name_for_FAT16_compliance+0x128>
  80c3e8:	e0fffc17 	ldw	r3,-16(fp)
  80c3ec:	e0bffe17 	ldw	r2,-8(fp)
  80c3f0:	1885c83a 	sub	r2,r3,r2
  80c3f4:	10800110 	cmplti	r2,r2,4
  80c3f8:	10000f1e 	bne	r2,zero,80c438 <check_file_name_for_FAT16_compliance+0x128>
  80c3fc:	e0fffa17 	ldw	r3,-24(fp)
  80c400:	e0bffc17 	ldw	r2,-16(fp)
  80c404:	1885883a 	add	r2,r3,r2
  80c408:	10800007 	ldb	r2,0(r2)
  80c40c:	10801720 	cmpeqi	r2,r2,92
  80c410:	1000091e 	bne	r2,zero,80c438 <check_file_name_for_FAT16_compliance+0x128>
  80c414:	e0fffa17 	ldw	r3,-24(fp)
  80c418:	e0bffc17 	ldw	r2,-16(fp)
  80c41c:	1885883a 	add	r2,r3,r2
  80c420:	10800007 	ldb	r2,0(r2)
  80c424:	10800bd8 	cmpnei	r2,r2,47
  80c428:	1000011e 	bne	r2,zero,80c430 <check_file_name_for_FAT16_compliance+0x120>
  80c42c:	00000206 	br	80c438 <check_file_name_for_FAT16_compliance+0x128>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
  80c430:	e03fff15 	stw	zero,-4(fp)
            break;
  80c434:	00001d06 	br	80c4ac <check_file_name_for_FAT16_compliance+0x19c>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
  80c438:	e0fffa17 	ldw	r3,-24(fp)
  80c43c:	e0bffc17 	ldw	r2,-16(fp)
  80c440:	1885883a 	add	r2,r3,r2
  80c444:	10800007 	ldb	r2,0(r2)
  80c448:	10801720 	cmpeqi	r2,r2,92
  80c44c:	1000071e 	bne	r2,zero,80c46c <check_file_name_for_FAT16_compliance+0x15c>
  80c450:	e0fffa17 	ldw	r3,-24(fp)
  80c454:	e0bffc17 	ldw	r2,-16(fp)
  80c458:	1885883a 	add	r2,r3,r2
  80c45c:	10800007 	ldb	r2,0(r2)
  80c460:	10800be0 	cmpeqi	r2,r2,47
  80c464:	1000011e 	bne	r2,zero,80c46c <check_file_name_for_FAT16_compliance+0x15c>
  80c468:	00000406 	br	80c47c <check_file_name_for_FAT16_compliance+0x16c>
        {
            last_period = index;
  80c46c:	e0bffc17 	ldw	r2,-16(fp)
  80c470:	e0bffe15 	stw	r2,-8(fp)
            last_dir_break_position = index;
  80c474:	e0bffc17 	ldw	r2,-16(fp)
  80c478:	e0bffd15 	stw	r2,-12(fp)
        }
        if (file_name[index] == '.')
  80c47c:	e0fffa17 	ldw	r3,-24(fp)
  80c480:	e0bffc17 	ldw	r2,-16(fp)
  80c484:	1885883a 	add	r2,r3,r2
  80c488:	10800007 	ldb	r2,0(r2)
  80c48c:	10800b98 	cmpnei	r2,r2,46
  80c490:	1000021e 	bne	r2,zero,80c49c <check_file_name_for_FAT16_compliance+0x18c>
        {
            last_period = index;
  80c494:	e0bffc17 	ldw	r2,-16(fp)
  80c498:	e0bffe15 	stw	r2,-8(fp)
  80c49c:	e0bffc17 	ldw	r2,-16(fp)
  80c4a0:	10800044 	addi	r2,r2,1
  80c4a4:	e0bffc15 	stw	r2,-16(fp)
  80c4a8:	003fa806 	br	80c34c <check_file_name_for_FAT16_compliance+0x3c>
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
  80c4ac:	e0fffa17 	ldw	r3,-24(fp)
  80c4b0:	e0bffb17 	ldw	r2,-20(fp)
  80c4b4:	1885883a 	add	r2,r3,r2
  80c4b8:	10bfffc4 	addi	r2,r2,-1
  80c4bc:	10800007 	ldb	r2,0(r2)
  80c4c0:	10801720 	cmpeqi	r2,r2,92
  80c4c4:	1000081e 	bne	r2,zero,80c4e8 <check_file_name_for_FAT16_compliance+0x1d8>
  80c4c8:	e0fffa17 	ldw	r3,-24(fp)
  80c4cc:	e0bffb17 	ldw	r2,-20(fp)
  80c4d0:	1885883a 	add	r2,r3,r2
  80c4d4:	10bfffc4 	addi	r2,r2,-1
  80c4d8:	10800007 	ldb	r2,0(r2)
  80c4dc:	10800be0 	cmpeqi	r2,r2,47
  80c4e0:	1000011e 	bne	r2,zero,80c4e8 <check_file_name_for_FAT16_compliance+0x1d8>
  80c4e4:	00000106 	br	80c4ec <check_file_name_for_FAT16_compliance+0x1dc>
    {
        result = false;
  80c4e8:	e03fff15 	stw	zero,-4(fp)
    }
    return result;
  80c4ec:	e0bfff17 	ldw	r2,-4(fp)
}
  80c4f0:	dfc00717 	ldw	ra,28(sp)
  80c4f4:	df000617 	ldw	fp,24(sp)
  80c4f8:	dec00804 	addi	sp,sp,32
  80c4fc:	f800283a 	ret

0080c500 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
  80c500:	defffb04 	addi	sp,sp,-20
  80c504:	dfc00415 	stw	ra,16(sp)
  80c508:	df000315 	stw	fp,12(sp)
  80c50c:	df000304 	addi	fp,sp,12
  80c510:	e13ffd15 	stw	r4,-12(fp)
    int index = 0;
  80c514:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
  80c518:	e13ffd17 	ldw	r4,-12(fp)
  80c51c:	08070040 	call	807004 <strlen>
  80c520:	e0bfff15 	stw	r2,-4(fp)

    for(index = 0; index < length; index++)
  80c524:	e03ffe15 	stw	zero,-8(fp)
  80c528:	e0fffe17 	ldw	r3,-8(fp)
  80c52c:	e0bfff17 	ldw	r2,-4(fp)
  80c530:	1880100e 	bge	r3,r2,80c574 <get_dir_divider_location+0x74>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
  80c534:	e0fffd17 	ldw	r3,-12(fp)
  80c538:	e0bffe17 	ldw	r2,-8(fp)
  80c53c:	1885883a 	add	r2,r3,r2
  80c540:	10800007 	ldb	r2,0(r2)
  80c544:	10801720 	cmpeqi	r2,r2,92
  80c548:	10000a1e 	bne	r2,zero,80c574 <get_dir_divider_location+0x74>
  80c54c:	e0fffd17 	ldw	r3,-12(fp)
  80c550:	e0bffe17 	ldw	r2,-8(fp)
  80c554:	1885883a 	add	r2,r3,r2
  80c558:	10800007 	ldb	r2,0(r2)
  80c55c:	10800be0 	cmpeqi	r2,r2,47
  80c560:	1000041e 	bne	r2,zero,80c574 <get_dir_divider_location+0x74>
  80c564:	e0bffe17 	ldw	r2,-8(fp)
  80c568:	10800044 	addi	r2,r2,1
  80c56c:	e0bffe15 	stw	r2,-8(fp)
  80c570:	003fed06 	br	80c528 <get_dir_divider_location+0x28>
        {
            break;
        }
    }

    if (index == length)
  80c574:	e0fffe17 	ldw	r3,-8(fp)
  80c578:	e0bfff17 	ldw	r2,-4(fp)
  80c57c:	1880021e 	bne	r3,r2,80c588 <get_dir_divider_location+0x88>
    {
        index = -1;
  80c580:	00bfffc4 	movi	r2,-1
  80c584:	e0bffe15 	stw	r2,-8(fp)
    }

    return index;
  80c588:	e0bffe17 	ldw	r2,-8(fp)
}
  80c58c:	dfc00417 	ldw	ra,16(sp)
  80c590:	df000317 	ldw	fp,12(sp)
  80c594:	dec00504 	addi	sp,sp,20
  80c598:	f800283a 	ret

0080c59c <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
  80c59c:	defff804 	addi	sp,sp,-32
  80c5a0:	df000715 	stw	fp,28(sp)
  80c5a4:	df000704 	addi	fp,sp,28
  80c5a8:	e13ff915 	stw	r4,-28(fp)
  80c5ac:	e17ffa15 	stw	r5,-24(fp)
  80c5b0:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
  80c5b4:	00800044 	movi	r2,1
  80c5b8:	e0bffc15 	stw	r2,-16(fp)
	int index;

    for (index = 0; index < 8; index++)
  80c5bc:	e03ffd15 	stw	zero,-12(fp)
  80c5c0:	e0bffd17 	ldw	r2,-12(fp)
  80c5c4:	10800208 	cmpgei	r2,r2,8
  80c5c8:	10003f1e 	bne	r2,zero,80c6c8 <match_file_record_to_name_ext+0x12c>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
  80c5cc:	e0fff917 	ldw	r3,-28(fp)
  80c5d0:	e0bffd17 	ldw	r2,-12(fp)
  80c5d4:	1885883a 	add	r2,r3,r2
  80c5d8:	10800003 	ldbu	r2,0(r2)
  80c5dc:	10801870 	cmpltui	r2,r2,97
  80c5e0:	1000101e 	bne	r2,zero,80c624 <match_file_record_to_name_ext+0x88>
  80c5e4:	e0fff917 	ldw	r3,-28(fp)
  80c5e8:	e0bffd17 	ldw	r2,-12(fp)
  80c5ec:	1885883a 	add	r2,r3,r2
  80c5f0:	10800003 	ldbu	r2,0(r2)
  80c5f4:	10801ee8 	cmpgeui	r2,r2,123
  80c5f8:	10000a1e 	bne	r2,zero,80c624 <match_file_record_to_name_ext+0x88>
  80c5fc:	e0fff917 	ldw	r3,-28(fp)
  80c600:	e0bffd17 	ldw	r2,-12(fp)
  80c604:	1885883a 	add	r2,r3,r2
  80c608:	10800003 	ldbu	r2,0(r2)
  80c60c:	10bff804 	addi	r2,r2,-32
  80c610:	10803fcc 	andi	r2,r2,255
  80c614:	1080201c 	xori	r2,r2,128
  80c618:	10bfe004 	addi	r2,r2,-128
  80c61c:	e0bffe15 	stw	r2,-8(fp)
  80c620:	00000506 	br	80c638 <match_file_record_to_name_ext+0x9c>
  80c624:	e0bff917 	ldw	r2,-28(fp)
  80c628:	e0fffd17 	ldw	r3,-12(fp)
  80c62c:	10c5883a 	add	r2,r2,r3
  80c630:	10800007 	ldb	r2,0(r2)
  80c634:	e0bffe15 	stw	r2,-8(fp)
  80c638:	e0fffa17 	ldw	r3,-24(fp)
  80c63c:	e0bffd17 	ldw	r2,-12(fp)
  80c640:	1885883a 	add	r2,r3,r2
  80c644:	10800007 	ldb	r2,0(r2)
  80c648:	10801850 	cmplti	r2,r2,97
  80c64c:	1000111e 	bne	r2,zero,80c694 <match_file_record_to_name_ext+0xf8>
  80c650:	e0fffa17 	ldw	r3,-24(fp)
  80c654:	e0bffd17 	ldw	r2,-12(fp)
  80c658:	1885883a 	add	r2,r3,r2
  80c65c:	10800007 	ldb	r2,0(r2)
  80c660:	10801ec8 	cmpgei	r2,r2,123
  80c664:	10000b1e 	bne	r2,zero,80c694 <match_file_record_to_name_ext+0xf8>
  80c668:	e0fffa17 	ldw	r3,-24(fp)
  80c66c:	e0bffd17 	ldw	r2,-12(fp)
  80c670:	1885883a 	add	r2,r3,r2
  80c674:	10800003 	ldbu	r2,0(r2)
  80c678:	10bff804 	addi	r2,r2,-32
  80c67c:	10803fcc 	andi	r2,r2,255
  80c680:	1080201c 	xori	r2,r2,128
  80c684:	10bfe004 	addi	r2,r2,-128
  80c688:	e0fffe17 	ldw	r3,-8(fp)
  80c68c:	1880081e 	bne	r3,r2,80c6b0 <match_file_record_to_name_ext+0x114>
  80c690:	00000906 	br	80c6b8 <match_file_record_to_name_ext+0x11c>
  80c694:	e0fffa17 	ldw	r3,-24(fp)
  80c698:	e0bffd17 	ldw	r2,-12(fp)
  80c69c:	1885883a 	add	r2,r3,r2
  80c6a0:	10800007 	ldb	r2,0(r2)
  80c6a4:	e0fffe17 	ldw	r3,-8(fp)
  80c6a8:	1880011e 	bne	r3,r2,80c6b0 <match_file_record_to_name_ext+0x114>
  80c6ac:	00000206 	br	80c6b8 <match_file_record_to_name_ext+0x11c>
        {
            match = false;
  80c6b0:	e03ffc15 	stw	zero,-16(fp)
			break;
  80c6b4:	00000406 	br	80c6c8 <match_file_record_to_name_ext+0x12c>
  80c6b8:	e0bffd17 	ldw	r2,-12(fp)
  80c6bc:	10800044 	addi	r2,r2,1
  80c6c0:	e0bffd15 	stw	r2,-12(fp)
  80c6c4:	003fbe06 	br	80c5c0 <match_file_record_to_name_ext+0x24>
        }
    }
    for (index = 0; index < 3; index++)
  80c6c8:	e03ffd15 	stw	zero,-12(fp)
  80c6cc:	e0bffd17 	ldw	r2,-12(fp)
  80c6d0:	108000c8 	cmpgei	r2,r2,3
  80c6d4:	1000431e 	bne	r2,zero,80c7e4 <match_file_record_to_name_ext+0x248>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
  80c6d8:	e0fff917 	ldw	r3,-28(fp)
  80c6dc:	e0bffd17 	ldw	r2,-12(fp)
  80c6e0:	1885883a 	add	r2,r3,r2
  80c6e4:	10800204 	addi	r2,r2,8
  80c6e8:	10800003 	ldbu	r2,0(r2)
  80c6ec:	10801870 	cmpltui	r2,r2,97
  80c6f0:	1000121e 	bne	r2,zero,80c73c <match_file_record_to_name_ext+0x1a0>
  80c6f4:	e0fff917 	ldw	r3,-28(fp)
  80c6f8:	e0bffd17 	ldw	r2,-12(fp)
  80c6fc:	1885883a 	add	r2,r3,r2
  80c700:	10800204 	addi	r2,r2,8
  80c704:	10800003 	ldbu	r2,0(r2)
  80c708:	10801ee8 	cmpgeui	r2,r2,123
  80c70c:	10000b1e 	bne	r2,zero,80c73c <match_file_record_to_name_ext+0x1a0>
  80c710:	e0fff917 	ldw	r3,-28(fp)
  80c714:	e0bffd17 	ldw	r2,-12(fp)
  80c718:	1885883a 	add	r2,r3,r2
  80c71c:	10800204 	addi	r2,r2,8
  80c720:	10800003 	ldbu	r2,0(r2)
  80c724:	10bff804 	addi	r2,r2,-32
  80c728:	10803fcc 	andi	r2,r2,255
  80c72c:	1080201c 	xori	r2,r2,128
  80c730:	10bfe004 	addi	r2,r2,-128
  80c734:	e0bfff15 	stw	r2,-4(fp)
  80c738:	00000606 	br	80c754 <match_file_record_to_name_ext+0x1b8>
  80c73c:	e0fff917 	ldw	r3,-28(fp)
  80c740:	e0bffd17 	ldw	r2,-12(fp)
  80c744:	1885883a 	add	r2,r3,r2
  80c748:	10800204 	addi	r2,r2,8
  80c74c:	10800007 	ldb	r2,0(r2)
  80c750:	e0bfff15 	stw	r2,-4(fp)
  80c754:	e0fffb17 	ldw	r3,-20(fp)
  80c758:	e0bffd17 	ldw	r2,-12(fp)
  80c75c:	1885883a 	add	r2,r3,r2
  80c760:	10800007 	ldb	r2,0(r2)
  80c764:	10801850 	cmplti	r2,r2,97
  80c768:	1000111e 	bne	r2,zero,80c7b0 <match_file_record_to_name_ext+0x214>
  80c76c:	e0fffb17 	ldw	r3,-20(fp)
  80c770:	e0bffd17 	ldw	r2,-12(fp)
  80c774:	1885883a 	add	r2,r3,r2
  80c778:	10800007 	ldb	r2,0(r2)
  80c77c:	10801ec8 	cmpgei	r2,r2,123
  80c780:	10000b1e 	bne	r2,zero,80c7b0 <match_file_record_to_name_ext+0x214>
  80c784:	e0fffb17 	ldw	r3,-20(fp)
  80c788:	e0bffd17 	ldw	r2,-12(fp)
  80c78c:	1885883a 	add	r2,r3,r2
  80c790:	10800003 	ldbu	r2,0(r2)
  80c794:	10bff804 	addi	r2,r2,-32
  80c798:	10803fcc 	andi	r2,r2,255
  80c79c:	1080201c 	xori	r2,r2,128
  80c7a0:	10bfe004 	addi	r2,r2,-128
  80c7a4:	e0ffff17 	ldw	r3,-4(fp)
  80c7a8:	1880081e 	bne	r3,r2,80c7cc <match_file_record_to_name_ext+0x230>
  80c7ac:	00000906 	br	80c7d4 <match_file_record_to_name_ext+0x238>
  80c7b0:	e0fffb17 	ldw	r3,-20(fp)
  80c7b4:	e0bffd17 	ldw	r2,-12(fp)
  80c7b8:	1885883a 	add	r2,r3,r2
  80c7bc:	10800007 	ldb	r2,0(r2)
  80c7c0:	e0ffff17 	ldw	r3,-4(fp)
  80c7c4:	1880011e 	bne	r3,r2,80c7cc <match_file_record_to_name_ext+0x230>
  80c7c8:	00000206 	br	80c7d4 <match_file_record_to_name_ext+0x238>
        {
            match = false;
  80c7cc:	e03ffc15 	stw	zero,-16(fp)
			break;
  80c7d0:	00000406 	br	80c7e4 <match_file_record_to_name_ext+0x248>
  80c7d4:	e0bffd17 	ldw	r2,-12(fp)
  80c7d8:	10800044 	addi	r2,r2,1
  80c7dc:	e0bffd15 	stw	r2,-12(fp)
  80c7e0:	003fba06 	br	80c6cc <match_file_record_to_name_ext+0x130>
        }
    }
	return match;
  80c7e4:	e0bffc17 	ldw	r2,-16(fp)
}
  80c7e8:	df000717 	ldw	fp,28(sp)
  80c7ec:	dec00804 	addi	sp,sp,32
  80c7f0:	f800283a 	ret

0080c7f4 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
  80c7f4:	deffea04 	addi	sp,sp,-88
  80c7f8:	dfc01515 	stw	ra,84(sp)
  80c7fc:	df001415 	stw	fp,80(sp)
  80c800:	df001404 	addi	fp,sp,80
  80c804:	e13fec15 	stw	r4,-80(fp)
  80c808:	e17fed15 	stw	r5,-76(fp)
  80c80c:	e1bfee15 	stw	r6,-72(fp)
    bool result = false;
  80c810:	e03fef15 	stw	zero,-68(fp)
    int home_dir_cluster = 0;
  80c814:	e03ff015 	stw	zero,-64(fp)
    int location, index;
    int start_location = 0;
  80c818:	e03ff315 	stw	zero,-52(fp)

    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
  80c81c:	e13fec17 	ldw	r4,-80(fp)
  80c820:	080c5000 	call	80c500 <get_dir_divider_location>
  80c824:	e0bff115 	stw	r2,-60(fp)
    while (location > 0)
  80c828:	e0bff117 	ldw	r2,-60(fp)
  80c82c:	10800050 	cmplti	r2,r2,1
  80c830:	1001081e 	bne	r2,zero,80cc54 <get_home_directory_cluster_for_file+0x460>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  80c834:	00802074 	movhi	r2,129
  80c838:	10818504 	addi	r2,r2,1556
  80c83c:	e13ff404 	addi	r4,fp,-48
  80c840:	100b883a 	mov	r5,r2
  80c844:	01800204 	movi	r6,8
  80c848:	080563c0 	call	80563c <memcpy>
        char extension[3] = { ' ', ' ', ' ' };
  80c84c:	00802074 	movhi	r2,129
  80c850:	10818704 	addi	r2,r2,1564
  80c854:	e13ff604 	addi	r4,fp,-40
  80c858:	100b883a 	mov	r5,r2
  80c85c:	018000c4 	movi	r6,3
  80c860:	080563c0 	call	80563c <memcpy>
        int ext_index = -1;
  80c864:	00bfffc4 	movi	r2,-1
  80c868:	e0bff715 	stw	r2,-36(fp)
        int new_cluster = home_dir_cluster;
  80c86c:	e0bff017 	ldw	r2,-64(fp)
  80c870:	e0bff815 	stw	r2,-32(fp)

        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
  80c874:	e03ff215 	stw	zero,-56(fp)
  80c878:	e0fff217 	ldw	r3,-56(fp)
  80c87c:	e0bff117 	ldw	r2,-60(fp)
  80c880:	1880290e 	bge	r3,r2,80c928 <get_home_directory_cluster_for_file+0x134>
        {
            if (file_name[index+start_location] == '.')
  80c884:	e0fff217 	ldw	r3,-56(fp)
  80c888:	e0bfec17 	ldw	r2,-80(fp)
  80c88c:	1887883a 	add	r3,r3,r2
  80c890:	e0bff317 	ldw	r2,-52(fp)
  80c894:	1885883a 	add	r2,r3,r2
  80c898:	10800007 	ldb	r2,0(r2)
  80c89c:	10800b98 	cmpnei	r2,r2,46
  80c8a0:	1000031e 	bne	r2,zero,80c8b0 <get_home_directory_cluster_for_file+0xbc>
            {
                ext_index = index;
  80c8a4:	e0bff217 	ldw	r2,-56(fp)
  80c8a8:	e0bff715 	stw	r2,-36(fp)
  80c8ac:	00001a06 	br	80c918 <get_home_directory_cluster_for_file+0x124>
            }
            else if (ext_index < 0)
  80c8b0:	e0bff717 	ldw	r2,-36(fp)
  80c8b4:	1004403a 	cmpge	r2,r2,zero
  80c8b8:	10000b1e 	bne	r2,zero,80c8e8 <get_home_directory_cluster_for_file+0xf4>
            {
                name[index] = file_name[index+start_location];
  80c8bc:	e0fff404 	addi	r3,fp,-48
  80c8c0:	e0bff217 	ldw	r2,-56(fp)
  80c8c4:	1889883a 	add	r4,r3,r2
  80c8c8:	e0fff217 	ldw	r3,-56(fp)
  80c8cc:	e0bfec17 	ldw	r2,-80(fp)
  80c8d0:	1887883a 	add	r3,r3,r2
  80c8d4:	e0bff317 	ldw	r2,-52(fp)
  80c8d8:	1885883a 	add	r2,r3,r2
  80c8dc:	10800003 	ldbu	r2,0(r2)
  80c8e0:	20800005 	stb	r2,0(r4)
  80c8e4:	00000c06 	br	80c918 <get_home_directory_cluster_for_file+0x124>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
  80c8e8:	e0fff217 	ldw	r3,-56(fp)
  80c8ec:	e0bff717 	ldw	r2,-36(fp)
  80c8f0:	1887c83a 	sub	r3,r3,r2
  80c8f4:	e0bff604 	addi	r2,fp,-40
  80c8f8:	10c9883a 	add	r4,r2,r3
  80c8fc:	e0fff217 	ldw	r3,-56(fp)
  80c900:	e0bfec17 	ldw	r2,-80(fp)
  80c904:	1887883a 	add	r3,r3,r2
  80c908:	e0bff317 	ldw	r2,-52(fp)
  80c90c:	1885883a 	add	r2,r3,r2
  80c910:	10800003 	ldbu	r2,0(r2)
  80c914:	20800005 	stb	r2,0(r4)
  80c918:	e0bff217 	ldw	r2,-56(fp)
  80c91c:	10800044 	addi	r2,r2,1
  80c920:	e0bff215 	stw	r2,-56(fp)
  80c924:	003fd406 	br	80c878 <get_home_directory_cluster_for_file+0x84>
            }
        }

        if (home_dir_cluster == 0)
  80c928:	e0bff017 	ldw	r2,-64(fp)
  80c92c:	1004c03a 	cmpne	r2,r2,zero
  80c930:	1000501e 	bne	r2,zero,80ca74 <get_home_directory_cluster_for_file+0x280>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80c934:	00802074 	movhi	r2,129
  80c938:	10886204 	addi	r2,r2,8584
  80c93c:	1080050b 	ldhu	r2,20(r2)
  80c940:	1008917a 	slli	r4,r2,5
  80c944:	00802074 	movhi	r2,129
  80c948:	10886204 	addi	r2,r2,8584
  80c94c:	1140030b 	ldhu	r5,12(r2)
  80c950:	08006300 	call	800630 <__divsi3>
  80c954:	e0bff915 	stw	r2,-28(fp)
            int sector_index;

            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80c958:	e03ffa15 	stw	zero,-24(fp)
  80c95c:	e0fffa17 	ldw	r3,-24(fp)
  80c960:	e0bff917 	ldw	r2,-28(fp)
  80c964:	1880360e 	bge	r3,r2,80ca40 <get_home_directory_cluster_for_file+0x24c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
  80c968:	00802074 	movhi	r2,129
  80c96c:	10886204 	addi	r2,r2,8584
  80c970:	10c01317 	ldw	r3,76(r2)
  80c974:	e0bffa17 	ldw	r2,-24(fp)
  80c978:	1889883a 	add	r4,r3,r2
  80c97c:	d1602217 	ldw	r5,-32632(gp)
  80c980:	080b3240 	call	80b324 <Read_Sector_Data>
  80c984:	1005003a 	cmpeq	r2,r2,zero
  80c988:	10002d1e 	bne	r2,zero,80ca40 <get_home_directory_cluster_for_file+0x24c>
                {
                    int file_counter;

                    for (file_counter = 0; file_counter < 16; file_counter++)
  80c98c:	e03ffb15 	stw	zero,-20(fp)
  80c990:	e0bffb17 	ldw	r2,-20(fp)
  80c994:	10800408 	cmpgei	r2,r2,16
  80c998:	1000211e 	bne	r2,zero,80ca20 <get_home_directory_cluster_for_file+0x22c>
                    {

                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  80c99c:	e0bffb17 	ldw	r2,-20(fp)
  80c9a0:	1008917a 	slli	r4,r2,5
  80c9a4:	e17fee17 	ldw	r5,-72(fp)
  80c9a8:	000d883a 	mov	r6,zero
  80c9ac:	e1fffa17 	ldw	r7,-24(fp)
  80c9b0:	080b7380 	call	80b738 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  80c9b4:	e0bfee17 	ldw	r2,-72(fp)
  80c9b8:	10800003 	ldbu	r2,0(r2)
  80c9bc:	10803960 	cmpeqi	r2,r2,229
  80c9c0:	1000131e 	bne	r2,zero,80ca10 <get_home_directory_cluster_for_file+0x21c>
  80c9c4:	e0bfee17 	ldw	r2,-72(fp)
  80c9c8:	10800003 	ldbu	r2,0(r2)
  80c9cc:	1005003a 	cmpeq	r2,r2,zero
  80c9d0:	10000f1e 	bne	r2,zero,80ca10 <get_home_directory_cluster_for_file+0x21c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  80c9d4:	e17ff404 	addi	r5,fp,-48
  80c9d8:	e1bff604 	addi	r6,fp,-40
  80c9dc:	e13fee17 	ldw	r4,-72(fp)
  80c9e0:	080c59c0 	call	80c59c <match_file_record_to_name_ext>
  80c9e4:	e0bffc15 	stw	r2,-16(fp)
                            if (match)
  80c9e8:	e0bffc17 	ldw	r2,-16(fp)
  80c9ec:	1005003a 	cmpeq	r2,r2,zero
  80c9f0:	1000071e 	bne	r2,zero,80ca10 <get_home_directory_cluster_for_file+0x21c>
                            {
                                new_cluster = file_record->start_cluster_index;
  80c9f4:	e0bfee17 	ldw	r2,-72(fp)
  80c9f8:	1080058b 	ldhu	r2,22(r2)
  80c9fc:	e0bff815 	stw	r2,-32(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
  80ca00:	e0ffee17 	ldw	r3,-72(fp)
  80ca04:	00800044 	movi	r2,1
  80ca08:	18800a15 	stw	r2,40(r3)
                                break;
  80ca0c:	00000406 	br	80ca20 <get_home_directory_cluster_for_file+0x22c>
  80ca10:	e0bffb17 	ldw	r2,-20(fp)
  80ca14:	10800044 	addi	r2,r2,1
  80ca18:	e0bffb15 	stw	r2,-20(fp)
  80ca1c:	003fdc06 	br	80c990 <get_home_directory_cluster_for_file+0x19c>
                            }
                        }
                    }
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
  80ca20:	e0fff817 	ldw	r3,-32(fp)
  80ca24:	e0bff017 	ldw	r2,-64(fp)
  80ca28:	18800126 	beq	r3,r2,80ca30 <get_home_directory_cluster_for_file+0x23c>
                {
                    break;
  80ca2c:	00000406 	br	80ca40 <get_home_directory_cluster_for_file+0x24c>
  80ca30:	e0bffa17 	ldw	r2,-24(fp)
  80ca34:	10800044 	addi	r2,r2,1
  80ca38:	e0bffa15 	stw	r2,-24(fp)
  80ca3c:	003fc706 	br	80c95c <get_home_directory_cluster_for_file+0x168>
                }
            }
            if (new_cluster != home_dir_cluster)
  80ca40:	e0fff817 	ldw	r3,-32(fp)
  80ca44:	e0bff017 	ldw	r2,-64(fp)
  80ca48:	18800826 	beq	r3,r2,80ca6c <get_home_directory_cluster_for_file+0x278>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  80ca4c:	e0bff817 	ldw	r2,-32(fp)
  80ca50:	e0bff015 	stw	r2,-64(fp)
                start_location = start_location+location+1;
  80ca54:	e0fff317 	ldw	r3,-52(fp)
  80ca58:	e0bff117 	ldw	r2,-60(fp)
  80ca5c:	1885883a 	add	r2,r3,r2
  80ca60:	10800044 	addi	r2,r2,1
  80ca64:	e0bff315 	stw	r2,-52(fp)
  80ca68:	00006f06 	br	80cc28 <get_home_directory_cluster_for_file+0x434>
            }
            else
            {
                // Directory path is invalid.
                return false;
  80ca6c:	e03fff15 	stw	zero,-4(fp)
  80ca70:	00008406 	br	80cc84 <get_home_directory_cluster_for_file+0x490>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
  80ca74:	e0bff017 	ldw	r2,-64(fp)
  80ca78:	e0bffc15 	stw	r2,-16(fp)

            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80ca7c:	e0bffc17 	ldw	r2,-16(fp)
  80ca80:	113fff84 	addi	r4,r2,-2
  80ca84:	00802074 	movhi	r2,129
  80ca88:	10886204 	addi	r2,r2,8584
  80ca8c:	11400383 	ldbu	r5,14(r2)
  80ca90:	08006ec0 	call	8006ec <__mulsi3>
  80ca94:	1007883a 	mov	r3,r2
  80ca98:	00802074 	movhi	r2,129
  80ca9c:	10886204 	addi	r2,r2,8584
  80caa0:	10801417 	ldw	r2,80(r2)
  80caa4:	1885883a 	add	r2,r3,r2
  80caa8:	e0bffb15 	stw	r2,-20(fp)
                int sector_index;

                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80caac:	e03ffa15 	stw	zero,-24(fp)
  80cab0:	00802074 	movhi	r2,129
  80cab4:	10886204 	addi	r2,r2,8584
  80cab8:	10c00383 	ldbu	r3,14(r2)
  80cabc:	e0bffa17 	ldw	r2,-24(fp)
  80cac0:	10c0310e 	bge	r2,r3,80cb88 <get_home_directory_cluster_for_file+0x394>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  80cac4:	e0fffa17 	ldw	r3,-24(fp)
  80cac8:	e0bffb17 	ldw	r2,-20(fp)
  80cacc:	1889883a 	add	r4,r3,r2
  80cad0:	d1602217 	ldw	r5,-32632(gp)
  80cad4:	080b3240 	call	80b324 <Read_Sector_Data>
  80cad8:	1005003a 	cmpeq	r2,r2,zero
  80cadc:	10002a1e 	bne	r2,zero,80cb88 <get_home_directory_cluster_for_file+0x394>
                    {
                        int file_counter;

                        for (file_counter = 0; file_counter < 16; file_counter++)
  80cae0:	e03ff915 	stw	zero,-28(fp)
  80cae4:	e0bff917 	ldw	r2,-28(fp)
  80cae8:	10800408 	cmpgei	r2,r2,16
  80caec:	10001e1e 	bne	r2,zero,80cb68 <get_home_directory_cluster_for_file+0x374>
                        {
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  80caf0:	e0bff917 	ldw	r2,-28(fp)
  80caf4:	1008917a 	slli	r4,r2,5
  80caf8:	e17fee17 	ldw	r5,-72(fp)
  80cafc:	e1bffc17 	ldw	r6,-16(fp)
  80cb00:	e1fffa17 	ldw	r7,-24(fp)
  80cb04:	080b7380 	call	80b738 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  80cb08:	e0bfee17 	ldw	r2,-72(fp)
  80cb0c:	10800003 	ldbu	r2,0(r2)
  80cb10:	10803960 	cmpeqi	r2,r2,229
  80cb14:	1000101e 	bne	r2,zero,80cb58 <get_home_directory_cluster_for_file+0x364>
  80cb18:	e0bfee17 	ldw	r2,-72(fp)
  80cb1c:	10800003 	ldbu	r2,0(r2)
  80cb20:	1005003a 	cmpeq	r2,r2,zero
  80cb24:	10000c1e 	bne	r2,zero,80cb58 <get_home_directory_cluster_for_file+0x364>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
  80cb28:	e17ff404 	addi	r5,fp,-48
  80cb2c:	e1bff604 	addi	r6,fp,-40
  80cb30:	e13fee17 	ldw	r4,-72(fp)
  80cb34:	080c59c0 	call	80c59c <match_file_record_to_name_ext>
  80cb38:	e0bffd15 	stw	r2,-12(fp)
                                if (match)
  80cb3c:	e0bffd17 	ldw	r2,-12(fp)
  80cb40:	1005003a 	cmpeq	r2,r2,zero
  80cb44:	1000041e 	bne	r2,zero,80cb58 <get_home_directory_cluster_for_file+0x364>
                                {
                                    new_cluster = file_record->start_cluster_index;
  80cb48:	e0bfee17 	ldw	r2,-72(fp)
  80cb4c:	1080058b 	ldhu	r2,22(r2)
  80cb50:	e0bff815 	stw	r2,-32(fp)
                                    break;
  80cb54:	00000406 	br	80cb68 <get_home_directory_cluster_for_file+0x374>
  80cb58:	e0bff917 	ldw	r2,-28(fp)
  80cb5c:	10800044 	addi	r2,r2,1
  80cb60:	e0bff915 	stw	r2,-28(fp)
  80cb64:	003fdf06 	br	80cae4 <get_home_directory_cluster_for_file+0x2f0>
                                }
                            }
                        }
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
  80cb68:	e0fff817 	ldw	r3,-32(fp)
  80cb6c:	e0bff017 	ldw	r2,-64(fp)
  80cb70:	18800126 	beq	r3,r2,80cb78 <get_home_directory_cluster_for_file+0x384>
                    {
                        break;
  80cb74:	00000406 	br	80cb88 <get_home_directory_cluster_for_file+0x394>
  80cb78:	e0bffa17 	ldw	r2,-24(fp)
  80cb7c:	10800044 	addi	r2,r2,1
  80cb80:	e0bffa15 	stw	r2,-24(fp)
  80cb84:	003fca06 	br	80cab0 <get_home_directory_cluster_for_file+0x2bc>
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
  80cb88:	e0fff817 	ldw	r3,-32(fp)
  80cb8c:	e0bff017 	ldw	r2,-64(fp)
  80cb90:	1880111e 	bne	r3,r2,80cbd8 <get_home_directory_cluster_for_file+0x3e4>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
  80cb94:	e17ffe04 	addi	r5,fp,-8
  80cb98:	e13ff817 	ldw	r4,-32(fp)
  80cb9c:	080b4080 	call	80b408 <get_cluster_flag>
  80cba0:	1005003a 	cmpeq	r2,r2,zero
  80cba4:	10000a1e 	bne	r2,zero,80cbd0 <get_home_directory_cluster_for_file+0x3dc>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  80cba8:	e0bffe0b 	ldhu	r2,-8(fp)
  80cbac:	10fffe0c 	andi	r3,r2,65528
  80cbb0:	00bffe14 	movui	r2,65528
  80cbb4:	1880021e 	bne	r3,r2,80cbc0 <get_home_directory_cluster_for_file+0x3cc>
						{
							return false;
  80cbb8:	e03fff15 	stw	zero,-4(fp)
  80cbbc:	00003106 	br	80cc84 <get_home_directory_cluster_for_file+0x490>
						}
						new_cluster = (next_cluster & 0x0000fff8);
  80cbc0:	e0bffe0b 	ldhu	r2,-8(fp)
  80cbc4:	10bffe0c 	andi	r2,r2,65528
  80cbc8:	e0bff815 	stw	r2,-32(fp)
  80cbcc:	00000206 	br	80cbd8 <get_home_directory_cluster_for_file+0x3e4>
					}
					else
					{
						// Directory path is invalid.
						return false;
  80cbd0:	e03fff15 	stw	zero,-4(fp)
  80cbd4:	00002b06 	br	80cc84 <get_home_directory_cluster_for_file+0x490>
					}
                }
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
  80cbd8:	e0fffc17 	ldw	r3,-16(fp)
  80cbdc:	00bffdd4 	movui	r2,65527
  80cbe0:	10c00416 	blt	r2,r3,80cbf4 <get_home_directory_cluster_for_file+0x400>
  80cbe4:	e0fff817 	ldw	r3,-32(fp)
  80cbe8:	e0bff017 	ldw	r2,-64(fp)
  80cbec:	1880011e 	bne	r3,r2,80cbf4 <get_home_directory_cluster_for_file+0x400>
  80cbf0:	003fa206 	br	80ca7c <get_home_directory_cluster_for_file+0x288>
            if (new_cluster != home_dir_cluster)
  80cbf4:	e0fff817 	ldw	r3,-32(fp)
  80cbf8:	e0bff017 	ldw	r2,-64(fp)
  80cbfc:	18800826 	beq	r3,r2,80cc20 <get_home_directory_cluster_for_file+0x42c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
  80cc00:	e0bff817 	ldw	r2,-32(fp)
  80cc04:	e0bff015 	stw	r2,-64(fp)
                start_location = start_location+location+1;
  80cc08:	e0fff317 	ldw	r3,-52(fp)
  80cc0c:	e0bff117 	ldw	r2,-60(fp)
  80cc10:	1885883a 	add	r2,r3,r2
  80cc14:	10800044 	addi	r2,r2,1
  80cc18:	e0bff315 	stw	r2,-52(fp)
  80cc1c:	00000206 	br	80cc28 <get_home_directory_cluster_for_file+0x434>
            }
            else
            {
                // Directory path is invalid.
                return false;
  80cc20:	e03fff15 	stw	zero,-4(fp)
  80cc24:	00001706 	br	80cc84 <get_home_directory_cluster_for_file+0x490>
            }
        }
        location = get_dir_divider_location(&(file_name[start_location]));
  80cc28:	e0ffec17 	ldw	r3,-80(fp)
  80cc2c:	e0bff317 	ldw	r2,-52(fp)
  80cc30:	1889883a 	add	r4,r3,r2
  80cc34:	080c5000 	call	80c500 <get_dir_divider_location>
  80cc38:	e0bff115 	stw	r2,-60(fp)
        if (location < 0)
  80cc3c:	e0bff117 	ldw	r2,-60(fp)
  80cc40:	1004403a 	cmpge	r2,r2,zero
  80cc44:	103ef81e 	bne	r2,zero,80c828 <get_home_directory_cluster_for_file+0x34>
        {
            // Directory has been located.
            result = true;
  80cc48:	00800044 	movi	r2,1
  80cc4c:	e0bfef15 	stw	r2,-68(fp)
  80cc50:	003ef506 	br	80c828 <get_home_directory_cluster_for_file+0x34>
        }
    }

    *home_directory_cluster = home_dir_cluster;
  80cc54:	e0ffed17 	ldw	r3,-76(fp)
  80cc58:	e0bff017 	ldw	r2,-64(fp)
  80cc5c:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
  80cc60:	e0bff017 	ldw	r2,-64(fp)
  80cc64:	1004c03a 	cmpne	r2,r2,zero
  80cc68:	1000041e 	bne	r2,zero,80cc7c <get_home_directory_cluster_for_file+0x488>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
  80cc6c:	e0bfee17 	ldw	r2,-72(fp)
  80cc70:	10000a15 	stw	zero,40(r2)
		result = true;
  80cc74:	00800044 	movi	r2,1
  80cc78:	e0bfef15 	stw	r2,-68(fp)
    }
    return result;
  80cc7c:	e0bfef17 	ldw	r2,-68(fp)
  80cc80:	e0bfff15 	stw	r2,-4(fp)
}
  80cc84:	e0bfff17 	ldw	r2,-4(fp)
  80cc88:	dfc01517 	ldw	ra,84(sp)
  80cc8c:	df001417 	ldw	fp,80(sp)
  80cc90:	dec01604 	addi	sp,sp,88
  80cc94:	f800283a 	ret

0080cc98 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
  80cc98:	deffeb04 	addi	sp,sp,-84
  80cc9c:	dfc01415 	stw	ra,80(sp)
  80cca0:	df001315 	stw	fp,76(sp)
  80cca4:	df001304 	addi	fp,sp,76
  80cca8:	e13fed15 	stw	r4,-76(fp)
  80ccac:	e17fee15 	stw	r5,-72(fp)
  80ccb0:	e1bfef15 	stw	r6,-68(fp)
    int location = get_dir_divider_location( file_name );
  80ccb4:	e13fee17 	ldw	r4,-72(fp)
  80ccb8:	080c5000 	call	80c500 <get_dir_divider_location>
  80ccbc:	e0bff015 	stw	r2,-64(fp)
    int last_dir_separator = 0;
  80ccc0:	e03ff115 	stw	zero,-60(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
  80ccc4:	00802074 	movhi	r2,129
  80ccc8:	10818504 	addi	r2,r2,1556
  80cccc:	e13ff204 	addi	r4,fp,-56
  80ccd0:	100b883a 	mov	r5,r2
  80ccd4:	01800204 	movi	r6,8
  80ccd8:	080563c0 	call	80563c <memcpy>
    char extension[3] = { ' ', ' ', ' ' };
  80ccdc:	00802074 	movhi	r2,129
  80cce0:	10818704 	addi	r2,r2,1564
  80cce4:	e13ff404 	addi	r4,fp,-48
  80cce8:	100b883a 	mov	r5,r2
  80ccec:	018000c4 	movi	r6,3
  80ccf0:	080563c0 	call	80563c <memcpy>
    int ext_index = -1;
  80ccf4:	00bfffc4 	movi	r2,-1
  80ccf8:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
  80ccfc:	e0bfed17 	ldw	r2,-76(fp)
  80cd00:	e0bff615 	stw	r2,-40(fp)
    int index;
	int length = strlen(file_name);
  80cd04:	e13fee17 	ldw	r4,-72(fp)
  80cd08:	08070040 	call	807004 <strlen>
  80cd0c:	e0bff815 	stw	r2,-32(fp)
    bool result = false;
  80cd10:	e03ff915 	stw	zero,-28(fp)

    // Skip through all directory separators.
    while (location > 0)
  80cd14:	e0bff017 	ldw	r2,-64(fp)
  80cd18:	10800050 	cmplti	r2,r2,1
  80cd1c:	10000b1e 	bne	r2,zero,80cd4c <find_file_in_directory+0xb4>
    {
        last_dir_separator = last_dir_separator+location+1;
  80cd20:	e0fff117 	ldw	r3,-60(fp)
  80cd24:	e0bff017 	ldw	r2,-64(fp)
  80cd28:	1885883a 	add	r2,r3,r2
  80cd2c:	10800044 	addi	r2,r2,1
  80cd30:	e0bff115 	stw	r2,-60(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
  80cd34:	e0ffee17 	ldw	r3,-72(fp)
  80cd38:	e0bff117 	ldw	r2,-60(fp)
  80cd3c:	1889883a 	add	r4,r3,r2
  80cd40:	080c5000 	call	80c500 <get_dir_divider_location>
  80cd44:	e0bff015 	stw	r2,-64(fp)
  80cd48:	003ff206 	br	80cd14 <find_file_in_directory+0x7c>
    }

    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
  80cd4c:	e0bff117 	ldw	r2,-60(fp)
  80cd50:	e0bff715 	stw	r2,-36(fp)
  80cd54:	e0fff717 	ldw	r3,-36(fp)
  80cd58:	e0bff817 	ldw	r2,-32(fp)
  80cd5c:	1880250e 	bge	r3,r2,80cdf4 <find_file_in_directory+0x15c>
    {
        if (file_name[index] == '.')
  80cd60:	e0ffee17 	ldw	r3,-72(fp)
  80cd64:	e0bff717 	ldw	r2,-36(fp)
  80cd68:	1885883a 	add	r2,r3,r2
  80cd6c:	10800007 	ldb	r2,0(r2)
  80cd70:	10800b98 	cmpnei	r2,r2,46
  80cd74:	1000031e 	bne	r2,zero,80cd84 <find_file_in_directory+0xec>
        {
            ext_index = index;
  80cd78:	e0bff717 	ldw	r2,-36(fp)
  80cd7c:	e0bff515 	stw	r2,-44(fp)
  80cd80:	00001806 	br	80cde4 <find_file_in_directory+0x14c>
        }
        else if (ext_index < 0)
  80cd84:	e0bff517 	ldw	r2,-44(fp)
  80cd88:	1004403a 	cmpge	r2,r2,zero
  80cd8c:	10000b1e 	bne	r2,zero,80cdbc <find_file_in_directory+0x124>
        {
            name[index-last_dir_separator] = file_name[index];
  80cd90:	e0fff717 	ldw	r3,-36(fp)
  80cd94:	e0bff117 	ldw	r2,-60(fp)
  80cd98:	1887c83a 	sub	r3,r3,r2
  80cd9c:	e0bff204 	addi	r2,fp,-56
  80cda0:	10c9883a 	add	r4,r2,r3
  80cda4:	e0ffee17 	ldw	r3,-72(fp)
  80cda8:	e0bff717 	ldw	r2,-36(fp)
  80cdac:	1885883a 	add	r2,r3,r2
  80cdb0:	10800003 	ldbu	r2,0(r2)
  80cdb4:	20800005 	stb	r2,0(r4)
  80cdb8:	00000a06 	br	80cde4 <find_file_in_directory+0x14c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
  80cdbc:	e0fff717 	ldw	r3,-36(fp)
  80cdc0:	e0bff517 	ldw	r2,-44(fp)
  80cdc4:	1887c83a 	sub	r3,r3,r2
  80cdc8:	e0bff3c4 	addi	r2,fp,-49
  80cdcc:	10c9883a 	add	r4,r2,r3
  80cdd0:	e0ffee17 	ldw	r3,-72(fp)
  80cdd4:	e0bff717 	ldw	r2,-36(fp)
  80cdd8:	1885883a 	add	r2,r3,r2
  80cddc:	10800003 	ldbu	r2,0(r2)
  80cde0:	20800005 	stb	r2,0(r4)
  80cde4:	e0bff717 	ldw	r2,-36(fp)
  80cde8:	10800044 	addi	r2,r2,1
  80cdec:	e0bff715 	stw	r2,-36(fp)
  80cdf0:	003fd806 	br	80cd54 <find_file_in_directory+0xbc>
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
  80cdf4:	e0bfed17 	ldw	r2,-76(fp)
  80cdf8:	1004c03a 	cmpne	r2,r2,zero
  80cdfc:	10003f1e 	bne	r2,zero,80cefc <find_file_in_directory+0x264>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80ce00:	00802074 	movhi	r2,129
  80ce04:	10886204 	addi	r2,r2,8584
  80ce08:	1080050b 	ldhu	r2,20(r2)
  80ce0c:	1008917a 	slli	r4,r2,5
  80ce10:	00802074 	movhi	r2,129
  80ce14:	10886204 	addi	r2,r2,8584
  80ce18:	1140030b 	ldhu	r5,12(r2)
  80ce1c:	08006300 	call	800630 <__divsi3>
  80ce20:	e0bffa15 	stw	r2,-24(fp)
        int sector_index;

        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80ce24:	e03ffb15 	stw	zero,-20(fp)
  80ce28:	e0fffb17 	ldw	r3,-20(fp)
  80ce2c:	e0bffa17 	ldw	r2,-24(fp)
  80ce30:	18808f0e 	bge	r3,r2,80d070 <find_file_in_directory+0x3d8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80ce34:	00802074 	movhi	r2,129
  80ce38:	10886204 	addi	r2,r2,8584
  80ce3c:	10c01317 	ldw	r3,76(r2)
  80ce40:	e0bffb17 	ldw	r2,-20(fp)
  80ce44:	1889883a 	add	r4,r3,r2
  80ce48:	d1602217 	ldw	r5,-32632(gp)
  80ce4c:	080b3240 	call	80b324 <Read_Sector_Data>
  80ce50:	1005003a 	cmpeq	r2,r2,zero
  80ce54:	1000861e 	bne	r2,zero,80d070 <find_file_in_directory+0x3d8>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;

                for (file_counter = 0; file_counter < 16; file_counter++)
  80ce58:	e03ffc15 	stw	zero,-16(fp)
  80ce5c:	e0bffc17 	ldw	r2,-16(fp)
  80ce60:	10800408 	cmpgei	r2,r2,16
  80ce64:	10001d1e 	bne	r2,zero,80cedc <find_file_in_directory+0x244>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
  80ce68:	e0bffc17 	ldw	r2,-16(fp)
  80ce6c:	1008917a 	slli	r4,r2,5
  80ce70:	e17fef17 	ldw	r5,-68(fp)
  80ce74:	000d883a 	mov	r6,zero
  80ce78:	e1fffb17 	ldw	r7,-20(fp)
  80ce7c:	080b7380 	call	80b738 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  80ce80:	e0bfef17 	ldw	r2,-68(fp)
  80ce84:	10800003 	ldbu	r2,0(r2)
  80ce88:	10803960 	cmpeqi	r2,r2,229
  80ce8c:	10000f1e 	bne	r2,zero,80cecc <find_file_in_directory+0x234>
  80ce90:	e0bfef17 	ldw	r2,-68(fp)
  80ce94:	10800003 	ldbu	r2,0(r2)
  80ce98:	1005003a 	cmpeq	r2,r2,zero
  80ce9c:	10000b1e 	bne	r2,zero,80cecc <find_file_in_directory+0x234>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
  80cea0:	e17ff204 	addi	r5,fp,-56
  80cea4:	e1bff404 	addi	r6,fp,-48
  80cea8:	e13fef17 	ldw	r4,-68(fp)
  80ceac:	080c59c0 	call	80c59c <match_file_record_to_name_ext>
  80ceb0:	e0bffd15 	stw	r2,-12(fp)

                        if (match)
  80ceb4:	e0bffd17 	ldw	r2,-12(fp)
  80ceb8:	1005003a 	cmpeq	r2,r2,zero
  80cebc:	1000031e 	bne	r2,zero,80cecc <find_file_in_directory+0x234>
                        {
                            result = true;
  80cec0:	00800044 	movi	r2,1
  80cec4:	e0bff915 	stw	r2,-28(fp)
                            break;
  80cec8:	00000406 	br	80cedc <find_file_in_directory+0x244>
  80cecc:	e0bffc17 	ldw	r2,-16(fp)
  80ced0:	10800044 	addi	r2,r2,1
  80ced4:	e0bffc15 	stw	r2,-16(fp)
  80ced8:	003fe006 	br	80ce5c <find_file_in_directory+0x1c4>
                        }
                    }
                }
            }
            else
            {
                break;
            }
            if (result)
  80cedc:	e0bff917 	ldw	r2,-28(fp)
  80cee0:	1005003a 	cmpeq	r2,r2,zero
  80cee4:	1000011e 	bne	r2,zero,80ceec <find_file_in_directory+0x254>
            {
                break;
  80cee8:	00006106 	br	80d070 <find_file_in_directory+0x3d8>
  80ceec:	e0bffb17 	ldw	r2,-20(fp)
  80cef0:	10800044 	addi	r2,r2,1
  80cef4:	e0bffb15 	stw	r2,-20(fp)
  80cef8:	003fcb06 	br	80ce28 <find_file_in_directory+0x190>
            }
        }
    }
    else
    {
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80cefc:	e0bff617 	ldw	r2,-40(fp)
  80cf00:	113fff84 	addi	r4,r2,-2
  80cf04:	00802074 	movhi	r2,129
  80cf08:	10886204 	addi	r2,r2,8584
  80cf0c:	11400383 	ldbu	r5,14(r2)
  80cf10:	08006ec0 	call	8006ec <__mulsi3>
  80cf14:	1007883a 	mov	r3,r2
  80cf18:	00802074 	movhi	r2,129
  80cf1c:	10886204 	addi	r2,r2,8584
  80cf20:	10801417 	ldw	r2,80(r2)
  80cf24:	1885883a 	add	r2,r3,r2
  80cf28:	e0bffd15 	stw	r2,-12(fp)
            int sector_index;

            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80cf2c:	e03ffc15 	stw	zero,-16(fp)
  80cf30:	00802074 	movhi	r2,129
  80cf34:	10886204 	addi	r2,r2,8584
  80cf38:	10c00383 	ldbu	r3,14(r2)
  80cf3c:	e0bffc17 	ldw	r2,-16(fp)
  80cf40:	10c0300e 	bge	r2,r3,80d004 <find_file_in_directory+0x36c>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  80cf44:	e0fffc17 	ldw	r3,-16(fp)
  80cf48:	e0bffd17 	ldw	r2,-12(fp)
  80cf4c:	1889883a 	add	r4,r3,r2
  80cf50:	d1602217 	ldw	r5,-32632(gp)
  80cf54:	080b3240 	call	80b324 <Read_Sector_Data>
  80cf58:	1005003a 	cmpeq	r2,r2,zero
  80cf5c:	1000291e 	bne	r2,zero,80d004 <find_file_in_directory+0x36c>
                {
                    int file_counter;

                    for (file_counter = 0; file_counter < 16; file_counter++)
  80cf60:	e03ffb15 	stw	zero,-20(fp)
  80cf64:	e0bffb17 	ldw	r2,-20(fp)
  80cf68:	10800408 	cmpgei	r2,r2,16
  80cf6c:	10001d1e 	bne	r2,zero,80cfe4 <find_file_in_directory+0x34c>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
  80cf70:	e0bffb17 	ldw	r2,-20(fp)
  80cf74:	1008917a 	slli	r4,r2,5
  80cf78:	e17fef17 	ldw	r5,-68(fp)
  80cf7c:	e1bff617 	ldw	r6,-40(fp)
  80cf80:	e1fffc17 	ldw	r7,-16(fp)
  80cf84:	080b7380 	call	80b738 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
  80cf88:	e0bfef17 	ldw	r2,-68(fp)
  80cf8c:	10800003 	ldbu	r2,0(r2)
  80cf90:	10803960 	cmpeqi	r2,r2,229
  80cf94:	10000f1e 	bne	r2,zero,80cfd4 <find_file_in_directory+0x33c>
  80cf98:	e0bfef17 	ldw	r2,-68(fp)
  80cf9c:	10800003 	ldbu	r2,0(r2)
  80cfa0:	1005003a 	cmpeq	r2,r2,zero
  80cfa4:	10000b1e 	bne	r2,zero,80cfd4 <find_file_in_directory+0x33c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
  80cfa8:	e17ff204 	addi	r5,fp,-56
  80cfac:	e1bff404 	addi	r6,fp,-48
  80cfb0:	e13fef17 	ldw	r4,-68(fp)
  80cfb4:	080c59c0 	call	80c59c <match_file_record_to_name_ext>
  80cfb8:	e0bffa15 	stw	r2,-24(fp)

                            if (match)
  80cfbc:	e0bffa17 	ldw	r2,-24(fp)
  80cfc0:	1005003a 	cmpeq	r2,r2,zero
  80cfc4:	1000031e 	bne	r2,zero,80cfd4 <find_file_in_directory+0x33c>
                            {
                                result = true;
  80cfc8:	00800044 	movi	r2,1
  80cfcc:	e0bff915 	stw	r2,-28(fp)
                                break;
  80cfd0:	00000406 	br	80cfe4 <find_file_in_directory+0x34c>
  80cfd4:	e0bffb17 	ldw	r2,-20(fp)
  80cfd8:	10800044 	addi	r2,r2,1
  80cfdc:	e0bffb15 	stw	r2,-20(fp)
  80cfe0:	003fe006 	br	80cf64 <find_file_in_directory+0x2cc>
                            }
                        }
                    }
                }
                else
                {
                    break;
                }
                if (result)
  80cfe4:	e0bff917 	ldw	r2,-28(fp)
  80cfe8:	1005003a 	cmpeq	r2,r2,zero
  80cfec:	1000011e 	bne	r2,zero,80cff4 <find_file_in_directory+0x35c>
                {
                    break;
  80cff0:	00000406 	br	80d004 <find_file_in_directory+0x36c>
  80cff4:	e0bffc17 	ldw	r2,-16(fp)
  80cff8:	10800044 	addi	r2,r2,1
  80cffc:	e0bffc15 	stw	r2,-16(fp)
  80d000:	003fcb06 	br	80cf30 <find_file_in_directory+0x298>
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
  80d004:	e0bff917 	ldw	r2,-28(fp)
  80d008:	1004c03a 	cmpne	r2,r2,zero
  80d00c:	1000111e 	bne	r2,zero,80d054 <find_file_in_directory+0x3bc>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
  80d010:	e17ffe04 	addi	r5,fp,-8
  80d014:	e13ff617 	ldw	r4,-40(fp)
  80d018:	080b4080 	call	80b408 <get_cluster_flag>
  80d01c:	1005003a 	cmpeq	r2,r2,zero
  80d020:	10000a1e 	bne	r2,zero,80d04c <find_file_in_directory+0x3b4>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  80d024:	e0bffe0b 	ldhu	r2,-8(fp)
  80d028:	10fffe0c 	andi	r3,r2,65528
  80d02c:	00bffe14 	movui	r2,65528
  80d030:	1880021e 	bne	r3,r2,80d03c <find_file_in_directory+0x3a4>
					{
						return false;
  80d034:	e03fff15 	stw	zero,-4(fp)
  80d038:	00000f06 	br	80d078 <find_file_in_directory+0x3e0>
					}
					cluster = (new_cluster & 0x0000fff8);
  80d03c:	e0bffe0b 	ldhu	r2,-8(fp)
  80d040:	10bffe0c 	andi	r2,r2,65528
  80d044:	e0bff615 	stw	r2,-40(fp)
  80d048:	00000206 	br	80d054 <find_file_in_directory+0x3bc>
				}
				else
                {
                    // Directory path is invalid.
                    return false;
  80d04c:	e03fff15 	stw	zero,-4(fp)
  80d050:	00000906 	br	80d078 <find_file_in_directory+0x3e0>
                }
            }
        } while ((cluster < 0x0000fff8) && (result == false));
  80d054:	e0fff617 	ldw	r3,-40(fp)
  80d058:	00bffdd4 	movui	r2,65527
  80d05c:	10c00416 	blt	r2,r3,80d070 <find_file_in_directory+0x3d8>
  80d060:	e0bff917 	ldw	r2,-28(fp)
  80d064:	1004c03a 	cmpne	r2,r2,zero
  80d068:	1000011e 	bne	r2,zero,80d070 <find_file_in_directory+0x3d8>
  80d06c:	003fa306 	br	80cefc <find_file_in_directory+0x264>
    }

    return result;
  80d070:	e0bff917 	ldw	r2,-28(fp)
  80d074:	e0bfff15 	stw	r2,-4(fp)
}
  80d078:	e0bfff17 	ldw	r2,-4(fp)
  80d07c:	dfc01417 	ldw	ra,80(sp)
  80d080:	df001317 	ldw	fp,76(sp)
  80d084:	dec01504 	addi	sp,sp,84
  80d088:	f800283a 	ret

0080d08c <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
  80d08c:	defff504 	addi	sp,sp,-44
  80d090:	dfc00a15 	stw	ra,40(sp)
  80d094:	df000915 	stw	fp,36(sp)
  80d098:	df000904 	addi	fp,sp,36
  80d09c:	e13ff715 	stw	r4,-36(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
  80d0a0:	00802074 	movhi	r2,129
  80d0a4:	10886204 	addi	r2,r2,8584
  80d0a8:	10801117 	ldw	r2,68(r2)
  80d0ac:	e0bff815 	stw	r2,-32(fp)
    unsigned int cluster_index = 2;
  80d0b0:	00800084 	movi	r2,2
  80d0b4:	e0bff915 	stw	r2,-28(fp)
    short int cluster = -1;
  80d0b8:	00bfffc4 	movi	r2,-1
  80d0bc:	e0bffa0d 	sth	r2,-24(fp)
    bool result = false;
  80d0c0:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
  80d0c4:	e03ffc15 	stw	zero,-16(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
  80d0c8:	00802074 	movhi	r2,129
  80d0cc:	10886204 	addi	r2,r2,8584
  80d0d0:	10801417 	ldw	r2,80(r2)
  80d0d4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
  80d0d8:	00802074 	movhi	r2,129
  80d0dc:	10886204 	addi	r2,r2,8584
  80d0e0:	1080058b 	ldhu	r2,22(r2)
  80d0e4:	e0bffe15 	stw	r2,-8(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
  80d0e8:	00802074 	movhi	r2,129
  80d0ec:	10886204 	addi	r2,r2,8584
  80d0f0:	10800917 	ldw	r2,36(r2)
  80d0f4:	e0bfff15 	stw	r2,-4(fp)

	if (less_than_32 > greater_than_32)
  80d0f8:	e0fffe17 	ldw	r3,-8(fp)
  80d0fc:	e0bfff17 	ldw	r2,-4(fp)
  80d100:	10c00a2e 	bgeu	r2,r3,80d12c <find_first_empty_cluster+0xa0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  80d104:	e0fffe17 	ldw	r3,-8(fp)
  80d108:	e0bffd17 	ldw	r2,-12(fp)
  80d10c:	1889c83a 	sub	r4,r3,r2
  80d110:	00802074 	movhi	r2,129
  80d114:	10886204 	addi	r2,r2,8584
  80d118:	11400383 	ldbu	r5,14(r2)
  80d11c:	08006cc0 	call	8006cc <__udivsi3>
  80d120:	10800044 	addi	r2,r2,1
  80d124:	e0bffc15 	stw	r2,-16(fp)
  80d128:	00000906 	br	80d150 <find_first_empty_cluster+0xc4>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
  80d12c:	e0ffff17 	ldw	r3,-4(fp)
  80d130:	e0bffd17 	ldw	r2,-12(fp)
  80d134:	1889c83a 	sub	r4,r3,r2
  80d138:	00802074 	movhi	r2,129
  80d13c:	10886204 	addi	r2,r2,8584
  80d140:	11400383 	ldbu	r5,14(r2)
  80d144:	08006cc0 	call	8006cc <__udivsi3>
  80d148:	10800044 	addi	r2,r2,1
  80d14c:	e0bffc15 	stw	r2,-16(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
  80d150:	00802074 	movhi	r2,129
  80d154:	10886204 	addi	r2,r2,8584
  80d158:	10c01217 	ldw	r3,72(r2)
  80d15c:	e0bff817 	ldw	r2,-32(fp)
  80d160:	18802226 	beq	r3,r2,80d1ec <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
  80d164:	e13ff817 	ldw	r4,-32(fp)
  80d168:	d1602217 	ldw	r5,-32632(gp)
  80d16c:	080b3240 	call	80b324 <Read_Sector_Data>
  80d170:	1005003a 	cmpeq	r2,r2,zero
  80d174:	1000151e 	bne	r2,zero,80d1cc <find_first_empty_cluster+0x140>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
  80d178:	d1202417 	ldw	r4,-32624(gp)
  80d17c:	e0bff917 	ldw	r2,-28(fp)
  80d180:	10c03fcc 	andi	r3,r2,255
  80d184:	1805883a 	mov	r2,r3
  80d188:	10c7883a 	add	r3,r2,r3
  80d18c:	20800a17 	ldw	r2,40(r4)
  80d190:	1885883a 	add	r2,r3,r2
  80d194:	1080002b 	ldhuio	r2,0(r2)
  80d198:	e0bffa0d 	sth	r2,-24(fp)
                if (cluster == 0)
  80d19c:	e0bffa0f 	ldh	r2,-24(fp)
  80d1a0:	1004c03a 	cmpne	r2,r2,zero
  80d1a4:	1000011e 	bne	r2,zero,80d1ac <find_first_empty_cluster+0x120>
                {
                    // Free cluster found.
                    break;
  80d1a8:	00000806 	br	80d1cc <find_first_empty_cluster+0x140>
                }
                else
                {
                    cluster_index++;
  80d1ac:	e0bff917 	ldw	r2,-28(fp)
  80d1b0:	10800044 	addi	r2,r2,1
  80d1b4:	e0bff915 	stw	r2,-28(fp)
                }
            } while ((cluster_index % 256) != 0);
  80d1b8:	e0bff917 	ldw	r2,-28(fp)
  80d1bc:	10803fcc 	andi	r2,r2,255
  80d1c0:	1005003a 	cmpeq	r2,r2,zero
  80d1c4:	1000011e 	bne	r2,zero,80d1cc <find_first_empty_cluster+0x140>
  80d1c8:	003feb06 	br	80d178 <find_first_empty_cluster+0xec>
        }
        if (cluster == 0)
  80d1cc:	e0bffa0f 	ldh	r2,-24(fp)
  80d1d0:	1004c03a 	cmpne	r2,r2,zero
  80d1d4:	1000011e 	bne	r2,zero,80d1dc <find_first_empty_cluster+0x150>
        {
            break;
  80d1d8:	00000406 	br	80d1ec <find_first_empty_cluster+0x160>
        }
        sector++;
  80d1dc:	e0bff817 	ldw	r2,-32(fp)
  80d1e0:	10800044 	addi	r2,r2,1
  80d1e4:	e0bff815 	stw	r2,-32(fp)
  80d1e8:	003fd906 	br	80d150 <find_first_empty_cluster+0xc4>
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
  80d1ec:	e0bffa0f 	ldh	r2,-24(fp)
  80d1f0:	1004c03a 	cmpne	r2,r2,zero
  80d1f4:	1000081e 	bne	r2,zero,80d218 <find_first_empty_cluster+0x18c>
  80d1f8:	e0fffa0f 	ldh	r3,-24(fp)
  80d1fc:	e0bffc17 	ldw	r2,-16(fp)
  80d200:	10c00536 	bltu	r2,r3,80d218 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
  80d204:	e0bff717 	ldw	r2,-36(fp)
  80d208:	e0fff917 	ldw	r3,-28(fp)
  80d20c:	10c00015 	stw	r3,0(r2)
		result = true;
  80d210:	00800044 	movi	r2,1
  80d214:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
  80d218:	e0bffb17 	ldw	r2,-20(fp)
}
  80d21c:	dfc00a17 	ldw	ra,40(sp)
  80d220:	df000917 	ldw	fp,36(sp)
  80d224:	dec00b04 	addi	sp,sp,44
  80d228:	f800283a 	ret

0080d22c <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
  80d22c:	defff604 	addi	sp,sp,-40
  80d230:	dfc00915 	stw	ra,36(sp)
  80d234:	df000815 	stw	fp,32(sp)
  80d238:	df000804 	addi	fp,sp,32
  80d23c:	e13ff815 	stw	r4,-32(fp)
    int result = -1;
  80d240:	00bfffc4 	movi	r2,-1
  80d244:	e0bff915 	stw	r2,-28(fp)
    int cluster = start_cluster_index;
  80d248:	e0bff817 	ldw	r2,-32(fp)
  80d24c:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80d250:	e0bffa17 	ldw	r2,-24(fp)
  80d254:	113fff84 	addi	r4,r2,-2
  80d258:	00802074 	movhi	r2,129
  80d25c:	10886204 	addi	r2,r2,8584
  80d260:	11400383 	ldbu	r5,14(r2)
  80d264:	08006ec0 	call	8006ec <__mulsi3>
  80d268:	1007883a 	mov	r3,r2
  80d26c:	00802074 	movhi	r2,129
  80d270:	10886204 	addi	r2,r2,8584
  80d274:	10801417 	ldw	r2,80(r2)
  80d278:	1885883a 	add	r2,r3,r2
  80d27c:	e0bffb15 	stw	r2,-20(fp)
        int sector_index;

        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80d280:	e03ffc15 	stw	zero,-16(fp)
  80d284:	00802074 	movhi	r2,129
  80d288:	10886204 	addi	r2,r2,8584
  80d28c:	10c00383 	ldbu	r3,14(r2)
  80d290:	e0bffc17 	ldw	r2,-16(fp)
  80d294:	10c02c0e 	bge	r2,r3,80d348 <find_first_empty_record_in_a_subdirectory+0x11c>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  80d298:	e0fffc17 	ldw	r3,-16(fp)
  80d29c:	e0bffb17 	ldw	r2,-20(fp)
  80d2a0:	1889883a 	add	r4,r3,r2
  80d2a4:	d1602217 	ldw	r5,-32632(gp)
  80d2a8:	080b3240 	call	80b324 <Read_Sector_Data>
  80d2ac:	1005003a 	cmpeq	r2,r2,zero
  80d2b0:	1000251e 	bne	r2,zero,80d348 <find_first_empty_record_in_a_subdirectory+0x11c>
            {
                int file_counter;

                for (file_counter = 0; file_counter < 16; file_counter++)
  80d2b4:	e03ffd15 	stw	zero,-12(fp)
  80d2b8:	e0bffd17 	ldw	r2,-12(fp)
  80d2bc:	10800408 	cmpgei	r2,r2,16
  80d2c0:	10001d1e 	bne	r2,zero,80d338 <find_first_empty_record_in_a_subdirectory+0x10c>
                {
                    unsigned short int leading_char;

                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  80d2c4:	d1202417 	ldw	r4,-32624(gp)
  80d2c8:	e0bffd17 	ldw	r2,-12(fp)
  80d2cc:	1006917a 	slli	r3,r2,5
  80d2d0:	20800a17 	ldw	r2,40(r4)
  80d2d4:	1885883a 	add	r2,r3,r2
  80d2d8:	10800023 	ldbuio	r2,0(r2)
  80d2dc:	10803fcc 	andi	r2,r2,255
  80d2e0:	e0bffe0d 	sth	r2,-8(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
  80d2e4:	e0bffe0b 	ldhu	r2,-8(fp)
  80d2e8:	10803960 	cmpeqi	r2,r2,229
  80d2ec:	1000031e 	bne	r2,zero,80d2fc <find_first_empty_record_in_a_subdirectory+0xd0>
  80d2f0:	e0bffe0b 	ldhu	r2,-8(fp)
  80d2f4:	1004c03a 	cmpne	r2,r2,zero
  80d2f8:	10000b1e 	bne	r2,zero,80d328 <find_first_empty_record_in_a_subdirectory+0xfc>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
  80d2fc:	e0bffc17 	ldw	r2,-16(fp)
  80d300:	1006913a 	slli	r3,r2,4
  80d304:	e0bffd17 	ldw	r2,-12(fp)
  80d308:	1885883a 	add	r2,r3,r2
  80d30c:	1006943a 	slli	r3,r2,16
  80d310:	e0bffa17 	ldw	r2,-24(fp)
  80d314:	1884b03a 	or	r2,r3,r2
  80d318:	e0bff915 	stw	r2,-28(fp)
                        return result;
  80d31c:	e0bff917 	ldw	r2,-28(fp)
  80d320:	e0bfff15 	stw	r2,-4(fp)
  80d324:	00004806 	br	80d448 <find_first_empty_record_in_a_subdirectory+0x21c>
  80d328:	e0bffd17 	ldw	r2,-12(fp)
  80d32c:	10800044 	addi	r2,r2,1
  80d330:	e0bffd15 	stw	r2,-12(fp)
  80d334:	003fe006 	br	80d2b8 <find_first_empty_record_in_a_subdirectory+0x8c>
  80d338:	e0bffc17 	ldw	r2,-16(fp)
  80d33c:	10800044 	addi	r2,r2,1
  80d340:	e0bffc15 	stw	r2,-16(fp)
  80d344:	003fcf06 	br	80d284 <find_first_empty_record_in_a_subdirectory+0x58>
                    }
                }
            }
            else
            {
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
  80d348:	e0bff917 	ldw	r2,-28(fp)
  80d34c:	1004403a 	cmpge	r2,r2,zero
  80d350:	1000341e 	bne	r2,zero,80d424 <find_first_empty_record_in_a_subdirectory+0x1f8>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
  80d354:	e17ffe04 	addi	r5,fp,-8
  80d358:	e13ffa17 	ldw	r4,-24(fp)
  80d35c:	080b4080 	call	80b408 <get_cluster_flag>
  80d360:	1005003a 	cmpeq	r2,r2,zero
  80d364:	10002d1e 	bne	r2,zero,80d41c <find_first_empty_record_in_a_subdirectory+0x1f0>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  80d368:	e0bffe0b 	ldhu	r2,-8(fp)
  80d36c:	10fffe0c 	andi	r3,r2,65528
  80d370:	00bffe14 	movui	r2,65528
  80d374:	18802b1e 	bne	r3,r2,80d424 <find_first_empty_record_in_a_subdirectory+0x1f8>
				{
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster))
  80d378:	e13ffd04 	addi	r4,fp,-12
  80d37c:	080d08c0 	call	80d08c <find_first_empty_cluster>
  80d380:	1005003a 	cmpeq	r2,r2,zero
  80d384:	1000211e 	bne	r2,zero,80d40c <find_first_empty_record_in_a_subdirectory+0x1e0>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
  80d388:	e0bffd17 	ldw	r2,-12(fp)
  80d38c:	117fffcc 	andi	r5,r2,65535
  80d390:	2960001c 	xori	r5,r5,32768
  80d394:	29600004 	addi	r5,r5,-32768
  80d398:	e13ffa17 	ldw	r4,-24(fp)
  80d39c:	01800044 	movi	r6,1
  80d3a0:	080b4b80 	call	80b4b8 <mark_cluster>
  80d3a4:	1005003a 	cmpeq	r2,r2,zero
  80d3a8:	1000181e 	bne	r2,zero,80d40c <find_first_empty_record_in_a_subdirectory+0x1e0>
  80d3ac:	e13ffd17 	ldw	r4,-12(fp)
  80d3b0:	017fffc4 	movi	r5,-1
  80d3b4:	01800044 	movi	r6,1
  80d3b8:	080b4b80 	call	80b4b8 <mark_cluster>
  80d3bc:	1005003a 	cmpeq	r2,r2,zero
  80d3c0:	1000121e 	bne	r2,zero,80d40c <find_first_empty_record_in_a_subdirectory+0x1e0>
  80d3c4:	e0bffd17 	ldw	r2,-12(fp)
  80d3c8:	117fffcc 	andi	r5,r2,65535
  80d3cc:	2960001c 	xori	r5,r5,32768
  80d3d0:	29600004 	addi	r5,r5,-32768
  80d3d4:	e13ffa17 	ldw	r4,-24(fp)
  80d3d8:	000d883a 	mov	r6,zero
  80d3dc:	080b4b80 	call	80b4b8 <mark_cluster>
  80d3e0:	1005003a 	cmpeq	r2,r2,zero
  80d3e4:	1000091e 	bne	r2,zero,80d40c <find_first_empty_record_in_a_subdirectory+0x1e0>
  80d3e8:	e13ffd17 	ldw	r4,-12(fp)
  80d3ec:	017fffc4 	movi	r5,-1
  80d3f0:	000d883a 	mov	r6,zero
  80d3f4:	080b4b80 	call	80b4b8 <mark_cluster>
  80d3f8:	1005003a 	cmpeq	r2,r2,zero
  80d3fc:	1000031e 	bne	r2,zero,80d40c <find_first_empty_record_in_a_subdirectory+0x1e0>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
  80d400:	080b2dc0 	call	80b2dc <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
  80d404:	e0bffd17 	ldw	r2,-12(fp)
  80d408:	e0bff915 	stw	r2,-28(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
  80d40c:	e0bffe0b 	ldhu	r2,-8(fp)
  80d410:	10bffe0c 	andi	r2,r2,65528
  80d414:	e0bffa15 	stw	r2,-24(fp)
  80d418:	00000206 	br	80d424 <find_first_empty_record_in_a_subdirectory+0x1f8>
				}
			}
			else
			{
				// Error encountered.
				result = -1;
  80d41c:	00bfffc4 	movi	r2,-1
  80d420:	e0bff915 	stw	r2,-28(fp)
			}
        }
    } while ((cluster < 0x0000fff8) && (result == -1));
  80d424:	e0fffa17 	ldw	r3,-24(fp)
  80d428:	00bffdd4 	movui	r2,65527
  80d42c:	10c00416 	blt	r2,r3,80d440 <find_first_empty_record_in_a_subdirectory+0x214>
  80d430:	e0bff917 	ldw	r2,-28(fp)
  80d434:	10bfffd8 	cmpnei	r2,r2,-1
  80d438:	1000011e 	bne	r2,zero,80d440 <find_first_empty_record_in_a_subdirectory+0x214>
  80d43c:	003f8406 	br	80d250 <find_first_empty_record_in_a_subdirectory+0x24>
    return result;
  80d440:	e0bff917 	ldw	r2,-28(fp)
  80d444:	e0bfff15 	stw	r2,-4(fp)
}
  80d448:	e0bfff17 	ldw	r2,-4(fp)
  80d44c:	dfc00917 	ldw	ra,36(sp)
  80d450:	df000817 	ldw	fp,32(sp)
  80d454:	dec00a04 	addi	sp,sp,40
  80d458:	f800283a 	ret

0080d45c <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
  80d45c:	defff804 	addi	sp,sp,-32
  80d460:	dfc00715 	stw	ra,28(sp)
  80d464:	df000615 	stw	fp,24(sp)
  80d468:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80d46c:	00802074 	movhi	r2,129
  80d470:	10886204 	addi	r2,r2,8584
  80d474:	1080050b 	ldhu	r2,20(r2)
  80d478:	1008917a 	slli	r4,r2,5
  80d47c:	00802074 	movhi	r2,129
  80d480:	10886204 	addi	r2,r2,8584
  80d484:	1140030b 	ldhu	r5,12(r2)
  80d488:	08006300 	call	800630 <__divsi3>
  80d48c:	e0bffa15 	stw	r2,-24(fp)
    int sector_index;
    int result = -1;
  80d490:	00bfffc4 	movi	r2,-1
  80d494:	e0bffc15 	stw	r2,-16(fp)

    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
  80d498:	e03ffb15 	stw	zero,-20(fp)
  80d49c:	e0fffb17 	ldw	r3,-20(fp)
  80d4a0:	e0bffa17 	ldw	r2,-24(fp)
  80d4a4:	18802c0e 	bge	r3,r2,80d558 <find_first_empty_record_in_root_directory+0xfc>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80d4a8:	00802074 	movhi	r2,129
  80d4ac:	10886204 	addi	r2,r2,8584
  80d4b0:	10c01317 	ldw	r3,76(r2)
  80d4b4:	e0bffb17 	ldw	r2,-20(fp)
  80d4b8:	1889883a 	add	r4,r3,r2
  80d4bc:	d1602217 	ldw	r5,-32632(gp)
  80d4c0:	080b3240 	call	80b324 <Read_Sector_Data>
  80d4c4:	1005003a 	cmpeq	r2,r2,zero
  80d4c8:	1000231e 	bne	r2,zero,80d558 <find_first_empty_record_in_root_directory+0xfc>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;

            for (file_counter = 0; file_counter < 16; file_counter++)
  80d4cc:	e03ffd15 	stw	zero,-12(fp)
  80d4d0:	e0bffd17 	ldw	r2,-12(fp)
  80d4d4:	10800408 	cmpgei	r2,r2,16
  80d4d8:	10001b1e 	bne	r2,zero,80d548 <find_first_empty_record_in_root_directory+0xec>
            {
                unsigned short int leading_char;

                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
  80d4dc:	d1202417 	ldw	r4,-32624(gp)
  80d4e0:	e0bffd17 	ldw	r2,-12(fp)
  80d4e4:	1006917a 	slli	r3,r2,5
  80d4e8:	20800a17 	ldw	r2,40(r4)
  80d4ec:	1885883a 	add	r2,r3,r2
  80d4f0:	10800023 	ldbuio	r2,0(r2)
  80d4f4:	10803fcc 	andi	r2,r2,255
  80d4f8:	e0bffe0d 	sth	r2,-8(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
  80d4fc:	e0bffe0b 	ldhu	r2,-8(fp)
  80d500:	10803960 	cmpeqi	r2,r2,229
  80d504:	1000031e 	bne	r2,zero,80d514 <find_first_empty_record_in_root_directory+0xb8>
  80d508:	e0bffe0b 	ldhu	r2,-8(fp)
  80d50c:	1004c03a 	cmpne	r2,r2,zero
  80d510:	1000091e 	bne	r2,zero,80d538 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
  80d514:	e0bffb17 	ldw	r2,-20(fp)
  80d518:	1006913a 	slli	r3,r2,4
  80d51c:	e0bffd17 	ldw	r2,-12(fp)
  80d520:	1885883a 	add	r2,r3,r2
  80d524:	1004943a 	slli	r2,r2,16
  80d528:	e0bffc15 	stw	r2,-16(fp)
                    return result;
  80d52c:	e0bffc17 	ldw	r2,-16(fp)
  80d530:	e0bfff15 	stw	r2,-4(fp)
  80d534:	00000a06 	br	80d560 <find_first_empty_record_in_root_directory+0x104>
  80d538:	e0bffd17 	ldw	r2,-12(fp)
  80d53c:	10800044 	addi	r2,r2,1
  80d540:	e0bffd15 	stw	r2,-12(fp)
  80d544:	003fe206 	br	80d4d0 <find_first_empty_record_in_root_directory+0x74>
  80d548:	e0bffb17 	ldw	r2,-20(fp)
  80d54c:	10800044 	addi	r2,r2,1
  80d550:	e0bffb15 	stw	r2,-20(fp)
  80d554:	003fd106 	br	80d49c <find_first_empty_record_in_root_directory+0x40>
                }
            }
        }
        else
        {
            break;
        }
    }
    return result;
  80d558:	e0bffc17 	ldw	r2,-16(fp)
  80d55c:	e0bfff15 	stw	r2,-4(fp)
}
  80d560:	e0bfff17 	ldw	r2,-4(fp)
  80d564:	dfc00717 	ldw	ra,28(sp)
  80d568:	df000617 	ldw	fp,24(sp)
  80d56c:	dec00804 	addi	sp,sp,32
  80d570:	f800283a 	ret

0080d574 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
  80d574:	defffa04 	addi	sp,sp,-24
  80d578:	df000515 	stw	fp,20(sp)
  80d57c:	df000504 	addi	fp,sp,20
  80d580:	e13ffb15 	stw	r4,-20(fp)
  80d584:	e17ffc15 	stw	r5,-16(fp)
  80d588:	e1bffd15 	stw	r6,-12(fp)
    int counter;
    int local = 0;
  80d58c:	e03fff15 	stw	zero,-4(fp)

    for(counter = 0; counter < 8; counter++)
  80d590:	e03ffe15 	stw	zero,-8(fp)
  80d594:	e0bffe17 	ldw	r2,-8(fp)
  80d598:	10800208 	cmpgei	r2,r2,8
  80d59c:	1000211e 	bne	r2,zero,80d624 <convert_filename_to_name_extension+0xb0>
    {
        if (filename[local] != '.')
  80d5a0:	e0fffb17 	ldw	r3,-20(fp)
  80d5a4:	e0bfff17 	ldw	r2,-4(fp)
  80d5a8:	1885883a 	add	r2,r3,r2
  80d5ac:	10800007 	ldb	r2,0(r2)
  80d5b0:	10800ba0 	cmpeqi	r2,r2,46
  80d5b4:	1000121e 	bne	r2,zero,80d600 <convert_filename_to_name_extension+0x8c>
        {
            name[counter] = filename[local];
  80d5b8:	e0fffc17 	ldw	r3,-16(fp)
  80d5bc:	e0bffe17 	ldw	r2,-8(fp)
  80d5c0:	1889883a 	add	r4,r3,r2
  80d5c4:	e0fffb17 	ldw	r3,-20(fp)
  80d5c8:	e0bfff17 	ldw	r2,-4(fp)
  80d5cc:	1885883a 	add	r2,r3,r2
  80d5d0:	10800003 	ldbu	r2,0(r2)
  80d5d4:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
  80d5d8:	e0fffb17 	ldw	r3,-20(fp)
  80d5dc:	e0bfff17 	ldw	r2,-4(fp)
  80d5e0:	1885883a 	add	r2,r3,r2
  80d5e4:	10800007 	ldb	r2,0(r2)
  80d5e8:	1005003a 	cmpeq	r2,r2,zero
  80d5ec:	1000091e 	bne	r2,zero,80d614 <convert_filename_to_name_extension+0xa0>
  80d5f0:	e0bfff17 	ldw	r2,-4(fp)
  80d5f4:	10800044 	addi	r2,r2,1
  80d5f8:	e0bfff15 	stw	r2,-4(fp)
  80d5fc:	00000506 	br	80d614 <convert_filename_to_name_extension+0xa0>
        }
        else
        {
            name[counter] = ' ';
  80d600:	e0fffc17 	ldw	r3,-16(fp)
  80d604:	e0bffe17 	ldw	r2,-8(fp)
  80d608:	1887883a 	add	r3,r3,r2
  80d60c:	00800804 	movi	r2,32
  80d610:	18800005 	stb	r2,0(r3)
  80d614:	e0bffe17 	ldw	r2,-8(fp)
  80d618:	10800044 	addi	r2,r2,1
  80d61c:	e0bffe15 	stw	r2,-8(fp)
  80d620:	003fdc06 	br	80d594 <convert_filename_to_name_extension+0x20>
        }
    }
    if (filename[local] == '.') local++;
  80d624:	e0fffb17 	ldw	r3,-20(fp)
  80d628:	e0bfff17 	ldw	r2,-4(fp)
  80d62c:	1885883a 	add	r2,r3,r2
  80d630:	10800007 	ldb	r2,0(r2)
  80d634:	10800b98 	cmpnei	r2,r2,46
  80d638:	1000031e 	bne	r2,zero,80d648 <convert_filename_to_name_extension+0xd4>
  80d63c:	e0bfff17 	ldw	r2,-4(fp)
  80d640:	10800044 	addi	r2,r2,1
  80d644:	e0bfff15 	stw	r2,-4(fp)
    for(counter = 0; counter < 3; counter++)
  80d648:	e03ffe15 	stw	zero,-8(fp)
  80d64c:	e0bffe17 	ldw	r2,-8(fp)
  80d650:	108000c8 	cmpgei	r2,r2,3
  80d654:	10001b1e 	bne	r2,zero,80d6c4 <convert_filename_to_name_extension+0x150>
    {
        if (filename[local] != 0)
  80d658:	e0fffb17 	ldw	r3,-20(fp)
  80d65c:	e0bfff17 	ldw	r2,-4(fp)
  80d660:	1885883a 	add	r2,r3,r2
  80d664:	10800007 	ldb	r2,0(r2)
  80d668:	1005003a 	cmpeq	r2,r2,zero
  80d66c:	10000c1e 	bne	r2,zero,80d6a0 <convert_filename_to_name_extension+0x12c>
        {
            extension[counter] = filename[local];
  80d670:	e0fffd17 	ldw	r3,-12(fp)
  80d674:	e0bffe17 	ldw	r2,-8(fp)
  80d678:	1889883a 	add	r4,r3,r2
  80d67c:	e0fffb17 	ldw	r3,-20(fp)
  80d680:	e0bfff17 	ldw	r2,-4(fp)
  80d684:	1885883a 	add	r2,r3,r2
  80d688:	10800003 	ldbu	r2,0(r2)
  80d68c:	20800005 	stb	r2,0(r4)
            local++;
  80d690:	e0bfff17 	ldw	r2,-4(fp)
  80d694:	10800044 	addi	r2,r2,1
  80d698:	e0bfff15 	stw	r2,-4(fp)
  80d69c:	00000506 	br	80d6b4 <convert_filename_to_name_extension+0x140>
        }
        else
        {
            extension[counter] = ' ';
  80d6a0:	e0fffd17 	ldw	r3,-12(fp)
  80d6a4:	e0bffe17 	ldw	r2,-8(fp)
  80d6a8:	1887883a 	add	r3,r3,r2
  80d6ac:	00800804 	movi	r2,32
  80d6b0:	18800005 	stb	r2,0(r3)
  80d6b4:	e0bffe17 	ldw	r2,-8(fp)
  80d6b8:	10800044 	addi	r2,r2,1
  80d6bc:	e0bffe15 	stw	r2,-8(fp)
  80d6c0:	003fe206 	br	80d64c <convert_filename_to_name_extension+0xd8>
        }
    }

}
  80d6c4:	df000517 	ldw	fp,20(sp)
  80d6c8:	dec00604 	addi	sp,sp,24
  80d6cc:	f800283a 	ret

0080d6d0 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
  80d6d0:	deffee04 	addi	sp,sp,-72
  80d6d4:	dfc01115 	stw	ra,68(sp)
  80d6d8:	df001015 	stw	fp,64(sp)
  80d6dc:	dc000f15 	stw	r16,60(sp)
  80d6e0:	df001004 	addi	fp,sp,64
  80d6e4:	e13ff015 	stw	r4,-64(fp)
  80d6e8:	e17ff115 	stw	r5,-60(fp)
  80d6ec:	e1bff215 	stw	r6,-56(fp)
    unsigned int cluster_number;
    bool result = false;
  80d6f0:	e03ff415 	stw	zero,-48(fp)

    if (find_first_empty_cluster(&cluster_number))
  80d6f4:	e13ff304 	addi	r4,fp,-52
  80d6f8:	080d08c0 	call	80d08c <find_first_empty_cluster>
  80d6fc:	1005003a 	cmpeq	r2,r2,zero
  80d700:	1000ab1e 	bne	r2,zero,80d9b0 <create_file+0x2e0>
    {
        int record_index;

        if (home_dir->file_record_cluster == 0)
  80d704:	e0bff217 	ldw	r2,-56(fp)
  80d708:	10800a17 	ldw	r2,40(r2)
  80d70c:	1004c03a 	cmpne	r2,r2,zero
  80d710:	1000031e 	bne	r2,zero,80d720 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
  80d714:	080d45c0 	call	80d45c <find_first_empty_record_in_root_directory>
  80d718:	e0bff515 	stw	r2,-44(fp)
  80d71c:	00000406 	br	80d730 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);
  80d720:	e0bff217 	ldw	r2,-56(fp)
  80d724:	1100058b 	ldhu	r4,22(r2)
  80d728:	080d22c0 	call	80d22c <find_first_empty_record_in_a_subdirectory>
  80d72c:	e0bff515 	stw	r2,-44(fp)
        }
        if (record_index >= 0)
  80d730:	e0bff517 	ldw	r2,-44(fp)
  80d734:	1004803a 	cmplt	r2,r2,zero
  80d738:	10009d1e 	bne	r2,zero,80d9b0 <create_file+0x2e0>
        {
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
  80d73c:	e13ff017 	ldw	r4,-64(fp)
  80d740:	080c5000 	call	80c500 <get_dir_divider_location>
  80d744:	e0bff715 	stw	r2,-36(fp)
            int last_dir_separator = 0;
  80d748:	e03ff815 	stw	zero,-32(fp)

            // Skip through all directory separators.
            while (location > 0)
  80d74c:	e0bff717 	ldw	r2,-36(fp)
  80d750:	10800050 	cmplti	r2,r2,1
  80d754:	10000b1e 	bne	r2,zero,80d784 <create_file+0xb4>
            {
                last_dir_separator = last_dir_separator+location+1;
  80d758:	e0fff817 	ldw	r3,-32(fp)
  80d75c:	e0bff717 	ldw	r2,-36(fp)
  80d760:	1885883a 	add	r2,r3,r2
  80d764:	10800044 	addi	r2,r2,1
  80d768:	e0bff815 	stw	r2,-32(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
  80d76c:	e0fff017 	ldw	r3,-64(fp)
  80d770:	e0bff817 	ldw	r2,-32(fp)
  80d774:	1889883a 	add	r4,r3,r2
  80d778:	080c5000 	call	80c500 <get_dir_divider_location>
  80d77c:	e0bff715 	stw	r2,-36(fp)
  80d780:	003ff206 	br	80d74c <create_file+0x7c>
            }

            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
  80d784:	e0fff017 	ldw	r3,-64(fp)
  80d788:	e0bff817 	ldw	r2,-32(fp)
  80d78c:	1889883a 	add	r4,r3,r2
  80d790:	e0bff117 	ldw	r2,-60(fp)
  80d794:	11800204 	addi	r6,r2,8
  80d798:	e17ff117 	ldw	r5,-60(fp)
  80d79c:	080d5740 	call	80d574 <convert_filename_to_name_extension>

            file_record->attributes = 0;
  80d7a0:	e0bff117 	ldw	r2,-60(fp)
  80d7a4:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
  80d7a8:	e0bff117 	ldw	r2,-60(fp)
  80d7ac:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
  80d7b0:	e0bff117 	ldw	r2,-60(fp)
  80d7b4:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
  80d7b8:	e0bff117 	ldw	r2,-60(fp)
  80d7bc:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
  80d7c0:	e0bff117 	ldw	r2,-60(fp)
  80d7c4:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
  80d7c8:	e0bff117 	ldw	r2,-60(fp)
  80d7cc:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
  80d7d0:	e0fff117 	ldw	r3,-60(fp)
  80d7d4:	e0bff317 	ldw	r2,-52(fp)
  80d7d8:	1880058d 	sth	r2,22(r3)
            file_record->file_size_in_bytes = 0;
  80d7dc:	e0bff117 	ldw	r2,-60(fp)
  80d7e0:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
  80d7e4:	e0fff117 	ldw	r3,-60(fp)
  80d7e8:	e0bff317 	ldw	r2,-52(fp)
  80d7ec:	18800715 	stw	r2,28(r3)
            file_record->current_sector_in_cluster = 0;
  80d7f0:	e0bff117 	ldw	r2,-60(fp)
  80d7f4:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
  80d7f8:	e0bff117 	ldw	r2,-60(fp)
  80d7fc:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
  80d800:	e0fff117 	ldw	r3,-60(fp)
  80d804:	e0bff517 	ldw	r2,-44(fp)
  80d808:	10bfffcc 	andi	r2,r2,65535
  80d80c:	18800a15 	stw	r2,40(r3)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
  80d810:	e0bff117 	ldw	r2,-60(fp)
  80d814:	e0bff915 	stw	r2,-28(fp)
  80d818:	e0bff517 	ldw	r2,-44(fp)
  80d81c:	1005d43a 	srai	r2,r2,16
  80d820:	10bfffcc 	andi	r2,r2,65535
  80d824:	e0bffa15 	stw	r2,-24(fp)
  80d828:	e0fffa17 	ldw	r3,-24(fp)
  80d82c:	1804403a 	cmpge	r2,r3,zero
  80d830:	1000031e 	bne	r2,zero,80d840 <create_file+0x170>
  80d834:	e0bffa17 	ldw	r2,-24(fp)
  80d838:	108003c4 	addi	r2,r2,15
  80d83c:	e0bffa15 	stw	r2,-24(fp)
  80d840:	e0fffa17 	ldw	r3,-24(fp)
  80d844:	1805d13a 	srai	r2,r3,4
  80d848:	e0fff917 	ldw	r3,-28(fp)
  80d84c:	18800b15 	stw	r2,44(r3)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;
  80d850:	e0bff117 	ldw	r2,-60(fp)
  80d854:	e0bffb15 	stw	r2,-20(fp)
  80d858:	e0bff517 	ldw	r2,-44(fp)
  80d85c:	1005d43a 	srai	r2,r2,16
  80d860:	10bfffcc 	andi	r2,r2,65535
  80d864:	e0bffc15 	stw	r2,-16(fp)
  80d868:	e0fffc17 	ldw	r3,-16(fp)
  80d86c:	e0fffd15 	stw	r3,-12(fp)
  80d870:	e0fffd17 	ldw	r3,-12(fp)
  80d874:	1804403a 	cmpge	r2,r3,zero
  80d878:	1000031e 	bne	r2,zero,80d888 <create_file+0x1b8>
  80d87c:	e0bffd17 	ldw	r2,-12(fp)
  80d880:	108003c4 	addi	r2,r2,15
  80d884:	e0bffd15 	stw	r2,-12(fp)
  80d888:	e0fffd17 	ldw	r3,-12(fp)
  80d88c:	1805d13a 	srai	r2,r3,4
  80d890:	1004913a 	slli	r2,r2,4
  80d894:	e0fffc17 	ldw	r3,-16(fp)
  80d898:	1885c83a 	sub	r2,r3,r2
  80d89c:	1004917a 	slli	r2,r2,5
  80d8a0:	e0fffb17 	ldw	r3,-20(fp)
  80d8a4:	18800c0d 	sth	r2,48(r3)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
  80d8a8:	e0fff117 	ldw	r3,-60(fp)
  80d8ac:	e0bff217 	ldw	r2,-56(fp)
  80d8b0:	1080058b 	ldhu	r2,22(r2)
  80d8b4:	18800d15 	stw	r2,52(r3)
            file_record->in_use = true;
  80d8b8:	e0fff117 	ldw	r3,-60(fp)
  80d8bc:	00800044 	movi	r2,1
  80d8c0:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
  80d8c4:	e0fff117 	ldw	r3,-60(fp)
  80d8c8:	00800044 	movi	r2,1
  80d8cc:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ?
  80d8d0:	e0bff117 	ldw	r2,-60(fp)
  80d8d4:	10800a17 	ldw	r2,40(r2)
  80d8d8:	1004c03a 	cmpne	r2,r2,zero
  80d8dc:	1000081e 	bne	r2,zero,80d900 <create_file+0x230>
  80d8e0:	00802074 	movhi	r2,129
  80d8e4:	10886204 	addi	r2,r2,8584
  80d8e8:	e0fff117 	ldw	r3,-60(fp)
  80d8ec:	11001317 	ldw	r4,76(r2)
  80d8f0:	18800b17 	ldw	r2,44(r3)
  80d8f4:	2089883a 	add	r4,r4,r2
  80d8f8:	e13ffe15 	stw	r4,-8(fp)
  80d8fc:	00001206 	br	80d948 <create_file+0x278>
  80d900:	04002074 	movhi	r16,129
  80d904:	84086204 	addi	r16,r16,8584
  80d908:	e0bff117 	ldw	r2,-60(fp)
  80d90c:	10800a17 	ldw	r2,40(r2)
  80d910:	113fff84 	addi	r4,r2,-2
  80d914:	00802074 	movhi	r2,129
  80d918:	10886204 	addi	r2,r2,8584
  80d91c:	11400383 	ldbu	r5,14(r2)
  80d920:	08006ec0 	call	8006ec <__mulsi3>
  80d924:	1007883a 	mov	r3,r2
  80d928:	80801417 	ldw	r2,80(r16)
  80d92c:	1887883a 	add	r3,r3,r2
  80d930:	e0fffe15 	stw	r3,-8(fp)
  80d934:	e0bff117 	ldw	r2,-60(fp)
  80d938:	10800b17 	ldw	r2,44(r2)
  80d93c:	e0fffe17 	ldw	r3,-8(fp)
  80d940:	1887883a 	add	r3,r3,r2
  80d944:	e0fffe15 	stw	r3,-8(fp)
  80d948:	e0bffe17 	ldw	r2,-8(fp)
  80d94c:	e0bff615 	stw	r2,-40(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
  80d950:	e13ff617 	ldw	r4,-40(fp)
  80d954:	d1602217 	ldw	r5,-32632(gp)
  80d958:	080b3240 	call	80b324 <Read_Sector_Data>
  80d95c:	1005003a 	cmpeq	r2,r2,zero
  80d960:	1000131e 	bne	r2,zero,80d9b0 <create_file+0x2e0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
  80d964:	e0bff117 	ldw	r2,-60(fp)
  80d968:	11000c0f 	ldh	r4,48(r2)
  80d96c:	e17ff117 	ldw	r5,-60(fp)
  80d970:	080b9640 	call	80b964 <Write_File_Record_At_Offset>
  80d974:	1005003a 	cmpeq	r2,r2,zero
  80d978:	10000d1e 	bne	r2,zero,80d9b0 <create_file+0x2e0>
                {
                    Save_Modified_Sector();
  80d97c:	080b2dc0 	call	80b2dc <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
  80d980:	e13ff317 	ldw	r4,-52(fp)
  80d984:	017fffc4 	movi	r5,-1
  80d988:	01800044 	movi	r6,1
  80d98c:	080b4b80 	call	80b4b8 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
  80d990:	e13ff317 	ldw	r4,-52(fp)
  80d994:	017fffc4 	movi	r5,-1
  80d998:	000d883a 	mov	r6,zero
  80d99c:	080b4b80 	call	80b4b8 <mark_cluster>
  80d9a0:	1005003a 	cmpeq	r2,r2,zero
  80d9a4:	1000021e 	bne	r2,zero,80d9b0 <create_file+0x2e0>
                    {
                        result = true;
  80d9a8:	00800044 	movi	r2,1
  80d9ac:	e0bff415 	stw	r2,-48(fp)
                    }
                }
            }
        }

    }
    return result;
  80d9b0:	e0bff417 	ldw	r2,-48(fp)
}
  80d9b4:	dfc01117 	ldw	ra,68(sp)
  80d9b8:	df001017 	ldw	fp,64(sp)
  80d9bc:	dc000f17 	ldw	r16,60(sp)
  80d9c0:	dec01204 	addi	sp,sp,72
  80d9c4:	f800283a 	ret

0080d9c8 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
  80d9c8:	defffb04 	addi	sp,sp,-20
  80d9cc:	df000415 	stw	fp,16(sp)
  80d9d0:	df000404 	addi	fp,sp,16
  80d9d4:	e13ffc15 	stw	r4,-16(fp)
  80d9d8:	e17ffd15 	stw	r5,-12(fp)
	int index;
	int flength = 0;
  80d9dc:	e03fff15 	stw	zero,-4(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
  80d9e0:	e03ffe15 	stw	zero,-8(fp)
  80d9e4:	e0bffe17 	ldw	r2,-8(fp)
  80d9e8:	10800208 	cmpgei	r2,r2,8
  80d9ec:	1000151e 	bne	r2,zero,80da44 <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
  80d9f0:	e0fffc17 	ldw	r3,-16(fp)
  80d9f4:	e0bffe17 	ldw	r2,-8(fp)
  80d9f8:	1885883a 	add	r2,r3,r2
  80d9fc:	10800003 	ldbu	r2,0(r2)
  80da00:	10800820 	cmpeqi	r2,r2,32
  80da04:	10000b1e 	bne	r2,zero,80da34 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
  80da08:	e0fffd17 	ldw	r3,-12(fp)
  80da0c:	e0bfff17 	ldw	r2,-4(fp)
  80da10:	1889883a 	add	r4,r3,r2
  80da14:	e0fffc17 	ldw	r3,-16(fp)
  80da18:	e0bffe17 	ldw	r2,-8(fp)
  80da1c:	1885883a 	add	r2,r3,r2
  80da20:	10800003 	ldbu	r2,0(r2)
  80da24:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
  80da28:	e0bfff17 	ldw	r2,-4(fp)
  80da2c:	10800044 	addi	r2,r2,1
  80da30:	e0bfff15 	stw	r2,-4(fp)
  80da34:	e0bffe17 	ldw	r2,-8(fp)
  80da38:	10800044 	addi	r2,r2,1
  80da3c:	e0bffe15 	stw	r2,-8(fp)
  80da40:	003fe806 	br	80d9e4 <copy_file_record_name_to_string+0x1c>
		}
	}
	if (file_record->extension[0] != ' ')
  80da44:	e0bffc17 	ldw	r2,-16(fp)
  80da48:	10800203 	ldbu	r2,8(r2)
  80da4c:	10800820 	cmpeqi	r2,r2,32
  80da50:	1000231e 	bne	r2,zero,80dae0 <copy_file_record_name_to_string+0x118>
	{
		file_name[flength] = '.';
  80da54:	e0fffd17 	ldw	r3,-12(fp)
  80da58:	e0bfff17 	ldw	r2,-4(fp)
  80da5c:	1887883a 	add	r3,r3,r2
  80da60:	00800b84 	movi	r2,46
  80da64:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
  80da68:	e0bfff17 	ldw	r2,-4(fp)
  80da6c:	10800044 	addi	r2,r2,1
  80da70:	e0bfff15 	stw	r2,-4(fp)
		for (index = 0; index < 3; index++)
  80da74:	e03ffe15 	stw	zero,-8(fp)
  80da78:	e0bffe17 	ldw	r2,-8(fp)
  80da7c:	108000c8 	cmpgei	r2,r2,3
  80da80:	1000171e 	bne	r2,zero,80dae0 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
  80da84:	e0fffc17 	ldw	r3,-16(fp)
  80da88:	e0bffe17 	ldw	r2,-8(fp)
  80da8c:	1885883a 	add	r2,r3,r2
  80da90:	10800204 	addi	r2,r2,8
  80da94:	10800003 	ldbu	r2,0(r2)
  80da98:	10800820 	cmpeqi	r2,r2,32
  80da9c:	10000c1e 	bne	r2,zero,80dad0 <copy_file_record_name_to_string+0x108>
			{
				file_name[flength] = file_record->extension[index];
  80daa0:	e0fffd17 	ldw	r3,-12(fp)
  80daa4:	e0bfff17 	ldw	r2,-4(fp)
  80daa8:	1889883a 	add	r4,r3,r2
  80daac:	e0fffc17 	ldw	r3,-16(fp)
  80dab0:	e0bffe17 	ldw	r2,-8(fp)
  80dab4:	1885883a 	add	r2,r3,r2
  80dab8:	10800204 	addi	r2,r2,8
  80dabc:	10800003 	ldbu	r2,0(r2)
  80dac0:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
  80dac4:	e0bfff17 	ldw	r2,-4(fp)
  80dac8:	10800044 	addi	r2,r2,1
  80dacc:	e0bfff15 	stw	r2,-4(fp)
  80dad0:	e0bffe17 	ldw	r2,-8(fp)
  80dad4:	10800044 	addi	r2,r2,1
  80dad8:	e0bffe15 	stw	r2,-8(fp)
  80dadc:	003fe606 	br	80da78 <copy_file_record_name_to_string+0xb0>
			}
		}
	}
	file_name[flength] = 0;
  80dae0:	e0bffd17 	ldw	r2,-12(fp)
  80dae4:	e0ffff17 	ldw	r3,-4(fp)
  80dae8:	10c5883a 	add	r2,r2,r3
  80daec:	10000005 	stb	zero,0(r2)
}
  80daf0:	df000417 	ldw	fp,16(sp)
  80daf4:	dec00504 	addi	sp,sp,20
  80daf8:	f800283a 	ret

0080dafc <alt_up_sd_card_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
  80dafc:	defffc04 	addi	sp,sp,-16
  80db00:	dfc00315 	stw	ra,12(sp)
  80db04:	df000215 	stw	fp,8(sp)
  80db08:	df000204 	addi	fp,sp,8
  80db0c:	e13ffe15 	stw	r4,-8(fp)
	// find the device from the device list
	// (see altera_hal/HAL/inc/priv/alt_file.h
	// and altera_hal/HAL/src/alt_find_dev.c
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
  80db10:	e13ffe17 	ldw	r4,-8(fp)
  80db14:	d1601204 	addi	r5,gp,-32696
  80db18:	080f4600 	call	80f460 <alt_find_dev>
  80db1c:	e0bfff15 	stw	r2,-4(fp)

	if (dev != NULL)
  80db20:	e0bfff17 	ldw	r2,-4(fp)
  80db24:	1005003a 	cmpeq	r2,r2,zero
  80db28:	10001e1e 	bne	r2,zero,80dba4 <alt_up_sd_card_open_dev+0xa8>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
  80db2c:	e0bfff17 	ldw	r2,-4(fp)
  80db30:	10800a17 	ldw	r2,40(r2)
  80db34:	10808d04 	addi	r2,r2,564
  80db38:	d0a01c15 	stw	r2,-32656(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
  80db3c:	e0bfff17 	ldw	r2,-4(fp)
  80db40:	10800a17 	ldw	r2,40(r2)
  80db44:	10808904 	addi	r2,r2,548
  80db48:	d0a01d15 	stw	r2,-32652(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
  80db4c:	e0bfff17 	ldw	r2,-4(fp)
  80db50:	10800a17 	ldw	r2,40(r2)
  80db54:	10808404 	addi	r2,r2,528
  80db58:	d0a01e15 	stw	r2,-32648(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
  80db5c:	e0bfff17 	ldw	r2,-4(fp)
  80db60:	10800a17 	ldw	r2,40(r2)
  80db64:	10808c04 	addi	r2,r2,560
  80db68:	d0a01f15 	stw	r2,-32644(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
  80db6c:	e0bfff17 	ldw	r2,-4(fp)
  80db70:	10800a17 	ldw	r2,40(r2)
  80db74:	10808b04 	addi	r2,r2,556
  80db78:	d0a02015 	stw	r2,-32640(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
  80db7c:	e0bfff17 	ldw	r2,-4(fp)
  80db80:	10800a17 	ldw	r2,40(r2)
  80db84:	d0a02115 	stw	r2,-32636(gp)
		device_pointer = dev;
  80db88:	e0bfff17 	ldw	r2,-4(fp)
  80db8c:	d0a02415 	stw	r2,-32624(gp)
		initialized = false;
  80db90:	d0201a15 	stw	zero,-32664(gp)
		is_sd_card_formated_as_FAT16 = false;
  80db94:	d0201b15 	stw	zero,-32660(gp)
		search_data.valid = false;
  80db98:	00802074 	movhi	r2,129
  80db9c:	10885d04 	addi	r2,r2,8564
  80dba0:	10000415 	stw	zero,16(r2)
	}
	return dev;
  80dba4:	e0bfff17 	ldw	r2,-4(fp)
}
  80dba8:	dfc00317 	ldw	ra,12(sp)
  80dbac:	df000217 	ldw	fp,8(sp)
  80dbb0:	dec00404 	addi	sp,sp,16
  80dbb4:	f800283a 	ret

0080dbb8 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
  80dbb8:	defffd04 	addi	sp,sp,-12
  80dbbc:	df000215 	stw	fp,8(sp)
  80dbc0:	df000204 	addi	fp,sp,8
    bool result = false;
  80dbc4:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
  80dbc8:	d0a02417 	ldw	r2,-32624(gp)
  80dbcc:	1005003a 	cmpeq	r2,r2,zero
  80dbd0:	1000081e 	bne	r2,zero,80dbf4 <alt_up_sd_card_is_Present+0x3c>
  80dbd4:	d0a01c17 	ldw	r2,-32656(gp)
  80dbd8:	1080002b 	ldhuio	r2,0(r2)
  80dbdc:	1080008c 	andi	r2,r2,2
  80dbe0:	1005003a 	cmpeq	r2,r2,zero
  80dbe4:	1000031e 	bne	r2,zero,80dbf4 <alt_up_sd_card_is_Present+0x3c>
    {
        result = true;
  80dbe8:	00800044 	movi	r2,1
  80dbec:	e0bffe15 	stw	r2,-8(fp)
  80dbf0:	00001e06 	br	80dc6c <alt_up_sd_card_is_Present+0xb4>
    }
	else if (initialized == true)
  80dbf4:	d0a01a17 	ldw	r2,-32664(gp)
  80dbf8:	10800058 	cmpnei	r2,r2,1
  80dbfc:	10001b1e 	bne	r2,zero,80dc6c <alt_up_sd_card_is_Present+0xb4>
	{
		int index;

		initialized = false;
  80dc00:	d0201a15 	stw	zero,-32664(gp)
		search_data.valid = false;
  80dc04:	00802074 	movhi	r2,129
  80dc08:	10885d04 	addi	r2,r2,8564
  80dc0c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
  80dc10:	d0201b15 	stw	zero,-32660(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
  80dc14:	e03fff15 	stw	zero,-4(fp)
  80dc18:	e0bfff17 	ldw	r2,-4(fp)
  80dc1c:	10800508 	cmpgei	r2,r2,20
  80dc20:	1000121e 	bne	r2,zero,80dc6c <alt_up_sd_card_is_Present+0xb4>
		{
			active_files[index].in_use = false;
  80dc24:	00c02074 	movhi	r3,129
  80dc28:	18c87704 	addi	r3,r3,8668
  80dc2c:	e0bfff17 	ldw	r2,-4(fp)
  80dc30:	100491ba 	slli	r2,r2,6
  80dc34:	10c5883a 	add	r2,r2,r3
  80dc38:	10800f04 	addi	r2,r2,60
  80dc3c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
  80dc40:	00c02074 	movhi	r3,129
  80dc44:	18c87704 	addi	r3,r3,8668
  80dc48:	e0bfff17 	ldw	r2,-4(fp)
  80dc4c:	100491ba 	slli	r2,r2,6
  80dc50:	10c5883a 	add	r2,r2,r3
  80dc54:	10800e04 	addi	r2,r2,56
  80dc58:	10000015 	stw	zero,0(r2)
  80dc5c:	e0bfff17 	ldw	r2,-4(fp)
  80dc60:	10800044 	addi	r2,r2,1
  80dc64:	e0bfff15 	stw	r2,-4(fp)
  80dc68:	003feb06 	br	80dc18 <alt_up_sd_card_is_Present+0x60>
		}
	}
    return result;
  80dc6c:	e0bffe17 	ldw	r2,-8(fp)
}
  80dc70:	df000217 	ldw	fp,8(sp)
  80dc74:	dec00304 	addi	sp,sp,12
  80dc78:	f800283a 	ret

0080dc7c <alt_up_sd_card_is_FAT16>:


bool alt_up_sd_card_is_FAT16(void)
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
  80dc7c:	defffd04 	addi	sp,sp,-12
  80dc80:	dfc00215 	stw	ra,8(sp)
  80dc84:	df000115 	stw	fp,4(sp)
  80dc88:	df000104 	addi	fp,sp,4
	bool result = false;
  80dc8c:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
  80dc90:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80dc94:	1005003a 	cmpeq	r2,r2,zero
  80dc98:	10000d1e 	bne	r2,zero,80dcd0 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
  80dc9c:	d0a01a17 	ldw	r2,-32664(gp)
  80dca0:	1004c03a 	cmpne	r2,r2,zero
  80dca4:	1000071e 	bne	r2,zero,80dcc4 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
  80dca8:	080c18c0 	call	80c18c <Look_for_FAT16>
  80dcac:	d0a01b15 	stw	r2,-32660(gp)
			initialized = is_sd_card_formated_as_FAT16;
  80dcb0:	d0a01b17 	ldw	r2,-32660(gp)
  80dcb4:	d0a01a15 	stw	r2,-32664(gp)
			search_data.valid = false;
  80dcb8:	00802074 	movhi	r2,129
  80dcbc:	10885d04 	addi	r2,r2,8564
  80dcc0:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
  80dcc4:	d0a01b17 	ldw	r2,-32660(gp)
  80dcc8:	e0bfff15 	stw	r2,-4(fp)
  80dccc:	00000206 	br	80dcd8 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
  80dcd0:	d0201a15 	stw	zero,-32664(gp)
		is_sd_card_formated_as_FAT16 = false;
  80dcd4:	d0201b15 	stw	zero,-32660(gp)
	}

	return result;
  80dcd8:	e0bfff17 	ldw	r2,-4(fp)
}
  80dcdc:	dfc00217 	ldw	ra,8(sp)
  80dce0:	df000117 	ldw	fp,4(sp)
  80dce4:	dec00304 	addi	sp,sp,12
  80dce8:	f800283a 	ret

0080dcec <alt_up_sd_card_find_first>:


short int alt_up_sd_card_find_first(char *directory_to_search_through, char *file_name)
/* This function sets up a search algorithm to go through a given directory looking for files.
 * If the search directory is valid, then the function searches for the first file it finds.
 * Inputs:
 *		directory_to_search_through - name of the directory to search through
 *		file_name - an array to store a name of the file found. Must be 13 bytes long (12 bytes for file name and 1 byte of NULL termination).
 * Outputs:
 *		0 - success
 *		1 - invalid directory
 *		2 - No card or incorrect card format.
 *
 * To specify a directory give the name in a format consistent with the following regular expression:
 * [{[valid_chars]+}/]*.
 *
 * In other words, give a path name starting at the root directory, where each directory name is followed by a '/'.
 * Then, append a '.' to the directory name. Examples:
 * "." - look through the root directory
 * "first/." - look through a directory named "first" that is located in the root directory.
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
  80dcec:	deffea04 	addi	sp,sp,-88
  80dcf0:	dfc01515 	stw	ra,84(sp)
  80dcf4:	df001415 	stw	fp,80(sp)
  80dcf8:	df001404 	addi	fp,sp,80
  80dcfc:	e13fec15 	stw	r4,-80(fp)
  80dd00:	e17fed15 	stw	r5,-76(fp)
	short int result = 2;
  80dd04:	00800084 	movi	r2,2
  80dd08:	e0bfee0d 	sth	r2,-72(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80dd0c:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80dd10:	1005003a 	cmpeq	r2,r2,zero
  80dd14:	1000221e 	bne	r2,zero,80dda0 <alt_up_sd_card_find_first+0xb4>
  80dd18:	d0a01b17 	ldw	r2,-32660(gp)
  80dd1c:	1005003a 	cmpeq	r2,r2,zero
  80dd20:	10001f1e 	bne	r2,zero,80dda0 <alt_up_sd_card_find_first+0xb4>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
  80dd24:	e17fef04 	addi	r5,fp,-68
  80dd28:	e1bff004 	addi	r6,fp,-64
  80dd2c:	e13fec17 	ldw	r4,-80(fp)
  80dd30:	080c7f40 	call	80c7f4 <get_home_directory_cluster_for_file>
  80dd34:	1005003a 	cmpeq	r2,r2,zero
  80dd38:	1000171e 	bne	r2,zero,80dd98 <alt_up_sd_card_find_first+0xac>
		{
			search_data.directory_root_cluster = home_directory_cluster;
  80dd3c:	00c02074 	movhi	r3,129
  80dd40:	18c85d04 	addi	r3,r3,8564
  80dd44:	e0bfef17 	ldw	r2,-68(fp)
  80dd48:	18800015 	stw	r2,0(r3)
			search_data.current_cluster_index = home_directory_cluster;
  80dd4c:	00c02074 	movhi	r3,129
  80dd50:	18c85d04 	addi	r3,r3,8564
  80dd54:	e0bfef17 	ldw	r2,-68(fp)
  80dd58:	18800115 	stw	r2,4(r3)
			search_data.current_sector_in_cluster = 0;
  80dd5c:	00802074 	movhi	r2,129
  80dd60:	10885d04 	addi	r2,r2,8564
  80dd64:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
  80dd68:	00c02074 	movhi	r3,129
  80dd6c:	18c85d04 	addi	r3,r3,8564
  80dd70:	00bfffc4 	movi	r2,-1
  80dd74:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
  80dd78:	00c02074 	movhi	r3,129
  80dd7c:	18c85d04 	addi	r3,r3,8564
  80dd80:	00800044 	movi	r2,1
  80dd84:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
  80dd88:	e13fed17 	ldw	r4,-76(fp)
  80dd8c:	080ddb40 	call	80ddb4 <alt_up_sd_card_find_next>
  80dd90:	e0bfee0d 	sth	r2,-72(fp)
  80dd94:	00000206 	br	80dda0 <alt_up_sd_card_find_first+0xb4>
		}
		else
		{
			result = 1;
  80dd98:	00800044 	movi	r2,1
  80dd9c:	e0bfee0d 	sth	r2,-72(fp)
		}
	}
	return result;
  80dda0:	e0bfee0f 	ldh	r2,-72(fp)
}
  80dda4:	dfc01517 	ldw	ra,84(sp)
  80dda8:	df001417 	ldw	fp,80(sp)
  80ddac:	dec01604 	addi	sp,sp,88
  80ddb0:	f800283a 	ret

0080ddb4 <alt_up_sd_card_find_next>:


short int alt_up_sd_card_find_next(char *file_name)
/* This function searches for the next file in a given directory, as specified by the find_first function.
 * Inputs:
 *		file_name - an array to store a name of the file found. Must be 13 bytes long (12 bytes for file name and 1 byte of NULL termination).
 * Outputs:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
  80ddb4:	deffe604 	addi	sp,sp,-104
  80ddb8:	dfc01915 	stw	ra,100(sp)
  80ddbc:	df001815 	stw	fp,96(sp)
  80ddc0:	df001804 	addi	fp,sp,96
  80ddc4:	e13fe815 	stw	r4,-96(fp)
	short int result = 2;
  80ddc8:	00800084 	movi	r2,2
  80ddcc:	e0bfe90d 	sth	r2,-92(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80ddd0:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80ddd4:	1005003a 	cmpeq	r2,r2,zero
  80ddd8:	1000c21e 	bne	r2,zero,80e0e4 <alt_up_sd_card_find_next+0x330>
  80dddc:	d0a01b17 	ldw	r2,-32660(gp)
  80dde0:	1005003a 	cmpeq	r2,r2,zero
  80dde4:	1000bf1e 	bne	r2,zero,80e0e4 <alt_up_sd_card_find_next+0x330>
	{
		if (search_data.valid)
  80dde8:	00802074 	movhi	r2,129
  80ddec:	10885d04 	addi	r2,r2,8564
  80ddf0:	10800417 	ldw	r2,16(r2)
  80ddf4:	1005003a 	cmpeq	r2,r2,zero
  80ddf8:	1000b81e 	bne	r2,zero,80e0dc <alt_up_sd_card_find_next+0x328>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
  80ddfc:	00802074 	movhi	r2,129
  80de00:	10885d04 	addi	r2,r2,8564
  80de04:	10800117 	ldw	r2,4(r2)
  80de08:	e0bffa15 	stw	r2,-24(fp)

			if (cluster == 0)
  80de0c:	e0bffa17 	ldw	r2,-24(fp)
  80de10:	1004c03a 	cmpne	r2,r2,zero
  80de14:	1000481e 	bne	r2,zero,80df38 <alt_up_sd_card_find_next+0x184>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
  80de18:	00802074 	movhi	r2,129
  80de1c:	10886204 	addi	r2,r2,8584
  80de20:	1080050b 	ldhu	r2,20(r2)
  80de24:	1008917a 	slli	r4,r2,5
  80de28:	00802074 	movhi	r2,129
  80de2c:	10886204 	addi	r2,r2,8584
  80de30:	1140030b 	ldhu	r5,12(r2)
  80de34:	08006300 	call	800630 <__divsi3>
  80de38:	e0bffb15 	stw	r2,-20(fp)
				int sector_index = search_data.current_sector_in_cluster;
  80de3c:	00802074 	movhi	r2,129
  80de40:	10885d04 	addi	r2,r2,8564
  80de44:	10800217 	ldw	r2,8(r2)
  80de48:	e0bffc15 	stw	r2,-16(fp)
				int file_counter = search_data.file_index_in_sector+1;
  80de4c:	00802074 	movhi	r2,129
  80de50:	10885d04 	addi	r2,r2,8564
  80de54:	1080030f 	ldh	r2,12(r2)
  80de58:	10800044 	addi	r2,r2,1
  80de5c:	e0bffd15 	stw	r2,-12(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++)
  80de60:	e0fffc17 	ldw	r3,-16(fp)
  80de64:	e0bffb17 	ldw	r2,-20(fp)
  80de68:	1880300e 	bge	r3,r2,80df2c <alt_up_sd_card_find_next+0x178>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
  80de6c:	00802074 	movhi	r2,129
  80de70:	10886204 	addi	r2,r2,8584
  80de74:	10c01317 	ldw	r3,76(r2)
  80de78:	e0bffc17 	ldw	r2,-16(fp)
  80de7c:	1889883a 	add	r4,r3,r2
  80de80:	d1602217 	ldw	r5,-32632(gp)
  80de84:	080b3240 	call	80b324 <Read_Sector_Data>
  80de88:	1005003a 	cmpeq	r2,r2,zero
  80de8c:	1000271e 	bne	r2,zero,80df2c <alt_up_sd_card_find_next+0x178>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
  80de90:	e0bffd17 	ldw	r2,-12(fp)
  80de94:	10800408 	cmpgei	r2,r2,16
  80de98:	10001f1e 	bne	r2,zero,80df18 <alt_up_sd_card_find_next+0x164>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
  80de9c:	e0bffd17 	ldw	r2,-12(fp)
  80dea0:	1008917a 	slli	r4,r2,5
  80dea4:	e17fea04 	addi	r5,fp,-88
  80dea8:	000d883a 	mov	r6,zero
  80deac:	e1fffc17 	ldw	r7,-16(fp)
  80deb0:	080b7380 	call	80b738 <Read_File_Record_At_Offset>
  80deb4:	1005003a 	cmpeq	r2,r2,zero
  80deb8:	1000131e 	bne	r2,zero,80df08 <alt_up_sd_card_find_next+0x154>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  80debc:	e0bfea03 	ldbu	r2,-88(fp)
  80dec0:	1005003a 	cmpeq	r2,r2,zero
  80dec4:	1000101e 	bne	r2,zero,80df08 <alt_up_sd_card_find_next+0x154>
  80dec8:	e0bfea03 	ldbu	r2,-88(fp)
  80decc:	10803960 	cmpeqi	r2,r2,229
  80ded0:	10000d1e 	bne	r2,zero,80df08 <alt_up_sd_card_find_next+0x154>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
  80ded4:	00c02074 	movhi	r3,129
  80ded8:	18c85d04 	addi	r3,r3,8564
  80dedc:	e0bffd17 	ldw	r2,-12(fp)
  80dee0:	1880030d 	sth	r2,12(r3)
									search_data.current_sector_in_cluster = sector_index;
  80dee4:	00c02074 	movhi	r3,129
  80dee8:	18c85d04 	addi	r3,r3,8564
  80deec:	e0bffc17 	ldw	r2,-16(fp)
  80def0:	18800215 	stw	r2,8(r3)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
  80def4:	e13fea04 	addi	r4,fp,-88
  80def8:	e17fe817 	ldw	r5,-96(fp)
  80defc:	080d9c80 	call	80d9c8 <copy_file_record_name_to_string>
									return 0;
  80df00:	e03fff15 	stw	zero,-4(fp)
  80df04:	00007906 	br	80e0ec <alt_up_sd_card_find_next+0x338>
  80df08:	e0bffd17 	ldw	r2,-12(fp)
  80df0c:	10800044 	addi	r2,r2,1
  80df10:	e0bffd15 	stw	r2,-12(fp)
  80df14:	003fde06 	br	80de90 <alt_up_sd_card_find_next+0xdc>
								}
							}
						}
						file_counter = 0;
  80df18:	e03ffd15 	stw	zero,-12(fp)
  80df1c:	e0bffc17 	ldw	r2,-16(fp)
  80df20:	10800044 	addi	r2,r2,1
  80df24:	e0bffc15 	stw	r2,-16(fp)
  80df28:	003fcd06 	br	80de60 <alt_up_sd_card_find_next+0xac>
					}
					else
					{
						break;
					}
				}
				result = -1;
  80df2c:	00bfffc4 	movi	r2,-1
  80df30:	e0bfe90d 	sth	r2,-92(fp)
  80df34:	00006b06 	br	80e0e4 <alt_up_sd_card_find_next+0x330>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
  80df38:	00802074 	movhi	r2,129
  80df3c:	10885d04 	addi	r2,r2,8564
  80df40:	1080030f 	ldh	r2,12(r2)
  80df44:	10800044 	addi	r2,r2,1
  80df48:	e0bffd15 	stw	r2,-12(fp)
				do
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
  80df4c:	e0bffa17 	ldw	r2,-24(fp)
  80df50:	113fff84 	addi	r4,r2,-2
  80df54:	00802074 	movhi	r2,129
  80df58:	10886204 	addi	r2,r2,8584
  80df5c:	11400383 	ldbu	r5,14(r2)
  80df60:	08006ec0 	call	8006ec <__mulsi3>
  80df64:	1007883a 	mov	r3,r2
  80df68:	00802074 	movhi	r2,129
  80df6c:	10886204 	addi	r2,r2,8584
  80df70:	10801417 	ldw	r2,80(r2)
  80df74:	1885883a 	add	r2,r3,r2
  80df78:	e0bffc15 	stw	r2,-16(fp)
					int sector_index = search_data.current_sector_in_cluster;
  80df7c:	00802074 	movhi	r2,129
  80df80:	10885d04 	addi	r2,r2,8564
  80df84:	10800217 	ldw	r2,8(r2)
  80df88:	e0bffb15 	stw	r2,-20(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
  80df8c:	00802074 	movhi	r2,129
  80df90:	10886204 	addi	r2,r2,8584
  80df94:	10c00383 	ldbu	r3,14(r2)
  80df98:	e0bffb17 	ldw	r2,-20(fp)
  80df9c:	10c0320e 	bge	r2,r3,80e068 <alt_up_sd_card_find_next+0x2b4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
  80dfa0:	e0fffb17 	ldw	r3,-20(fp)
  80dfa4:	e0bffc17 	ldw	r2,-16(fp)
  80dfa8:	1889883a 	add	r4,r3,r2
  80dfac:	d1602217 	ldw	r5,-32632(gp)
  80dfb0:	080b3240 	call	80b324 <Read_Sector_Data>
  80dfb4:	1005003a 	cmpeq	r2,r2,zero
  80dfb8:	10002b1e 	bne	r2,zero,80e068 <alt_up_sd_card_find_next+0x2b4>
						{
							for (; file_counter < 16; file_counter++)
  80dfbc:	e0bffd17 	ldw	r2,-12(fp)
  80dfc0:	10800408 	cmpgei	r2,r2,16
  80dfc4:	1000231e 	bne	r2,zero,80e054 <alt_up_sd_card_find_next+0x2a0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
  80dfc8:	e0bffd17 	ldw	r2,-12(fp)
  80dfcc:	1008917a 	slli	r4,r2,5
  80dfd0:	e17fea04 	addi	r5,fp,-88
  80dfd4:	e1bffa17 	ldw	r6,-24(fp)
  80dfd8:	e1fffb17 	ldw	r7,-20(fp)
  80dfdc:	080b7380 	call	80b738 <Read_File_Record_At_Offset>
  80dfe0:	1005003a 	cmpeq	r2,r2,zero
  80dfe4:	1000171e 	bne	r2,zero,80e044 <alt_up_sd_card_find_next+0x290>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
  80dfe8:	e0bfea03 	ldbu	r2,-88(fp)
  80dfec:	1005003a 	cmpeq	r2,r2,zero
  80dff0:	1000141e 	bne	r2,zero,80e044 <alt_up_sd_card_find_next+0x290>
  80dff4:	e0bfea03 	ldbu	r2,-88(fp)
  80dff8:	10803960 	cmpeqi	r2,r2,229
  80dffc:	1000111e 	bne	r2,zero,80e044 <alt_up_sd_card_find_next+0x290>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
  80e000:	00c02074 	movhi	r3,129
  80e004:	18c85d04 	addi	r3,r3,8564
  80e008:	e0bffa17 	ldw	r2,-24(fp)
  80e00c:	18800115 	stw	r2,4(r3)
										search_data.file_index_in_sector = file_counter;
  80e010:	00c02074 	movhi	r3,129
  80e014:	18c85d04 	addi	r3,r3,8564
  80e018:	e0bffd17 	ldw	r2,-12(fp)
  80e01c:	1880030d 	sth	r2,12(r3)
										search_data.current_sector_in_cluster = sector_index;
  80e020:	00c02074 	movhi	r3,129
  80e024:	18c85d04 	addi	r3,r3,8564
  80e028:	e0bffb17 	ldw	r2,-20(fp)
  80e02c:	18800215 	stw	r2,8(r3)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
  80e030:	e13fea04 	addi	r4,fp,-88
  80e034:	e17fe817 	ldw	r5,-96(fp)
  80e038:	080d9c80 	call	80d9c8 <copy_file_record_name_to_string>
										return 0;
  80e03c:	e03fff15 	stw	zero,-4(fp)
  80e040:	00002a06 	br	80e0ec <alt_up_sd_card_find_next+0x338>
  80e044:	e0bffd17 	ldw	r2,-12(fp)
  80e048:	10800044 	addi	r2,r2,1
  80e04c:	e0bffd15 	stw	r2,-12(fp)
  80e050:	003fda06 	br	80dfbc <alt_up_sd_card_find_next+0x208>
									}
								}
							}
							file_counter = 0;
  80e054:	e03ffd15 	stw	zero,-12(fp)
  80e058:	e0bffb17 	ldw	r2,-20(fp)
  80e05c:	10800044 	addi	r2,r2,1
  80e060:	e0bffb15 	stw	r2,-20(fp)
  80e064:	003fc906 	br	80df8c <alt_up_sd_card_find_next+0x1d8>
						}
						else
						{
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
  80e068:	00802074 	movhi	r2,129
  80e06c:	10886204 	addi	r2,r2,8584
  80e070:	10c00383 	ldbu	r3,14(r2)
  80e074:	e0bffb17 	ldw	r2,-20(fp)
  80e078:	10c01416 	blt	r2,r3,80e0cc <alt_up_sd_card_find_next+0x318>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
  80e07c:	e17ffe04 	addi	r5,fp,-8
  80e080:	e13ffa17 	ldw	r4,-24(fp)
  80e084:	080b4080 	call	80b408 <get_cluster_flag>
  80e088:	1005003a 	cmpeq	r2,r2,zero
  80e08c:	10000d1e 	bne	r2,zero,80e0c4 <alt_up_sd_card_find_next+0x310>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
  80e090:	e0bffe0f 	ldh	r2,-8(fp)
  80e094:	10fffe0c 	andi	r3,r2,65528
  80e098:	00bffe14 	movui	r2,65528
  80e09c:	1880051e 	bne	r3,r2,80e0b4 <alt_up_sd_card_find_next+0x300>
							{
								result = -1;
  80e0a0:	00bfffc4 	movi	r2,-1
  80e0a4:	e0bfe90d 	sth	r2,-92(fp)
								search_data.valid = false;
  80e0a8:	00802074 	movhi	r2,129
  80e0ac:	10885d04 	addi	r2,r2,8564
  80e0b0:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
  80e0b4:	e0bffe0f 	ldh	r2,-8(fp)
  80e0b8:	10bffe0c 	andi	r2,r2,65528
  80e0bc:	e0bffa15 	stw	r2,-24(fp)
  80e0c0:	00000206 	br	80e0cc <alt_up_sd_card_find_next+0x318>
						}
						else
						{
							// Error encountered.
							result = -1;
  80e0c4:	00bfffc4 	movi	r2,-1
  80e0c8:	e0bfe90d 	sth	r2,-92(fp)
						}
					}
				} while (cluster < 0x0000fff8);
  80e0cc:	e0fffa17 	ldw	r3,-24(fp)
  80e0d0:	00bffdd4 	movui	r2,65527
  80e0d4:	10c00316 	blt	r2,r3,80e0e4 <alt_up_sd_card_find_next+0x330>
  80e0d8:	003f9c06 	br	80df4c <alt_up_sd_card_find_next+0x198>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
  80e0dc:	008000c4 	movi	r2,3
  80e0e0:	e0bfe90d 	sth	r2,-92(fp)
		}
	}
	return result;
  80e0e4:	e0bfe90f 	ldh	r2,-92(fp)
  80e0e8:	e0bfff15 	stw	r2,-4(fp)
}
  80e0ec:	e0bfff17 	ldw	r2,-4(fp)
  80e0f0:	dfc01917 	ldw	ra,100(sp)
  80e0f4:	df001817 	ldw	fp,96(sp)
  80e0f8:	dec01a04 	addi	sp,sp,104
  80e0fc:	f800283a 	ret

0080e100 <alt_up_sd_card_fopen>:


short int alt_up_sd_card_fopen(char *name, bool create)
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 *
 * Inputs:
 *      name - a file name including a directory, relative to the root directory
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
  80e100:	deffe804 	addi	sp,sp,-96
  80e104:	dfc01715 	stw	ra,92(sp)
  80e108:	df001615 	stw	fp,88(sp)
  80e10c:	df001604 	addi	fp,sp,88
  80e110:	e13fea15 	stw	r4,-88(fp)
  80e114:	e17feb15 	stw	r5,-84(fp)
	short int file_record_index = -1;
  80e118:	00bfffc4 	movi	r2,-1
  80e11c:	e0bfec0d 	sth	r2,-80(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80e120:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80e124:	1005003a 	cmpeq	r2,r2,zero
  80e128:	1000cc1e 	bne	r2,zero,80e45c <alt_up_sd_card_fopen+0x35c>
  80e12c:	d0a01b17 	ldw	r2,-32660(gp)
  80e130:	1005003a 	cmpeq	r2,r2,zero
  80e134:	1000c91e 	bne	r2,zero,80e45c <alt_up_sd_card_fopen+0x35c>
	{
        unsigned int home_directory_cluster = 0;
  80e138:	e03fed15 	stw	zero,-76(fp)
        t_file_record home_dir;

        /* First check the file name format. It should not be longer than 12 characters, including a period and the extension.
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
  80e13c:	e13fea17 	ldw	r4,-88(fp)
  80e140:	080c26c0 	call	80c26c <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
  80e144:	e13fea17 	ldw	r4,-88(fp)
  80e148:	080c3100 	call	80c310 <check_file_name_for_FAT16_compliance>
  80e14c:	1005003a 	cmpeq	r2,r2,zero
  80e150:	1000c21e 	bne	r2,zero,80e45c <alt_up_sd_card_fopen+0x35c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
  80e154:	e17fed04 	addi	r5,fp,-76
  80e158:	e1bfee04 	addi	r6,fp,-72
  80e15c:	e13fea17 	ldw	r4,-88(fp)
  80e160:	080c7f40 	call	80c7f4 <get_home_directory_cluster_for_file>
  80e164:	1004c03a 	cmpne	r2,r2,zero
  80e168:	1000031e 	bne	r2,zero,80e178 <alt_up_sd_card_fopen+0x78>
            {
                return file_record_index;
  80e16c:	e0bfec0f 	ldh	r2,-80(fp)
  80e170:	e0bfff15 	stw	r2,-4(fp)
  80e174:	0000bb06 	br	80e464 <alt_up_sd_card_fopen+0x364>
            }

    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
  80e178:	e03ffe15 	stw	zero,-8(fp)
  80e17c:	e0bffe17 	ldw	r2,-8(fp)
  80e180:	10800508 	cmpgei	r2,r2,20
  80e184:	1000101e 	bne	r2,zero,80e1c8 <alt_up_sd_card_fopen+0xc8>
    		{
    			if (active_files[index].in_use == false)
  80e188:	00c02074 	movhi	r3,129
  80e18c:	18c87704 	addi	r3,r3,8668
  80e190:	e0bffe17 	ldw	r2,-8(fp)
  80e194:	100491ba 	slli	r2,r2,6
  80e198:	10c5883a 	add	r2,r2,r3
  80e19c:	10800f04 	addi	r2,r2,60
  80e1a0:	10800017 	ldw	r2,0(r2)
  80e1a4:	1004c03a 	cmpne	r2,r2,zero
  80e1a8:	1000031e 	bne	r2,zero,80e1b8 <alt_up_sd_card_fopen+0xb8>
    			{
    				file_record_index = index;
  80e1ac:	e0bffe17 	ldw	r2,-8(fp)
  80e1b0:	e0bfec0d 	sth	r2,-80(fp)
    				break;
  80e1b4:	00000406 	br	80e1c8 <alt_up_sd_card_fopen+0xc8>
  80e1b8:	e0bffe17 	ldw	r2,-8(fp)
  80e1bc:	10800044 	addi	r2,r2,1
  80e1c0:	e0bffe15 	stw	r2,-8(fp)
  80e1c4:	003fed06 	br	80e17c <alt_up_sd_card_fopen+0x7c>
    			}
    		}
    		if (file_record_index >= 0)
  80e1c8:	e0bfec0f 	ldh	r2,-80(fp)
  80e1cc:	1004803a 	cmplt	r2,r2,zero
  80e1d0:	1000a21e 	bne	r2,zero,80e45c <alt_up_sd_card_fopen+0x35c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true
    			 * and the file is not found, then it should be created in the current directory.
    			 */

                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
  80e1d4:	e0bfec0f 	ldh	r2,-80(fp)
  80e1d8:	100691ba 	slli	r3,r2,6
  80e1dc:	00802074 	movhi	r2,129
  80e1e0:	10887704 	addi	r2,r2,8668
  80e1e4:	188d883a 	add	r6,r3,r2
  80e1e8:	e13fed17 	ldw	r4,-76(fp)
  80e1ec:	e17fea17 	ldw	r5,-88(fp)
  80e1f0:	080cc980 	call	80cc98 <find_file_in_directory>
  80e1f4:	1005003a 	cmpeq	r2,r2,zero
  80e1f8:	1000751e 	bne	r2,zero,80e3d0 <alt_up_sd_card_fopen+0x2d0>
                {
                    if (create)
  80e1fc:	e0bfeb17 	ldw	r2,-84(fp)
  80e200:	1005003a 	cmpeq	r2,r2,zero
  80e204:	1000031e 	bne	r2,zero,80e214 <alt_up_sd_card_fopen+0x114>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
  80e208:	00bfffc4 	movi	r2,-1
  80e20c:	e0bfff15 	stw	r2,-4(fp)
  80e210:	00009406 	br	80e464 <alt_up_sd_card_fopen+0x364>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
  80e214:	00c02074 	movhi	r3,129
  80e218:	18c87704 	addi	r3,r3,8668
  80e21c:	e0bfec0f 	ldh	r2,-80(fp)
  80e220:	100491ba 	slli	r2,r2,6
  80e224:	10c5883a 	add	r2,r2,r3
  80e228:	11000704 	addi	r4,r2,28
  80e22c:	00c02074 	movhi	r3,129
  80e230:	18c87704 	addi	r3,r3,8668
  80e234:	e0bfec0f 	ldh	r2,-80(fp)
  80e238:	100491ba 	slli	r2,r2,6
  80e23c:	10c5883a 	add	r2,r2,r3
  80e240:	10800504 	addi	r2,r2,20
  80e244:	1080008b 	ldhu	r2,2(r2)
  80e248:	20800015 	stw	r2,0(r4)
                    active_files[file_record_index].current_sector_in_cluster = 0;
  80e24c:	00c02074 	movhi	r3,129
  80e250:	18c87704 	addi	r3,r3,8668
  80e254:	e0bfec0f 	ldh	r2,-80(fp)
  80e258:	100491ba 	slli	r2,r2,6
  80e25c:	10c5883a 	add	r2,r2,r3
  80e260:	10800804 	addi	r2,r2,32
  80e264:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
  80e268:	00c02074 	movhi	r3,129
  80e26c:	18c87704 	addi	r3,r3,8668
  80e270:	e0bfec0f 	ldh	r2,-80(fp)
  80e274:	100491ba 	slli	r2,r2,6
  80e278:	10c5883a 	add	r2,r2,r3
  80e27c:	10800904 	addi	r2,r2,36
  80e280:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
  80e284:	00c02074 	movhi	r3,129
  80e288:	18c87704 	addi	r3,r3,8668
  80e28c:	e0bfec0f 	ldh	r2,-80(fp)
  80e290:	100491ba 	slli	r2,r2,6
  80e294:	10c5883a 	add	r2,r2,r3
  80e298:	10c00f04 	addi	r3,r2,60
  80e29c:	00800044 	movi	r2,1
  80e2a0:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
  80e2a4:	00c02074 	movhi	r3,129
  80e2a8:	18c87704 	addi	r3,r3,8668
  80e2ac:	e0bfec0f 	ldh	r2,-80(fp)
  80e2b0:	100491ba 	slli	r2,r2,6
  80e2b4:	10c5883a 	add	r2,r2,r3
  80e2b8:	10800e04 	addi	r2,r2,56
  80e2bc:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
  80e2c0:	e03ffe15 	stw	zero,-8(fp)
  80e2c4:	e0bffe17 	ldw	r2,-8(fp)
  80e2c8:	10800508 	cmpgei	r2,r2,20
  80e2cc:	1000631e 	bne	r2,zero,80e45c <alt_up_sd_card_fopen+0x35c>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
  80e2d0:	e0ffec0f 	ldh	r3,-80(fp)
  80e2d4:	e0bffe17 	ldw	r2,-8(fp)
  80e2d8:	18803926 	beq	r3,r2,80e3c0 <alt_up_sd_card_fopen+0x2c0>
  80e2dc:	00c02074 	movhi	r3,129
  80e2e0:	18c87704 	addi	r3,r3,8668
  80e2e4:	e0bffe17 	ldw	r2,-8(fp)
  80e2e8:	100491ba 	slli	r2,r2,6
  80e2ec:	10c5883a 	add	r2,r2,r3
  80e2f0:	10800f04 	addi	r2,r2,60
  80e2f4:	10800017 	ldw	r2,0(r2)
  80e2f8:	10800058 	cmpnei	r2,r2,1
  80e2fc:	1000301e 	bne	r2,zero,80e3c0 <alt_up_sd_card_fopen+0x2c0>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
  80e300:	00c02074 	movhi	r3,129
  80e304:	18c87704 	addi	r3,r3,8668
  80e308:	e0bfec0f 	ldh	r2,-80(fp)
  80e30c:	100491ba 	slli	r2,r2,6
  80e310:	10c5883a 	add	r2,r2,r3
  80e314:	11000a04 	addi	r4,r2,40
  80e318:	00c02074 	movhi	r3,129
  80e31c:	18c87704 	addi	r3,r3,8668
  80e320:	e0bffe17 	ldw	r2,-8(fp)
  80e324:	100491ba 	slli	r2,r2,6
  80e328:	10c5883a 	add	r2,r2,r3
  80e32c:	10800a04 	addi	r2,r2,40
  80e330:	20c00017 	ldw	r3,0(r4)
  80e334:	10800017 	ldw	r2,0(r2)
  80e338:	1880211e 	bne	r3,r2,80e3c0 <alt_up_sd_card_fopen+0x2c0>
  80e33c:	00c02074 	movhi	r3,129
  80e340:	18c87704 	addi	r3,r3,8668
  80e344:	e0bfec0f 	ldh	r2,-80(fp)
  80e348:	100491ba 	slli	r2,r2,6
  80e34c:	10c5883a 	add	r2,r2,r3
  80e350:	11000b04 	addi	r4,r2,44
  80e354:	00c02074 	movhi	r3,129
  80e358:	18c87704 	addi	r3,r3,8668
  80e35c:	e0bffe17 	ldw	r2,-8(fp)
  80e360:	100491ba 	slli	r2,r2,6
  80e364:	10c5883a 	add	r2,r2,r3
  80e368:	10800b04 	addi	r2,r2,44
  80e36c:	20c00017 	ldw	r3,0(r4)
  80e370:	10800017 	ldw	r2,0(r2)
  80e374:	1880121e 	bne	r3,r2,80e3c0 <alt_up_sd_card_fopen+0x2c0>
  80e378:	00c02074 	movhi	r3,129
  80e37c:	18c87704 	addi	r3,r3,8668
  80e380:	e0bfec0f 	ldh	r2,-80(fp)
  80e384:	100491ba 	slli	r2,r2,6
  80e388:	10c5883a 	add	r2,r2,r3
  80e38c:	11000c04 	addi	r4,r2,48
  80e390:	00c02074 	movhi	r3,129
  80e394:	18c87704 	addi	r3,r3,8668
  80e398:	e0bffe17 	ldw	r2,-8(fp)
  80e39c:	100491ba 	slli	r2,r2,6
  80e3a0:	10c5883a 	add	r2,r2,r3
  80e3a4:	10800c04 	addi	r2,r2,48
  80e3a8:	20c0000f 	ldh	r3,0(r4)
  80e3ac:	1080000f 	ldh	r2,0(r2)
  80e3b0:	1880031e 	bne	r3,r2,80e3c0 <alt_up_sd_card_fopen+0x2c0>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
  80e3b4:	00bfff84 	movi	r2,-2
  80e3b8:	e0bfec0d 	sth	r2,-80(fp)
								break;
  80e3bc:	00002706 	br	80e45c <alt_up_sd_card_fopen+0x35c>
  80e3c0:	e0bffe17 	ldw	r2,-8(fp)
  80e3c4:	10800044 	addi	r2,r2,1
  80e3c8:	e0bffe15 	stw	r2,-8(fp)
  80e3cc:	003fbd06 	br	80e2c4 <alt_up_sd_card_fopen+0x1c4>
							}
						}
					}

                }
                else if (create)
  80e3d0:	e0bfeb17 	ldw	r2,-84(fp)
  80e3d4:	1005003a 	cmpeq	r2,r2,zero
  80e3d8:	10001e1e 	bne	r2,zero,80e454 <alt_up_sd_card_fopen+0x354>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
  80e3dc:	e0bfec0f 	ldh	r2,-80(fp)
  80e3e0:	100691ba 	slli	r3,r2,6
  80e3e4:	00802074 	movhi	r2,129
  80e3e8:	10887704 	addi	r2,r2,8668
  80e3ec:	188b883a 	add	r5,r3,r2
  80e3f0:	e1bfee04 	addi	r6,fp,-72
  80e3f4:	e13fea17 	ldw	r4,-88(fp)
  80e3f8:	080d6d00 	call	80d6d0 <create_file>
  80e3fc:	1005003a 	cmpeq	r2,r2,zero
  80e400:	1000111e 	bne	r2,zero,80e448 <alt_up_sd_card_fopen+0x348>
                    {
                        active_files[file_record_index].in_use = true;
  80e404:	00c02074 	movhi	r3,129
  80e408:	18c87704 	addi	r3,r3,8668
  80e40c:	e0bfec0f 	ldh	r2,-80(fp)
  80e410:	100491ba 	slli	r2,r2,6
  80e414:	10c5883a 	add	r2,r2,r3
  80e418:	10c00f04 	addi	r3,r2,60
  80e41c:	00800044 	movi	r2,1
  80e420:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
  80e424:	00c02074 	movhi	r3,129
  80e428:	18c87704 	addi	r3,r3,8668
  80e42c:	e0bfec0f 	ldh	r2,-80(fp)
  80e430:	100491ba 	slli	r2,r2,6
  80e434:	10c5883a 	add	r2,r2,r3
  80e438:	10c00e04 	addi	r3,r2,56
  80e43c:	00800044 	movi	r2,1
  80e440:	18800015 	stw	r2,0(r3)
  80e444:	00000506 	br	80e45c <alt_up_sd_card_fopen+0x35c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
  80e448:	00bfffc4 	movi	r2,-1
  80e44c:	e0bfec0d 	sth	r2,-80(fp)
  80e450:	00000206 	br	80e45c <alt_up_sd_card_fopen+0x35c>
                    }
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
  80e454:	00bfffc4 	movi	r2,-1
  80e458:	e0bfec0d 	sth	r2,-80(fp)
                }
    		}
        }
	}

	return file_record_index;
  80e45c:	e0bfec0f 	ldh	r2,-80(fp)
  80e460:	e0bfff15 	stw	r2,-4(fp)
}
  80e464:	e0bfff17 	ldw	r2,-4(fp)
  80e468:	dfc01717 	ldw	ra,92(sp)
  80e46c:	df001617 	ldw	fp,88(sp)
  80e470:	dec01804 	addi	sp,sp,96
  80e474:	f800283a 	ret

0080e478 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  80e478:	defffe04 	addi	sp,sp,-8
  80e47c:	df000115 	stw	fp,4(sp)
  80e480:	df000104 	addi	fp,sp,4
  80e484:	e13fff0d 	sth	r4,-4(fp)
  80e488:	e17fff8d 	sth	r5,-2(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e48c:	e0bfff0f 	ldh	r2,-4(fp)
  80e490:	1004803a 	cmplt	r2,r2,zero
  80e494:	1000161e 	bne	r2,zero,80e4f0 <alt_up_sd_card_set_attributes+0x78>
  80e498:	e0bfff0f 	ldh	r2,-4(fp)
  80e49c:	10800508 	cmpgei	r2,r2,20
  80e4a0:	1000131e 	bne	r2,zero,80e4f0 <alt_up_sd_card_set_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
  80e4a4:	00c02074 	movhi	r3,129
  80e4a8:	18c87704 	addi	r3,r3,8668
  80e4ac:	e0bfff0f 	ldh	r2,-4(fp)
  80e4b0:	100491ba 	slli	r2,r2,6
  80e4b4:	10c5883a 	add	r2,r2,r3
  80e4b8:	10800f04 	addi	r2,r2,60
  80e4bc:	10800017 	ldw	r2,0(r2)
  80e4c0:	1005003a 	cmpeq	r2,r2,zero
  80e4c4:	10000a1e 	bne	r2,zero,80e4f0 <alt_up_sd_card_set_attributes+0x78>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
  80e4c8:	00c02074 	movhi	r3,129
  80e4cc:	18c87704 	addi	r3,r3,8668
  80e4d0:	e0bfff0f 	ldh	r2,-4(fp)
  80e4d4:	100491ba 	slli	r2,r2,6
  80e4d8:	10c5883a 	add	r2,r2,r3
  80e4dc:	11000204 	addi	r4,r2,8
  80e4e0:	e0bfff8b 	ldhu	r2,-2(fp)
  80e4e4:	00ffffc4 	movi	r3,-1
  80e4e8:	10c4703a 	and	r2,r2,r3
  80e4ec:	208000c5 	stb	r2,3(r4)
        }
    }
}
  80e4f0:	df000117 	ldw	fp,4(sp)
  80e4f4:	dec00204 	addi	sp,sp,8
  80e4f8:	f800283a 	ret

0080e4fc <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  80e4fc:	defffe04 	addi	sp,sp,-8
  80e500:	df000115 	stw	fp,4(sp)
  80e504:	df000104 	addi	fp,sp,4
  80e508:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
  80e50c:	00bfffc4 	movi	r2,-1
  80e510:	e0bfff8d 	sth	r2,-2(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e514:	e0bfff0f 	ldh	r2,-4(fp)
  80e518:	1004803a 	cmplt	r2,r2,zero
  80e51c:	1000141e 	bne	r2,zero,80e570 <alt_up_sd_card_get_attributes+0x74>
  80e520:	e0bfff0f 	ldh	r2,-4(fp)
  80e524:	10800508 	cmpgei	r2,r2,20
  80e528:	1000111e 	bne	r2,zero,80e570 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
  80e52c:	00c02074 	movhi	r3,129
  80e530:	18c87704 	addi	r3,r3,8668
  80e534:	e0bfff0f 	ldh	r2,-4(fp)
  80e538:	100491ba 	slli	r2,r2,6
  80e53c:	10c5883a 	add	r2,r2,r3
  80e540:	10800f04 	addi	r2,r2,60
  80e544:	10800017 	ldw	r2,0(r2)
  80e548:	1005003a 	cmpeq	r2,r2,zero
  80e54c:	1000081e 	bne	r2,zero,80e570 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
  80e550:	00c02074 	movhi	r3,129
  80e554:	18c87704 	addi	r3,r3,8668
  80e558:	e0bfff0f 	ldh	r2,-4(fp)
  80e55c:	100491ba 	slli	r2,r2,6
  80e560:	10c5883a 	add	r2,r2,r3
  80e564:	10800204 	addi	r2,r2,8
  80e568:	108000c3 	ldbu	r2,3(r2)
  80e56c:	e0bfff8d 	sth	r2,-2(fp)
		}
	}
	return result;
  80e570:	e0bfff8f 	ldh	r2,-2(fp)
}
  80e574:	df000117 	ldw	fp,4(sp)
  80e578:	dec00204 	addi	sp,sp,8
  80e57c:	f800283a 	ret

0080e580 <alt_up_sd_card_get_size>:

int alt_up_sd_card_get_size(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
  80e580:	defffd04 	addi	sp,sp,-12
  80e584:	df000215 	stw	fp,8(sp)
  80e588:	df000204 	addi	fp,sp,8
  80e58c:	e13ffe0d 	sth	r4,-8(fp)
	int result = -1;
  80e590:	00bfffc4 	movi	r2,-1
  80e594:	e0bfff15 	stw	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e598:	e0bffe0f 	ldh	r2,-8(fp)
  80e59c:	1004803a 	cmplt	r2,r2,zero
  80e5a0:	1000141e 	bne	r2,zero,80e5f4 <alt_up_sd_card_get_size+0x74>
  80e5a4:	e0bffe0f 	ldh	r2,-8(fp)
  80e5a8:	10800508 	cmpgei	r2,r2,20
  80e5ac:	1000111e 	bne	r2,zero,80e5f4 <alt_up_sd_card_get_size+0x74>
    {
        if (active_files[file_handle].in_use)
  80e5b0:	00c02074 	movhi	r3,129
  80e5b4:	18c87704 	addi	r3,r3,8668
  80e5b8:	e0bffe0f 	ldh	r2,-8(fp)
  80e5bc:	100491ba 	slli	r2,r2,6
  80e5c0:	10c5883a 	add	r2,r2,r3
  80e5c4:	10800f04 	addi	r2,r2,60
  80e5c8:	10800017 	ldw	r2,0(r2)
  80e5cc:	1005003a 	cmpeq	r2,r2,zero
  80e5d0:	1000081e 	bne	r2,zero,80e5f4 <alt_up_sd_card_get_size+0x74>
		{
			result = active_files[file_handle].file_size_in_bytes;
  80e5d4:	00c02074 	movhi	r3,129
  80e5d8:	18c87704 	addi	r3,r3,8668
  80e5dc:	e0bffe0f 	ldh	r2,-8(fp)
  80e5e0:	100491ba 	slli	r2,r2,6
  80e5e4:	10c5883a 	add	r2,r2,r3
  80e5e8:	10800604 	addi	r2,r2,24
  80e5ec:	10800017 	ldw	r2,0(r2)
  80e5f0:	e0bfff15 	stw	r2,-4(fp)
		}
	}
	return result;
  80e5f4:	e0bfff17 	ldw	r2,-4(fp)
}
  80e5f8:	df000217 	ldw	fp,8(sp)
  80e5fc:	dec00304 	addi	sp,sp,12
  80e600:	f800283a 	ret

0080e604 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
  80e604:	defff904 	addi	sp,sp,-28
  80e608:	dfc00615 	stw	ra,24(sp)
  80e60c:	df000515 	stw	fp,20(sp)
  80e610:	dc000415 	stw	r16,16(sp)
  80e614:	df000504 	addi	fp,sp,20
  80e618:	e13ffb0d 	sth	r4,-20(fp)
    short int ch = -1;
  80e61c:	00bfffc4 	movi	r2,-1
  80e620:	e0bffb8d 	sth	r2,-18(fp)

    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e624:	e0bffb0f 	ldh	r2,-20(fp)
  80e628:	1004803a 	cmplt	r2,r2,zero
  80e62c:	1000d01e 	bne	r2,zero,80e970 <alt_up_sd_card_read+0x36c>
  80e630:	e0bffb0f 	ldh	r2,-20(fp)
  80e634:	10800508 	cmpgei	r2,r2,20
  80e638:	1000cd1e 	bne	r2,zero,80e970 <alt_up_sd_card_read+0x36c>
    {
        if (active_files[file_handle].in_use)
  80e63c:	00c02074 	movhi	r3,129
  80e640:	18c87704 	addi	r3,r3,8668
  80e644:	e0bffb0f 	ldh	r2,-20(fp)
  80e648:	100491ba 	slli	r2,r2,6
  80e64c:	10c5883a 	add	r2,r2,r3
  80e650:	10800f04 	addi	r2,r2,60
  80e654:	10800017 	ldw	r2,0(r2)
  80e658:	1005003a 	cmpeq	r2,r2,zero
  80e65c:	1000c41e 	bne	r2,zero,80e970 <alt_up_sd_card_read+0x36c>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  80e660:	00c02074 	movhi	r3,129
  80e664:	18c87704 	addi	r3,r3,8668
  80e668:	e0bffb0f 	ldh	r2,-20(fp)
  80e66c:	100491ba 	slli	r2,r2,6
  80e670:	10c5883a 	add	r2,r2,r3
  80e674:	11000904 	addi	r4,r2,36
  80e678:	00c02074 	movhi	r3,129
  80e67c:	18c87704 	addi	r3,r3,8668
  80e680:	e0bffb0f 	ldh	r2,-20(fp)
  80e684:	100491ba 	slli	r2,r2,6
  80e688:	10c5883a 	add	r2,r2,r3
  80e68c:	10800604 	addi	r2,r2,24
  80e690:	20c00017 	ldw	r3,0(r4)
  80e694:	10800017 	ldw	r2,0(r2)
  80e698:	1880b52e 	bgeu	r3,r2,80e970 <alt_up_sd_card_read+0x36c>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  80e69c:	04002074 	movhi	r16,129
  80e6a0:	84086204 	addi	r16,r16,8584
  80e6a4:	00c02074 	movhi	r3,129
  80e6a8:	18c87704 	addi	r3,r3,8668
  80e6ac:	e0bffb0f 	ldh	r2,-20(fp)
  80e6b0:	100491ba 	slli	r2,r2,6
  80e6b4:	10c5883a 	add	r2,r2,r3
  80e6b8:	10800704 	addi	r2,r2,28
  80e6bc:	10800017 	ldw	r2,0(r2)
  80e6c0:	113fff84 	addi	r4,r2,-2
  80e6c4:	00802074 	movhi	r2,129
  80e6c8:	10886204 	addi	r2,r2,8584
  80e6cc:	11400383 	ldbu	r5,14(r2)
  80e6d0:	08006ec0 	call	8006ec <__mulsi3>
  80e6d4:	1007883a 	mov	r3,r2
  80e6d8:	80801417 	ldw	r2,80(r16)
  80e6dc:	1889883a 	add	r4,r3,r2
  80e6e0:	00c02074 	movhi	r3,129
  80e6e4:	18c87704 	addi	r3,r3,8668
  80e6e8:	e0bffb0f 	ldh	r2,-20(fp)
  80e6ec:	100491ba 	slli	r2,r2,6
  80e6f0:	10c5883a 	add	r2,r2,r3
  80e6f4:	10800804 	addi	r2,r2,32
  80e6f8:	10800017 	ldw	r2,0(r2)
  80e6fc:	2085883a 	add	r2,r4,r2
  80e700:	e0bffc15 	stw	r2,-16(fp)
                                  active_files[file_handle].current_sector_in_cluster;

                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
  80e704:	00c02074 	movhi	r3,129
  80e708:	18c87704 	addi	r3,r3,8668
  80e70c:	e0bffb0f 	ldh	r2,-20(fp)
  80e710:	100491ba 	slli	r2,r2,6
  80e714:	10c5883a 	add	r2,r2,r3
  80e718:	10800904 	addi	r2,r2,36
  80e71c:	10800017 	ldw	r2,0(r2)
  80e720:	1005003a 	cmpeq	r2,r2,zero
  80e724:	1000671e 	bne	r2,zero,80e8c4 <alt_up_sd_card_read+0x2c0>
  80e728:	00c02074 	movhi	r3,129
  80e72c:	18c87704 	addi	r3,r3,8668
  80e730:	e0bffb0f 	ldh	r2,-20(fp)
  80e734:	100491ba 	slli	r2,r2,6
  80e738:	10c5883a 	add	r2,r2,r3
  80e73c:	10800904 	addi	r2,r2,36
  80e740:	10800017 	ldw	r2,0(r2)
  80e744:	10807fcc 	andi	r2,r2,511
  80e748:	1004c03a 	cmpne	r2,r2,zero
  80e74c:	10005d1e 	bne	r2,zero,80e8c4 <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  80e750:	00c02074 	movhi	r3,129
  80e754:	18c87704 	addi	r3,r3,8668
  80e758:	e0bffb0f 	ldh	r2,-20(fp)
  80e75c:	100491ba 	slli	r2,r2,6
  80e760:	10c5883a 	add	r2,r2,r3
  80e764:	11000804 	addi	r4,r2,32
  80e768:	00802074 	movhi	r2,129
  80e76c:	10886204 	addi	r2,r2,8584
  80e770:	10800383 	ldbu	r2,14(r2)
  80e774:	10ffffc4 	addi	r3,r2,-1
  80e778:	20800017 	ldw	r2,0(r4)
  80e77c:	10c03f1e 	bne	r2,r3,80e87c <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  80e780:	00c02074 	movhi	r3,129
  80e784:	18c87704 	addi	r3,r3,8668
  80e788:	e0bffb0f 	ldh	r2,-20(fp)
  80e78c:	100491ba 	slli	r2,r2,6
  80e790:	10c5883a 	add	r2,r2,r3
  80e794:	10800704 	addi	r2,r2,28
  80e798:	e17ffd04 	addi	r5,fp,-12
  80e79c:	11000017 	ldw	r4,0(r2)
  80e7a0:	080b4080 	call	80b408 <get_cluster_flag>
  80e7a4:	1005003a 	cmpeq	r2,r2,zero
  80e7a8:	1000311e 	bne	r2,zero,80e870 <alt_up_sd_card_read+0x26c>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
  80e7ac:	e0bffd0b 	ldhu	r2,-12(fp)
  80e7b0:	10fffe0c 	andi	r3,r2,65528
  80e7b4:	00bffe14 	movui	r2,65528
  80e7b8:	1880031e 	bne	r3,r2,80e7c8 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
  80e7bc:	00bfffc4 	movi	r2,-1
  80e7c0:	e0bffe15 	stw	r2,-8(fp)
  80e7c4:	00006c06 	br	80e978 <alt_up_sd_card_read+0x374>
                            }
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  80e7c8:	00c02074 	movhi	r3,129
  80e7cc:	18c87704 	addi	r3,r3,8668
  80e7d0:	e0bffb0f 	ldh	r2,-20(fp)
  80e7d4:	100491ba 	slli	r2,r2,6
  80e7d8:	10c5883a 	add	r2,r2,r3
  80e7dc:	10c00704 	addi	r3,r2,28
  80e7e0:	e0bffd0b 	ldhu	r2,-12(fp)
  80e7e4:	18800015 	stw	r2,0(r3)
								active_files[file_handle].current_sector_in_cluster = 0;
  80e7e8:	00c02074 	movhi	r3,129
  80e7ec:	18c87704 	addi	r3,r3,8668
  80e7f0:	e0bffb0f 	ldh	r2,-20(fp)
  80e7f4:	100491ba 	slli	r2,r2,6
  80e7f8:	10c5883a 	add	r2,r2,r3
  80e7fc:	10800804 	addi	r2,r2,32
  80e800:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  80e804:	04002074 	movhi	r16,129
  80e808:	84086204 	addi	r16,r16,8584
  80e80c:	00c02074 	movhi	r3,129
  80e810:	18c87704 	addi	r3,r3,8668
  80e814:	e0bffb0f 	ldh	r2,-20(fp)
  80e818:	100491ba 	slli	r2,r2,6
  80e81c:	10c5883a 	add	r2,r2,r3
  80e820:	10800704 	addi	r2,r2,28
  80e824:	10800017 	ldw	r2,0(r2)
  80e828:	113fff84 	addi	r4,r2,-2
  80e82c:	00802074 	movhi	r2,129
  80e830:	10886204 	addi	r2,r2,8584
  80e834:	11400383 	ldbu	r5,14(r2)
  80e838:	08006ec0 	call	8006ec <__mulsi3>
  80e83c:	1007883a 	mov	r3,r2
  80e840:	80801417 	ldw	r2,80(r16)
  80e844:	1889883a 	add	r4,r3,r2
  80e848:	00c02074 	movhi	r3,129
  80e84c:	18c87704 	addi	r3,r3,8668
  80e850:	e0bffb0f 	ldh	r2,-20(fp)
  80e854:	100491ba 	slli	r2,r2,6
  80e858:	10c5883a 	add	r2,r2,r3
  80e85c:	10800804 	addi	r2,r2,32
  80e860:	10800017 	ldw	r2,0(r2)
  80e864:	2085883a 	add	r2,r4,r2
  80e868:	e0bffc15 	stw	r2,-16(fp)
  80e86c:	00001506 	br	80e8c4 <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;
                            }
                        }
                        else
                        {
                            return -2;
  80e870:	00bfff84 	movi	r2,-2
  80e874:	e0bffe15 	stw	r2,-8(fp)
  80e878:	00003f06 	br	80e978 <alt_up_sd_card_read+0x374>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  80e87c:	00c02074 	movhi	r3,129
  80e880:	18c87704 	addi	r3,r3,8668
  80e884:	e0bffb0f 	ldh	r2,-20(fp)
  80e888:	100491ba 	slli	r2,r2,6
  80e88c:	10c5883a 	add	r2,r2,r3
  80e890:	11000804 	addi	r4,r2,32
  80e894:	00c02074 	movhi	r3,129
  80e898:	18c87704 	addi	r3,r3,8668
  80e89c:	e0bffb0f 	ldh	r2,-20(fp)
  80e8a0:	100491ba 	slli	r2,r2,6
  80e8a4:	10c5883a 	add	r2,r2,r3
  80e8a8:	10800804 	addi	r2,r2,32
  80e8ac:	10800017 	ldw	r2,0(r2)
  80e8b0:	10800044 	addi	r2,r2,1
  80e8b4:	20800015 	stw	r2,0(r4)
                        data_sector = data_sector + 1;
  80e8b8:	e0bffc17 	ldw	r2,-16(fp)
  80e8bc:	10800044 	addi	r2,r2,1
  80e8c0:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
  80e8c4:	e0fffc17 	ldw	r3,-16(fp)
  80e8c8:	d0a02217 	ldw	r2,-32632(gp)
  80e8cc:	1887883a 	add	r3,r3,r2
  80e8d0:	d0a02617 	ldw	r2,-32616(gp)
  80e8d4:	18800826 	beq	r3,r2,80e8f8 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  80e8d8:	e13ffc17 	ldw	r4,-16(fp)
  80e8dc:	d1602217 	ldw	r5,-32632(gp)
  80e8e0:	080b3240 	call	80b324 <Read_Sector_Data>
  80e8e4:	1004c03a 	cmpne	r2,r2,zero
  80e8e8:	1000031e 	bne	r2,zero,80e8f8 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
  80e8ec:	00bfff84 	movi	r2,-2
  80e8f0:	e0bffe15 	stw	r2,-8(fp)
  80e8f4:	00002006 	br	80e978 <alt_up_sd_card_read+0x374>
                    }
                }

                ch = (char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
  80e8f8:	00c02074 	movhi	r3,129
  80e8fc:	18c87704 	addi	r3,r3,8668
  80e900:	e0bffb0f 	ldh	r2,-20(fp)
  80e904:	100491ba 	slli	r2,r2,6
  80e908:	10c5883a 	add	r2,r2,r3
  80e90c:	10800904 	addi	r2,r2,36
  80e910:	10800017 	ldw	r2,0(r2)
  80e914:	10c07fcc 	andi	r3,r2,511
  80e918:	d0a02117 	ldw	r2,-32636(gp)
  80e91c:	1885883a 	add	r2,r3,r2
  80e920:	10800023 	ldbuio	r2,0(r2)
  80e924:	10803fcc 	andi	r2,r2,255
  80e928:	1080201c 	xori	r2,r2,128
  80e92c:	10bfe004 	addi	r2,r2,-128
  80e930:	e0bffb8d 	sth	r2,-18(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  80e934:	00c02074 	movhi	r3,129
  80e938:	18c87704 	addi	r3,r3,8668
  80e93c:	e0bffb0f 	ldh	r2,-20(fp)
  80e940:	100491ba 	slli	r2,r2,6
  80e944:	10c5883a 	add	r2,r2,r3
  80e948:	11000904 	addi	r4,r2,36
  80e94c:	00c02074 	movhi	r3,129
  80e950:	18c87704 	addi	r3,r3,8668
  80e954:	e0bffb0f 	ldh	r2,-20(fp)
  80e958:	100491ba 	slli	r2,r2,6
  80e95c:	10c5883a 	add	r2,r2,r3
  80e960:	10800904 	addi	r2,r2,36
  80e964:	10800017 	ldw	r2,0(r2)
  80e968:	10800044 	addi	r2,r2,1
  80e96c:	20800015 	stw	r2,0(r4)
            }
        }
    }

    return ch;
  80e970:	e0bffb8f 	ldh	r2,-18(fp)
  80e974:	e0bffe15 	stw	r2,-8(fp)
}
  80e978:	e0bffe17 	ldw	r2,-8(fp)
  80e97c:	dfc00617 	ldw	ra,24(sp)
  80e980:	df000517 	ldw	fp,20(sp)
  80e984:	dc000417 	ldw	r16,16(sp)
  80e988:	dec00704 	addi	sp,sp,28
  80e98c:	f800283a 	ret

0080e990 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
  80e990:	defff704 	addi	sp,sp,-36
  80e994:	dfc00815 	stw	ra,32(sp)
  80e998:	df000715 	stw	fp,28(sp)
  80e99c:	dc000615 	stw	r16,24(sp)
  80e9a0:	df000704 	addi	fp,sp,28
  80e9a4:	e13ff90d 	sth	r4,-28(fp)
  80e9a8:	e17ff985 	stb	r5,-26(fp)
    bool result = false;
  80e9ac:	e03ffa15 	stw	zero,-24(fp)

    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
  80e9b0:	e0bff90f 	ldh	r2,-28(fp)
  80e9b4:	1004803a 	cmplt	r2,r2,zero
  80e9b8:	10016d1e 	bne	r2,zero,80ef70 <alt_up_sd_card_write+0x5e0>
  80e9bc:	e0bff90f 	ldh	r2,-28(fp)
  80e9c0:	10800508 	cmpgei	r2,r2,20
  80e9c4:	10016a1e 	bne	r2,zero,80ef70 <alt_up_sd_card_write+0x5e0>
    {
        if (active_files[file_handle].in_use)
  80e9c8:	00c02074 	movhi	r3,129
  80e9cc:	18c87704 	addi	r3,r3,8668
  80e9d0:	e0bff90f 	ldh	r2,-28(fp)
  80e9d4:	100491ba 	slli	r2,r2,6
  80e9d8:	10c5883a 	add	r2,r2,r3
  80e9dc:	10800f04 	addi	r2,r2,60
  80e9e0:	10800017 	ldw	r2,0(r2)
  80e9e4:	1005003a 	cmpeq	r2,r2,zero
  80e9e8:	1001611e 	bne	r2,zero,80ef70 <alt_up_sd_card_write+0x5e0>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  80e9ec:	04002074 	movhi	r16,129
  80e9f0:	84086204 	addi	r16,r16,8584
  80e9f4:	00c02074 	movhi	r3,129
  80e9f8:	18c87704 	addi	r3,r3,8668
  80e9fc:	e0bff90f 	ldh	r2,-28(fp)
  80ea00:	100491ba 	slli	r2,r2,6
  80ea04:	10c5883a 	add	r2,r2,r3
  80ea08:	10800704 	addi	r2,r2,28
  80ea0c:	10800017 	ldw	r2,0(r2)
  80ea10:	113fff84 	addi	r4,r2,-2
  80ea14:	00802074 	movhi	r2,129
  80ea18:	10886204 	addi	r2,r2,8584
  80ea1c:	11400383 	ldbu	r5,14(r2)
  80ea20:	08006ec0 	call	8006ec <__mulsi3>
  80ea24:	1007883a 	mov	r3,r2
  80ea28:	80801417 	ldw	r2,80(r16)
  80ea2c:	1889883a 	add	r4,r3,r2
  80ea30:	00c02074 	movhi	r3,129
  80ea34:	18c87704 	addi	r3,r3,8668
  80ea38:	e0bff90f 	ldh	r2,-28(fp)
  80ea3c:	100491ba 	slli	r2,r2,6
  80ea40:	10c5883a 	add	r2,r2,r3
  80ea44:	10800804 	addi	r2,r2,32
  80ea48:	10800017 	ldw	r2,0(r2)
  80ea4c:	2085883a 	add	r2,r4,r2
  80ea50:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
  80ea54:	00c02074 	movhi	r3,129
  80ea58:	18c87704 	addi	r3,r3,8668
  80ea5c:	e0bff90f 	ldh	r2,-28(fp)
  80ea60:	100491ba 	slli	r2,r2,6
  80ea64:	10c5883a 	add	r2,r2,r3
  80ea68:	10c00904 	addi	r3,r2,36
  80ea6c:	00802074 	movhi	r2,129
  80ea70:	10886204 	addi	r2,r2,8584
  80ea74:	1140030b 	ldhu	r5,12(r2)
  80ea78:	19000017 	ldw	r4,0(r3)
  80ea7c:	08006dc0 	call	8006dc <__umodsi3>
  80ea80:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
  80ea84:	00c02074 	movhi	r3,129
  80ea88:	18c87704 	addi	r3,r3,8668
  80ea8c:	e0bff90f 	ldh	r2,-28(fp)
  80ea90:	100491ba 	slli	r2,r2,6
  80ea94:	10c5883a 	add	r2,r2,r3
  80ea98:	11000904 	addi	r4,r2,36
  80ea9c:	00c02074 	movhi	r3,129
  80eaa0:	18c87704 	addi	r3,r3,8668
  80eaa4:	e0bff90f 	ldh	r2,-28(fp)
  80eaa8:	100491ba 	slli	r2,r2,6
  80eaac:	10c5883a 	add	r2,r2,r3
  80eab0:	10800604 	addi	r2,r2,24
  80eab4:	20c00017 	ldw	r3,0(r4)
  80eab8:	10800017 	ldw	r2,0(r2)
  80eabc:	1880652e 	bgeu	r3,r2,80ec54 <alt_up_sd_card_write+0x2c4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  80eac0:	00c02074 	movhi	r3,129
  80eac4:	18c87704 	addi	r3,r3,8668
  80eac8:	e0bff90f 	ldh	r2,-28(fp)
  80eacc:	100491ba 	slli	r2,r2,6
  80ead0:	10c5883a 	add	r2,r2,r3
  80ead4:	10800904 	addi	r2,r2,36
  80ead8:	10800017 	ldw	r2,0(r2)
  80eadc:	1005003a 	cmpeq	r2,r2,zero
  80eae0:	1000d81e 	bne	r2,zero,80ee44 <alt_up_sd_card_write+0x4b4>
  80eae4:	e0bffc0f 	ldh	r2,-16(fp)
  80eae8:	1004c03a 	cmpne	r2,r2,zero
  80eaec:	1000d51e 	bne	r2,zero,80ee44 <alt_up_sd_card_write+0x4b4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  80eaf0:	00c02074 	movhi	r3,129
  80eaf4:	18c87704 	addi	r3,r3,8668
  80eaf8:	e0bff90f 	ldh	r2,-28(fp)
  80eafc:	100491ba 	slli	r2,r2,6
  80eb00:	10c5883a 	add	r2,r2,r3
  80eb04:	11000804 	addi	r4,r2,32
  80eb08:	00802074 	movhi	r2,129
  80eb0c:	10886204 	addi	r2,r2,8584
  80eb10:	10800383 	ldbu	r2,14(r2)
  80eb14:	10ffffc4 	addi	r3,r2,-1
  80eb18:	20800017 	ldw	r2,0(r4)
  80eb1c:	10c03a1e 	bne	r2,r3,80ec08 <alt_up_sd_card_write+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
  80eb20:	00c02074 	movhi	r3,129
  80eb24:	18c87704 	addi	r3,r3,8668
  80eb28:	e0bff90f 	ldh	r2,-28(fp)
  80eb2c:	100491ba 	slli	r2,r2,6
  80eb30:	10c5883a 	add	r2,r2,r3
  80eb34:	10800704 	addi	r2,r2,28
  80eb38:	e17ffc84 	addi	r5,fp,-14
  80eb3c:	11000017 	ldw	r4,0(r2)
  80eb40:	080b4080 	call	80b408 <get_cluster_flag>
  80eb44:	1005003a 	cmpeq	r2,r2,zero
  80eb48:	10002d1e 	bne	r2,zero,80ec00 <alt_up_sd_card_write+0x270>
                        {
                            if (next_cluster < 0x0000fff8)
  80eb4c:	e0fffc8b 	ldhu	r3,-14(fp)
  80eb50:	00bffdd4 	movui	r2,65527
  80eb54:	10c0bb36 	bltu	r2,r3,80ee44 <alt_up_sd_card_write+0x4b4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
  80eb58:	00c02074 	movhi	r3,129
  80eb5c:	18c87704 	addi	r3,r3,8668
  80eb60:	e0bff90f 	ldh	r2,-28(fp)
  80eb64:	100491ba 	slli	r2,r2,6
  80eb68:	10c5883a 	add	r2,r2,r3
  80eb6c:	10c00704 	addi	r3,r2,28
  80eb70:	e0bffc8b 	ldhu	r2,-14(fp)
  80eb74:	18800015 	stw	r2,0(r3)
								active_files[file_handle].current_sector_in_cluster = 0;
  80eb78:	00c02074 	movhi	r3,129
  80eb7c:	18c87704 	addi	r3,r3,8668
  80eb80:	e0bff90f 	ldh	r2,-28(fp)
  80eb84:	100491ba 	slli	r2,r2,6
  80eb88:	10c5883a 	add	r2,r2,r3
  80eb8c:	10800804 	addi	r2,r2,32
  80eb90:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  80eb94:	04002074 	movhi	r16,129
  80eb98:	84086204 	addi	r16,r16,8584
  80eb9c:	00c02074 	movhi	r3,129
  80eba0:	18c87704 	addi	r3,r3,8668
  80eba4:	e0bff90f 	ldh	r2,-28(fp)
  80eba8:	100491ba 	slli	r2,r2,6
  80ebac:	10c5883a 	add	r2,r2,r3
  80ebb0:	10800704 	addi	r2,r2,28
  80ebb4:	10800017 	ldw	r2,0(r2)
  80ebb8:	113fff84 	addi	r4,r2,-2
  80ebbc:	00802074 	movhi	r2,129
  80ebc0:	10886204 	addi	r2,r2,8584
  80ebc4:	11400383 	ldbu	r5,14(r2)
  80ebc8:	08006ec0 	call	8006ec <__mulsi3>
  80ebcc:	1007883a 	mov	r3,r2
  80ebd0:	80801417 	ldw	r2,80(r16)
  80ebd4:	1889883a 	add	r4,r3,r2
  80ebd8:	00c02074 	movhi	r3,129
  80ebdc:	18c87704 	addi	r3,r3,8668
  80ebe0:	e0bff90f 	ldh	r2,-28(fp)
  80ebe4:	100491ba 	slli	r2,r2,6
  80ebe8:	10c5883a 	add	r2,r2,r3
  80ebec:	10800804 	addi	r2,r2,32
  80ebf0:	10800017 	ldw	r2,0(r2)
  80ebf4:	2085883a 	add	r2,r4,r2
  80ebf8:	e0bffb15 	stw	r2,-20(fp)
  80ebfc:	00009106 	br	80ee44 <alt_up_sd_card_write+0x4b4>
                                  active_files[file_handle].current_sector_in_cluster;
                            }
                        }
                        else
                        {
                            return false;
  80ec00:	e03ffe15 	stw	zero,-8(fp)
  80ec04:	0000dc06 	br	80ef78 <alt_up_sd_card_write+0x5e8>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
  80ec08:	00c02074 	movhi	r3,129
  80ec0c:	18c87704 	addi	r3,r3,8668
  80ec10:	e0bff90f 	ldh	r2,-28(fp)
  80ec14:	100491ba 	slli	r2,r2,6
  80ec18:	10c5883a 	add	r2,r2,r3
  80ec1c:	11000804 	addi	r4,r2,32
  80ec20:	00c02074 	movhi	r3,129
  80ec24:	18c87704 	addi	r3,r3,8668
  80ec28:	e0bff90f 	ldh	r2,-28(fp)
  80ec2c:	100491ba 	slli	r2,r2,6
  80ec30:	10c5883a 	add	r2,r2,r3
  80ec34:	10800804 	addi	r2,r2,32
  80ec38:	10800017 	ldw	r2,0(r2)
  80ec3c:	10800044 	addi	r2,r2,1
  80ec40:	20800015 	stw	r2,0(r4)
                        data_sector = data_sector + 1;
  80ec44:	e0bffb17 	ldw	r2,-20(fp)
  80ec48:	10800044 	addi	r2,r2,1
  80ec4c:	e0bffb15 	stw	r2,-20(fp)
  80ec50:	00007c06 	br	80ee44 <alt_up_sd_card_write+0x4b4>
                    }
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
  80ec54:	00c02074 	movhi	r3,129
  80ec58:	18c87704 	addi	r3,r3,8668
  80ec5c:	e0bff90f 	ldh	r2,-28(fp)
  80ec60:	100491ba 	slli	r2,r2,6
  80ec64:	10c5883a 	add	r2,r2,r3
  80ec68:	10800904 	addi	r2,r2,36
  80ec6c:	10800017 	ldw	r2,0(r2)
  80ec70:	1005003a 	cmpeq	r2,r2,zero
  80ec74:	1000731e 	bne	r2,zero,80ee44 <alt_up_sd_card_write+0x4b4>
  80ec78:	e0bffc0f 	ldh	r2,-16(fp)
  80ec7c:	1004c03a 	cmpne	r2,r2,zero
  80ec80:	1000701e 	bne	r2,zero,80ee44 <alt_up_sd_card_write+0x4b4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
  80ec84:	00c02074 	movhi	r3,129
  80ec88:	18c87704 	addi	r3,r3,8668
  80ec8c:	e0bff90f 	ldh	r2,-28(fp)
  80ec90:	100491ba 	slli	r2,r2,6
  80ec94:	10c5883a 	add	r2,r2,r3
  80ec98:	11000804 	addi	r4,r2,32
  80ec9c:	00802074 	movhi	r2,129
  80eca0:	10886204 	addi	r2,r2,8584
  80eca4:	10800383 	ldbu	r2,14(r2)
  80eca8:	10ffffc4 	addi	r3,r2,-1
  80ecac:	20800017 	ldw	r2,0(r4)
  80ecb0:	10c0381e 	bne	r2,r3,80ed94 <alt_up_sd_card_write+0x404>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
  80ecb4:	e13ffd04 	addi	r4,fp,-12
  80ecb8:	080d08c0 	call	80d08c <find_first_empty_cluster>
  80ecbc:	1005003a 	cmpeq	r2,r2,zero
  80ecc0:	1000321e 	bne	r2,zero,80ed8c <alt_up_sd_card_write+0x3fc>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
  80ecc4:	00c02074 	movhi	r3,129
  80ecc8:	18c87704 	addi	r3,r3,8668
  80eccc:	e0bff90f 	ldh	r2,-28(fp)
  80ecd0:	100491ba 	slli	r2,r2,6
  80ecd4:	10c5883a 	add	r2,r2,r3
  80ecd8:	10c00704 	addi	r3,r2,28
  80ecdc:	e0bffd17 	ldw	r2,-12(fp)
  80ece0:	117fffcc 	andi	r5,r2,65535
  80ece4:	2960001c 	xori	r5,r5,32768
  80ece8:	29600004 	addi	r5,r5,-32768
  80ecec:	19000017 	ldw	r4,0(r3)
  80ecf0:	01800044 	movi	r6,1
  80ecf4:	080b4b80 	call	80b4b8 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
  80ecf8:	e13ffd17 	ldw	r4,-12(fp)
  80ecfc:	017fffc4 	movi	r5,-1
  80ed00:	01800044 	movi	r6,1
  80ed04:	080b4b80 	call	80b4b8 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
  80ed08:	00c02074 	movhi	r3,129
  80ed0c:	18c87704 	addi	r3,r3,8668
  80ed10:	e0bff90f 	ldh	r2,-28(fp)
  80ed14:	100491ba 	slli	r2,r2,6
  80ed18:	10c5883a 	add	r2,r2,r3
  80ed1c:	10c00704 	addi	r3,r2,28
  80ed20:	e0bffd17 	ldw	r2,-12(fp)
  80ed24:	117fffcc 	andi	r5,r2,65535
  80ed28:	2960001c 	xori	r5,r5,32768
  80ed2c:	29600004 	addi	r5,r5,-32768
  80ed30:	19000017 	ldw	r4,0(r3)
  80ed34:	000d883a 	mov	r6,zero
  80ed38:	080b4b80 	call	80b4b8 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
  80ed3c:	e13ffd17 	ldw	r4,-12(fp)
  80ed40:	017fffc4 	movi	r5,-1
  80ed44:	000d883a 	mov	r6,zero
  80ed48:	080b4b80 	call	80b4b8 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
  80ed4c:	00c02074 	movhi	r3,129
  80ed50:	18c87704 	addi	r3,r3,8668
  80ed54:	e0bff90f 	ldh	r2,-28(fp)
  80ed58:	100491ba 	slli	r2,r2,6
  80ed5c:	10c5883a 	add	r2,r2,r3
  80ed60:	10c00704 	addi	r3,r2,28
  80ed64:	e0bffd17 	ldw	r2,-12(fp)
  80ed68:	18800015 	stw	r2,0(r3)
							active_files[file_handle].current_sector_in_cluster = 0;
  80ed6c:	00c02074 	movhi	r3,129
  80ed70:	18c87704 	addi	r3,r3,8668
  80ed74:	e0bff90f 	ldh	r2,-28(fp)
  80ed78:	100491ba 	slli	r2,r2,6
  80ed7c:	10c5883a 	add	r2,r2,r3
  80ed80:	10800804 	addi	r2,r2,32
  80ed84:	10000015 	stw	zero,0(r2)
  80ed88:	00001406 	br	80eddc <alt_up_sd_card_write+0x44c>
						}
						else
						{
							return false;
  80ed8c:	e03ffe15 	stw	zero,-8(fp)
  80ed90:	00007906 	br	80ef78 <alt_up_sd_card_write+0x5e8>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
  80ed94:	00c02074 	movhi	r3,129
  80ed98:	18c87704 	addi	r3,r3,8668
  80ed9c:	e0bff90f 	ldh	r2,-28(fp)
  80eda0:	100491ba 	slli	r2,r2,6
  80eda4:	10c5883a 	add	r2,r2,r3
  80eda8:	14000804 	addi	r16,r2,32
  80edac:	00c02074 	movhi	r3,129
  80edb0:	18c87704 	addi	r3,r3,8668
  80edb4:	e0bff90f 	ldh	r2,-28(fp)
  80edb8:	100491ba 	slli	r2,r2,6
  80edbc:	10c5883a 	add	r2,r2,r3
  80edc0:	10c00904 	addi	r3,r2,36
  80edc4:	00802074 	movhi	r2,129
  80edc8:	10886204 	addi	r2,r2,8584
  80edcc:	1140030b 	ldhu	r5,12(r2)
  80edd0:	19000017 	ldw	r4,0(r3)
  80edd4:	08006cc0 	call	8006cc <__udivsi3>
  80edd8:	80800015 	stw	r2,0(r16)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
  80eddc:	04002074 	movhi	r16,129
  80ede0:	84086204 	addi	r16,r16,8584
  80ede4:	00c02074 	movhi	r3,129
  80ede8:	18c87704 	addi	r3,r3,8668
  80edec:	e0bff90f 	ldh	r2,-28(fp)
  80edf0:	100491ba 	slli	r2,r2,6
  80edf4:	10c5883a 	add	r2,r2,r3
  80edf8:	10800704 	addi	r2,r2,28
  80edfc:	10800017 	ldw	r2,0(r2)
  80ee00:	113fff84 	addi	r4,r2,-2
  80ee04:	00802074 	movhi	r2,129
  80ee08:	10886204 	addi	r2,r2,8584
  80ee0c:	11400383 	ldbu	r5,14(r2)
  80ee10:	08006ec0 	call	8006ec <__mulsi3>
  80ee14:	1007883a 	mov	r3,r2
  80ee18:	80801417 	ldw	r2,80(r16)
  80ee1c:	1889883a 	add	r4,r3,r2
  80ee20:	00c02074 	movhi	r3,129
  80ee24:	18c87704 	addi	r3,r3,8668
  80ee28:	e0bff90f 	ldh	r2,-28(fp)
  80ee2c:	100491ba 	slli	r2,r2,6
  80ee30:	10c5883a 	add	r2,r2,r3
  80ee34:	10800804 	addi	r2,r2,32
  80ee38:	10800017 	ldw	r2,0(r2)
  80ee3c:	2085883a 	add	r2,r4,r2
  80ee40:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
  80ee44:	e0fffb17 	ldw	r3,-20(fp)
  80ee48:	d0a02217 	ldw	r2,-32632(gp)
  80ee4c:	1887883a 	add	r3,r3,r2
  80ee50:	d0a02617 	ldw	r2,-32616(gp)
  80ee54:	18800726 	beq	r3,r2,80ee74 <alt_up_sd_card_write+0x4e4>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
  80ee58:	e13ffb17 	ldw	r4,-20(fp)
  80ee5c:	d1602217 	ldw	r5,-32632(gp)
  80ee60:	080b3240 	call	80b324 <Read_Sector_Data>
  80ee64:	1004c03a 	cmpne	r2,r2,zero
  80ee68:	1000021e 	bne	r2,zero,80ee74 <alt_up_sd_card_write+0x4e4>
                {
					return false;
  80ee6c:	e03ffe15 	stw	zero,-8(fp)
  80ee70:	00004106 	br	80ef78 <alt_up_sd_card_write+0x5e8>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
  80ee74:	e0fffc0f 	ldh	r3,-16(fp)
  80ee78:	d0a02117 	ldw	r2,-32636(gp)
  80ee7c:	1885883a 	add	r2,r3,r2
  80ee80:	1007883a 	mov	r3,r2
  80ee84:	e0bff987 	ldb	r2,-26(fp)
  80ee88:	18800025 	stbio	r2,0(r3)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
  80ee8c:	00c02074 	movhi	r3,129
  80ee90:	18c87704 	addi	r3,r3,8668
  80ee94:	e0bff90f 	ldh	r2,-28(fp)
  80ee98:	100491ba 	slli	r2,r2,6
  80ee9c:	10c5883a 	add	r2,r2,r3
  80eea0:	11000904 	addi	r4,r2,36
  80eea4:	00c02074 	movhi	r3,129
  80eea8:	18c87704 	addi	r3,r3,8668
  80eeac:	e0bff90f 	ldh	r2,-28(fp)
  80eeb0:	100491ba 	slli	r2,r2,6
  80eeb4:	10c5883a 	add	r2,r2,r3
  80eeb8:	10800904 	addi	r2,r2,36
  80eebc:	10800017 	ldw	r2,0(r2)
  80eec0:	10800044 	addi	r2,r2,1
  80eec4:	20800015 	stw	r2,0(r4)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
  80eec8:	00c02074 	movhi	r3,129
  80eecc:	18c87704 	addi	r3,r3,8668
  80eed0:	e0bff90f 	ldh	r2,-28(fp)
  80eed4:	100491ba 	slli	r2,r2,6
  80eed8:	10c5883a 	add	r2,r2,r3
  80eedc:	11000904 	addi	r4,r2,36
  80eee0:	00c02074 	movhi	r3,129
  80eee4:	18c87704 	addi	r3,r3,8668
  80eee8:	e0bff90f 	ldh	r2,-28(fp)
  80eeec:	100491ba 	slli	r2,r2,6
  80eef0:	10c5883a 	add	r2,r2,r3
  80eef4:	10800604 	addi	r2,r2,24
  80eef8:	20c00017 	ldw	r3,0(r4)
  80eefc:	10800017 	ldw	r2,0(r2)
  80ef00:	18801736 	bltu	r3,r2,80ef60 <alt_up_sd_card_write+0x5d0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
  80ef04:	00c02074 	movhi	r3,129
  80ef08:	18c87704 	addi	r3,r3,8668
  80ef0c:	e0bff90f 	ldh	r2,-28(fp)
  80ef10:	100491ba 	slli	r2,r2,6
  80ef14:	10c5883a 	add	r2,r2,r3
  80ef18:	11000604 	addi	r4,r2,24
  80ef1c:	00c02074 	movhi	r3,129
  80ef20:	18c87704 	addi	r3,r3,8668
  80ef24:	e0bff90f 	ldh	r2,-28(fp)
  80ef28:	100491ba 	slli	r2,r2,6
  80ef2c:	10c5883a 	add	r2,r2,r3
  80ef30:	10800604 	addi	r2,r2,24
  80ef34:	10800017 	ldw	r2,0(r2)
  80ef38:	10800044 	addi	r2,r2,1
  80ef3c:	20800015 	stw	r2,0(r4)
				active_files[file_handle].modified = true;
  80ef40:	00c02074 	movhi	r3,129
  80ef44:	18c87704 	addi	r3,r3,8668
  80ef48:	e0bff90f 	ldh	r2,-28(fp)
  80ef4c:	100491ba 	slli	r2,r2,6
  80ef50:	10c5883a 	add	r2,r2,r3
  80ef54:	10c00e04 	addi	r3,r2,56
  80ef58:	00800044 	movi	r2,1
  80ef5c:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
  80ef60:	00800044 	movi	r2,1
  80ef64:	d0a02515 	stw	r2,-32620(gp)
			result = true;
  80ef68:	00800044 	movi	r2,1
  80ef6c:	e0bffa15 	stw	r2,-24(fp)
		}
    }

    return result;
  80ef70:	e0bffa17 	ldw	r2,-24(fp)
  80ef74:	e0bffe15 	stw	r2,-8(fp)
}
  80ef78:	e0bffe17 	ldw	r2,-8(fp)
  80ef7c:	dfc00817 	ldw	ra,32(sp)
  80ef80:	df000717 	ldw	fp,28(sp)
  80ef84:	dc000617 	ldw	r16,24(sp)
  80ef88:	dec00904 	addi	sp,sp,36
  80ef8c:	f800283a 	ret

0080ef90 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
  80ef90:	defffa04 	addi	sp,sp,-24
  80ef94:	dfc00515 	stw	ra,20(sp)
  80ef98:	df000415 	stw	fp,16(sp)
  80ef9c:	dc000315 	stw	r16,12(sp)
  80efa0:	df000404 	addi	fp,sp,16
  80efa4:	e13ffc0d 	sth	r4,-16(fp)
    bool result = false;
  80efa8:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
  80efac:	080dbb80 	call	80dbb8 <alt_up_sd_card_is_Present>
  80efb0:	1005003a 	cmpeq	r2,r2,zero
  80efb4:	10005f1e 	bne	r2,zero,80f134 <alt_up_sd_card_fclose+0x1a4>
  80efb8:	d0a01b17 	ldw	r2,-32660(gp)
  80efbc:	1005003a 	cmpeq	r2,r2,zero
  80efc0:	10005c1e 	bne	r2,zero,80f134 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use)
  80efc4:	00c02074 	movhi	r3,129
  80efc8:	18c87704 	addi	r3,r3,8668
  80efcc:	e0bffc0f 	ldh	r2,-16(fp)
  80efd0:	100491ba 	slli	r2,r2,6
  80efd4:	10c5883a 	add	r2,r2,r3
  80efd8:	10800f04 	addi	r2,r2,60
  80efdc:	10800017 	ldw	r2,0(r2)
  80efe0:	1005003a 	cmpeq	r2,r2,zero
  80efe4:	1000531e 	bne	r2,zero,80f134 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
  80efe8:	00c02074 	movhi	r3,129
  80efec:	18c87704 	addi	r3,r3,8668
  80eff0:	e0bffc0f 	ldh	r2,-16(fp)
  80eff4:	100491ba 	slli	r2,r2,6
  80eff8:	10c5883a 	add	r2,r2,r3
  80effc:	10800e04 	addi	r2,r2,56
  80f000:	10800017 	ldw	r2,0(r2)
  80f004:	1005003a 	cmpeq	r2,r2,zero
  80f008:	1000411e 	bne	r2,zero,80f110 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
  80f00c:	00c02074 	movhi	r3,129
  80f010:	18c87704 	addi	r3,r3,8668
  80f014:	e0bffc0f 	ldh	r2,-16(fp)
  80f018:	100491ba 	slli	r2,r2,6
  80f01c:	10c5883a 	add	r2,r2,r3
  80f020:	10800b04 	addi	r2,r2,44
  80f024:	10800017 	ldw	r2,0(r2)
  80f028:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
  80f02c:	00c02074 	movhi	r3,129
  80f030:	18c87704 	addi	r3,r3,8668
  80f034:	e0bffc0f 	ldh	r2,-16(fp)
  80f038:	100491ba 	slli	r2,r2,6
  80f03c:	10c5883a 	add	r2,r2,r3
  80f040:	10800a04 	addi	r2,r2,40
  80f044:	10800017 	ldw	r2,0(r2)
  80f048:	1004c03a 	cmpne	r2,r2,zero
  80f04c:	1000071e 	bne	r2,zero,80f06c <alt_up_sd_card_fclose+0xdc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
  80f050:	00802074 	movhi	r2,129
  80f054:	10886204 	addi	r2,r2,8584
  80f058:	e0fffe17 	ldw	r3,-8(fp)
  80f05c:	10801317 	ldw	r2,76(r2)
  80f060:	1885883a 	add	r2,r3,r2
  80f064:	e0bffe15 	stw	r2,-8(fp)
  80f068:	00001306 	br	80f0b8 <alt_up_sd_card_fclose+0x128>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset +
  80f06c:	00802074 	movhi	r2,129
  80f070:	10886204 	addi	r2,r2,8584
  80f074:	10c01417 	ldw	r3,80(r2)
  80f078:	e0bffe17 	ldw	r2,-8(fp)
  80f07c:	18a1883a 	add	r16,r3,r2
  80f080:	00c02074 	movhi	r3,129
  80f084:	18c87704 	addi	r3,r3,8668
  80f088:	e0bffc0f 	ldh	r2,-16(fp)
  80f08c:	100491ba 	slli	r2,r2,6
  80f090:	10c5883a 	add	r2,r2,r3
  80f094:	10800a04 	addi	r2,r2,40
  80f098:	10800017 	ldw	r2,0(r2)
  80f09c:	113fff84 	addi	r4,r2,-2
  80f0a0:	00802074 	movhi	r2,129
  80f0a4:	10886204 	addi	r2,r2,8584
  80f0a8:	11400383 	ldbu	r5,14(r2)
  80f0ac:	08006ec0 	call	8006ec <__mulsi3>
  80f0b0:	8085883a 	add	r2,r16,r2
  80f0b4:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
  80f0b8:	e13ffe17 	ldw	r4,-8(fp)
  80f0bc:	d1602217 	ldw	r5,-32632(gp)
  80f0c0:	080b3240 	call	80b324 <Read_Sector_Data>
  80f0c4:	1005003a 	cmpeq	r2,r2,zero
  80f0c8:	1000111e 	bne	r2,zero,80f110 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
  80f0cc:	00c02074 	movhi	r3,129
  80f0d0:	18c87704 	addi	r3,r3,8668
  80f0d4:	e0bffc0f 	ldh	r2,-16(fp)
  80f0d8:	100491ba 	slli	r2,r2,6
  80f0dc:	10c5883a 	add	r2,r2,r3
  80f0e0:	10800c04 	addi	r2,r2,48
  80f0e4:	1100000f 	ldh	r4,0(r2)
  80f0e8:	e0bffc0f 	ldh	r2,-16(fp)
  80f0ec:	100691ba 	slli	r3,r2,6
  80f0f0:	00802074 	movhi	r2,129
  80f0f4:	10887704 	addi	r2,r2,8668
  80f0f8:	188b883a 	add	r5,r3,r2
  80f0fc:	080b9640 	call	80b964 <Write_File_Record_At_Offset>
  80f100:	1005003a 	cmpeq	r2,r2,zero
  80f104:	1000021e 	bne	r2,zero,80f110 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
  80f108:	080b2dc0 	call	80b2dc <Save_Modified_Sector>
  80f10c:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
  80f110:	00c02074 	movhi	r3,129
  80f114:	18c87704 	addi	r3,r3,8668
  80f118:	e0bffc0f 	ldh	r2,-16(fp)
  80f11c:	100491ba 	slli	r2,r2,6
  80f120:	10c5883a 	add	r2,r2,r3
  80f124:	10800f04 	addi	r2,r2,60
  80f128:	10000015 	stw	zero,0(r2)
			result = true;
  80f12c:	00800044 	movi	r2,1
  80f130:	e0bffd15 	stw	r2,-12(fp)
        }
    }

    return result;
  80f134:	e0bffd17 	ldw	r2,-12(fp)
}
  80f138:	dfc00517 	ldw	ra,20(sp)
  80f13c:	df000417 	ldw	fp,16(sp)
  80f140:	dc000317 	ldw	r16,12(sp)
  80f144:	dec00604 	addi	sp,sp,24
  80f148:	f800283a 	ret

0080f14c <alt_alarm_start>:

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f14c:	defff504 	addi	sp,sp,-44
  80f150:	df000a15 	stw	fp,40(sp)
  80f154:	df000a04 	addi	fp,sp,40
  80f158:	e13ff615 	stw	r4,-40(fp)
  80f15c:	e17ff715 	stw	r5,-36(fp)
  80f160:	e1bff815 	stw	r6,-32(fp)
  80f164:	e1fff915 	stw	r7,-28(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f168:	e03ffb15 	stw	zero,-20(fp)
  80f16c:	d0a02917 	ldw	r2,-32604(gp)
  80f170:	e0bffc15 	stw	r2,-16(fp)
  80f174:	e0bffc17 	ldw	r2,-16(fp)
  80f178:	1005003a 	cmpeq	r2,r2,zero
  80f17c:	1000421e 	bne	r2,zero,80f288 <alt_alarm_start+0x13c>
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
  80f180:	e0bff617 	ldw	r2,-40(fp)
  80f184:	1005003a 	cmpeq	r2,r2,zero
  80f188:	10003c1e 	bne	r2,zero,80f27c <alt_alarm_start+0x130>
    {
      alarm->callback = callback;
  80f18c:	e0fff617 	ldw	r3,-40(fp)
  80f190:	e0bff817 	ldw	r2,-32(fp)
  80f194:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  80f198:	e0fff617 	ldw	r3,-40(fp)
  80f19c:	e0bff917 	ldw	r2,-28(fp)
  80f1a0:	18800515 	stw	r2,20(r3)
  80f1a4:	0005303a 	rdctl	r2,status
  80f1a8:	e0bffe15 	stw	r2,-8(fp)
  80f1ac:	e0fffe17 	ldw	r3,-8(fp)
  80f1b0:	00bfff84 	movi	r2,-2
  80f1b4:	1884703a 	and	r2,r3,r2
  80f1b8:	1001703a 	wrctl	status,r2
  80f1bc:	e0bffe17 	ldw	r2,-8(fp)
  80f1c0:	e0bffd15 	stw	r2,-12(fp)
  80f1c4:	e0bffd17 	ldw	r2,-12(fp)
  80f1c8:	e0bffa15 	stw	r2,-24(fp)
  80f1cc:	d0a02a17 	ldw	r2,-32600(gp)
  80f1d0:	e0bffe15 	stw	r2,-8(fp)
  80f1d4:	e0bffe17 	ldw	r2,-8(fp)
  80f1d8:	e0bffb15 	stw	r2,-20(fp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  80f1dc:	e13ff617 	ldw	r4,-40(fp)
  80f1e0:	e0fff717 	ldw	r3,-36(fp)
  80f1e4:	e0bffb17 	ldw	r2,-20(fp)
  80f1e8:	1885883a 	add	r2,r3,r2
  80f1ec:	10800044 	addi	r2,r2,1
  80f1f0:	20800215 	stw	r2,8(r4)
      
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f1f4:	e0bff617 	ldw	r2,-40(fp)
  80f1f8:	10c00217 	ldw	r3,8(r2)
  80f1fc:	e0bffb17 	ldw	r2,-20(fp)
  80f200:	1880042e 	bgeu	r3,r2,80f214 <alt_alarm_start+0xc8>
      {
        alarm->rollover = 1;
  80f204:	e0fff617 	ldw	r3,-40(fp)
  80f208:	00800044 	movi	r2,1
  80f20c:	18800405 	stb	r2,16(r3)
  80f210:	00000206 	br	80f21c <alt_alarm_start+0xd0>
      }
      else
      {
        alarm->rollover = 0;
  80f214:	e0bff617 	ldw	r2,-40(fp)
  80f218:	10000405 	stb	zero,16(r2)
  80f21c:	d0a02b04 	addi	r2,gp,-32596
  80f220:	e0bffe15 	stw	r2,-8(fp)
  80f224:	e0bff617 	ldw	r2,-40(fp)
  80f228:	e0bffd15 	stw	r2,-12(fp)
  80f22c:	e0fffd17 	ldw	r3,-12(fp)
  80f230:	e0bffe17 	ldw	r2,-8(fp)
  80f234:	18800115 	stw	r2,4(r3)
  80f238:	e0fffd17 	ldw	r3,-12(fp)
  80f23c:	e0bffe17 	ldw	r2,-8(fp)
  80f240:	10800017 	ldw	r2,0(r2)
  80f244:	18800015 	stw	r2,0(r3)
  80f248:	e0bffe17 	ldw	r2,-8(fp)
  80f24c:	10c00017 	ldw	r3,0(r2)
  80f250:	e0bffd17 	ldw	r2,-12(fp)
  80f254:	18800115 	stw	r2,4(r3)
  80f258:	e0fffe17 	ldw	r3,-8(fp)
  80f25c:	e0bffd17 	ldw	r2,-12(fp)
  80f260:	18800015 	stw	r2,0(r3)
  80f264:	e0bffa17 	ldw	r2,-24(fp)
  80f268:	e0bffe15 	stw	r2,-8(fp)
  80f26c:	e0bffe17 	ldw	r2,-8(fp)
  80f270:	1001703a 	wrctl	status,r2
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
  80f274:	e03fff15 	stw	zero,-4(fp)
  80f278:	00000506 	br	80f290 <alt_alarm_start+0x144>
    }
    else
    {
      return -EINVAL;
  80f27c:	00bffa84 	movi	r2,-22
  80f280:	e0bfff15 	stw	r2,-4(fp)
  80f284:	00000206 	br	80f290 <alt_alarm_start+0x144>
    }
  }
  else
  {
    return -ENOTSUP;
  80f288:	00bfde84 	movi	r2,-134
  80f28c:	e0bfff15 	stw	r2,-4(fp)
  }
}
  80f290:	e0bfff17 	ldw	r2,-4(fp)
  80f294:	df000a17 	ldw	fp,40(sp)
  80f298:	dec00b04 	addi	sp,sp,44
  80f29c:	f800283a 	ret

0080f2a0 <alt_dcache_flush_all>:
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80f2a0:	deffff04 	addi	sp,sp,-4
  80f2a4:	df000015 	stw	fp,0(sp)
  80f2a8:	d839883a 	mov	fp,sp
  80f2ac:	df000017 	ldw	fp,0(sp)
  80f2b0:	dec00104 	addi	sp,sp,4
  80f2b4:	f800283a 	ret

0080f2b8 <alt_dev_llist_insert>:
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80f2b8:	defff904 	addi	sp,sp,-28
  80f2bc:	dfc00615 	stw	ra,24(sp)
  80f2c0:	df000515 	stw	fp,20(sp)
  80f2c4:	df000504 	addi	fp,sp,20
  80f2c8:	e13ffb15 	stw	r4,-20(fp)
  80f2cc:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80f2d0:	e0bffb17 	ldw	r2,-20(fp)
  80f2d4:	1005003a 	cmpeq	r2,r2,zero
  80f2d8:	1000041e 	bne	r2,zero,80f2ec <alt_dev_llist_insert+0x34>
  80f2dc:	e0bffb17 	ldw	r2,-20(fp)
  80f2e0:	10800217 	ldw	r2,8(r2)
  80f2e4:	1004c03a 	cmpne	r2,r2,zero
  80f2e8:	1000071e 	bne	r2,zero,80f308 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  80f2ec:	080f3680 	call	80f368 <alt_get_errno>
  80f2f0:	1007883a 	mov	r3,r2
  80f2f4:	00800584 	movi	r2,22
  80f2f8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80f2fc:	00bffa84 	movi	r2,-22
  80f300:	e0bfff15 	stw	r2,-4(fp)
  80f304:	00001306 	br	80f354 <alt_dev_llist_insert+0x9c>
  80f308:	e0bffc17 	ldw	r2,-16(fp)
  80f30c:	e0bffd15 	stw	r2,-12(fp)
  80f310:	e0bffb17 	ldw	r2,-20(fp)
  80f314:	e0bffe15 	stw	r2,-8(fp)
  80f318:	e0fffe17 	ldw	r3,-8(fp)
  80f31c:	e0bffd17 	ldw	r2,-12(fp)
  80f320:	18800115 	stw	r2,4(r3)
  80f324:	e0fffe17 	ldw	r3,-8(fp)
  80f328:	e0bffd17 	ldw	r2,-12(fp)
  80f32c:	10800017 	ldw	r2,0(r2)
  80f330:	18800015 	stw	r2,0(r3)
  80f334:	e0bffd17 	ldw	r2,-12(fp)
  80f338:	10c00017 	ldw	r3,0(r2)
  80f33c:	e0bffe17 	ldw	r2,-8(fp)
  80f340:	18800115 	stw	r2,4(r3)
  80f344:	e0fffd17 	ldw	r3,-12(fp)
  80f348:	e0bffe17 	ldw	r2,-8(fp)
  80f34c:	18800015 	stw	r2,0(r3)
  }
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  80f350:	e03fff15 	stw	zero,-4(fp)
}
  80f354:	e0bfff17 	ldw	r2,-4(fp)
  80f358:	dfc00617 	ldw	ra,24(sp)
  80f35c:	df000517 	ldw	fp,20(sp)
  80f360:	dec00704 	addi	sp,sp,28
  80f364:	f800283a 	ret

0080f368 <alt_get_errno>:
  80f368:	defffd04 	addi	sp,sp,-12
  80f36c:	dfc00215 	stw	ra,8(sp)
  80f370:	df000115 	stw	fp,4(sp)
  80f374:	df000104 	addi	fp,sp,4
  80f378:	d0a01517 	ldw	r2,-32684(gp)
  80f37c:	1005003a 	cmpeq	r2,r2,zero
  80f380:	1000041e 	bne	r2,zero,80f394 <alt_get_errno+0x2c>
  80f384:	d0a01517 	ldw	r2,-32684(gp)
  80f388:	103ee83a 	callr	r2
  80f38c:	e0bfff15 	stw	r2,-4(fp)
  80f390:	00000206 	br	80f39c <alt_get_errno+0x34>
  80f394:	d0a03004 	addi	r2,gp,-32576
  80f398:	e0bfff15 	stw	r2,-4(fp)
  80f39c:	e0bfff17 	ldw	r2,-4(fp)
  80f3a0:	dfc00217 	ldw	ra,8(sp)
  80f3a4:	df000117 	ldw	fp,4(sp)
  80f3a8:	dec00304 	addi	sp,sp,12
  80f3ac:	f800283a 	ret

0080f3b0 <_do_ctors>:
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80f3b0:	defffd04 	addi	sp,sp,-12
  80f3b4:	dfc00215 	stw	ra,8(sp)
  80f3b8:	df000115 	stw	fp,4(sp)
  80f3bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f3c0:	00802074 	movhi	r2,129
  80f3c4:	10801404 	addi	r2,r2,80
  80f3c8:	e0bfff15 	stw	r2,-4(fp)
  80f3cc:	e0ffff17 	ldw	r3,-4(fp)
  80f3d0:	00802074 	movhi	r2,129
  80f3d4:	10801504 	addi	r2,r2,84
  80f3d8:	18800736 	bltu	r3,r2,80f3f8 <_do_ctors+0x48>
        (*ctor) (); 
  80f3dc:	e0bfff17 	ldw	r2,-4(fp)
  80f3e0:	10800017 	ldw	r2,0(r2)
  80f3e4:	103ee83a 	callr	r2
  80f3e8:	e0bfff17 	ldw	r2,-4(fp)
  80f3ec:	10bfff04 	addi	r2,r2,-4
  80f3f0:	e0bfff15 	stw	r2,-4(fp)
  80f3f4:	003ff506 	br	80f3cc <_do_ctors+0x1c>
}
  80f3f8:	dfc00217 	ldw	ra,8(sp)
  80f3fc:	df000117 	ldw	fp,4(sp)
  80f400:	dec00304 	addi	sp,sp,12
  80f404:	f800283a 	ret

0080f408 <_do_dtors>:
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80f408:	defffd04 	addi	sp,sp,-12
  80f40c:	dfc00215 	stw	ra,8(sp)
  80f410:	df000115 	stw	fp,4(sp)
  80f414:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f418:	00802074 	movhi	r2,129
  80f41c:	10801404 	addi	r2,r2,80
  80f420:	e0bfff15 	stw	r2,-4(fp)
  80f424:	e0ffff17 	ldw	r3,-4(fp)
  80f428:	00802074 	movhi	r2,129
  80f42c:	10801504 	addi	r2,r2,84
  80f430:	18800736 	bltu	r3,r2,80f450 <_do_dtors+0x48>
        (*dtor) (); 
  80f434:	e0bfff17 	ldw	r2,-4(fp)
  80f438:	10800017 	ldw	r2,0(r2)
  80f43c:	103ee83a 	callr	r2
  80f440:	e0bfff17 	ldw	r2,-4(fp)
  80f444:	10bfff04 	addi	r2,r2,-4
  80f448:	e0bfff15 	stw	r2,-4(fp)
  80f44c:	003ff506 	br	80f424 <_do_dtors+0x1c>
}
  80f450:	dfc00217 	ldw	ra,8(sp)
  80f454:	df000117 	ldw	fp,4(sp)
  80f458:	dec00304 	addi	sp,sp,12
  80f45c:	f800283a 	ret

0080f460 <alt_find_dev>:
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80f460:	defff904 	addi	sp,sp,-28
  80f464:	dfc00615 	stw	ra,24(sp)
  80f468:	df000515 	stw	fp,20(sp)
  80f46c:	df000504 	addi	fp,sp,20
  80f470:	e13ffb15 	stw	r4,-20(fp)
  80f474:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80f478:	e0bffc17 	ldw	r2,-16(fp)
  80f47c:	10800017 	ldw	r2,0(r2)
  80f480:	e0bffd15 	stw	r2,-12(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80f484:	e13ffb17 	ldw	r4,-20(fp)
  80f488:	08070040 	call	807004 <strlen>
  80f48c:	10800044 	addi	r2,r2,1
  80f490:	e0bffe15 	stw	r2,-8(fp)

  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80f494:	e0fffd17 	ldw	r3,-12(fp)
  80f498:	e0bffc17 	ldw	r2,-16(fp)
  80f49c:	18800e26 	beq	r3,r2,80f4d8 <alt_find_dev+0x78>
  {

    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80f4a0:	e0bffd17 	ldw	r2,-12(fp)
  80f4a4:	11000217 	ldw	r4,8(r2)
  80f4a8:	e17ffb17 	ldw	r5,-20(fp)
  80f4ac:	e1bffe17 	ldw	r6,-8(fp)
  80f4b0:	080ff940 	call	80ff94 <memcmp>
  80f4b4:	1004c03a 	cmpne	r2,r2,zero
  80f4b8:	1000031e 	bne	r2,zero,80f4c8 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
  80f4bc:	e0bffd17 	ldw	r2,-12(fp)
  80f4c0:	e0bfff15 	stw	r2,-4(fp)
  80f4c4:	00000506 	br	80f4dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80f4c8:	e0bffd17 	ldw	r2,-12(fp)
  80f4cc:	10800017 	ldw	r2,0(r2)
  80f4d0:	e0bffd15 	stw	r2,-12(fp)
  80f4d4:	003fef06 	br	80f494 <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
  80f4d8:	e03fff15 	stw	zero,-4(fp)
}
  80f4dc:	e0bfff17 	ldw	r2,-4(fp)
  80f4e0:	dfc00617 	ldw	ra,24(sp)
  80f4e4:	df000517 	ldw	fp,20(sp)
  80f4e8:	dec00704 	addi	sp,sp,28
  80f4ec:	f800283a 	ret

0080f4f0 <alt_icache_flush_all>:
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80f4f0:	deffff04 	addi	sp,sp,-4
  80f4f4:	df000015 	stw	fp,0(sp)
  80f4f8:	d839883a 	mov	fp,sp
  80f4fc:	df000017 	ldw	fp,0(sp)
  80f500:	dec00104 	addi	sp,sp,4
  80f504:	f800283a 	ret

0080f508 <alt_open_fd>:
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80f508:	defff704 	addi	sp,sp,-36
  80f50c:	dfc00815 	stw	ra,32(sp)
  80f510:	df000715 	stw	fp,28(sp)
  80f514:	dc000615 	stw	r16,24(sp)
  80f518:	dc400515 	stw	r17,20(sp)
  80f51c:	df000704 	addi	fp,sp,28
  80f520:	e13ff915 	stw	r4,-28(fp)
  80f524:	e17ffa15 	stw	r5,-24(fp)
  80f528:	e1bffb15 	stw	r6,-20(fp)
  80f52c:	e1fffc15 	stw	r7,-16(fp)
  int old;

  old = open (name, flags, mode);
  80f530:	e13ffa17 	ldw	r4,-24(fp)
  80f534:	e17ffb17 	ldw	r5,-20(fp)
  80f538:	e1bffc17 	ldw	r6,-16(fp)
  80f53c:	080f8e40 	call	80f8e4 <open>
  80f540:	e0bffd15 	stw	r2,-12(fp)

  if (old >= 0)
  80f544:	e0bffd17 	ldw	r2,-12(fp)
  80f548:	1004803a 	cmplt	r2,r2,zero
  80f54c:	10001f1e 	bne	r2,zero,80f5cc <alt_open_fd+0xc4>
  {
    fd->dev      = alt_fd_list[old].dev;
  80f550:	e43ff917 	ldw	r16,-28(fp)
  80f554:	04402074 	movhi	r17,129
  80f558:	8c438004 	addi	r17,r17,3584
  80f55c:	e13ffd17 	ldw	r4,-12(fp)
  80f560:	01400304 	movi	r5,12
  80f564:	08006ec0 	call	8006ec <__mulsi3>
  80f568:	1445883a 	add	r2,r2,r17
  80f56c:	10800017 	ldw	r2,0(r2)
  80f570:	80800015 	stw	r2,0(r16)
    fd->priv     = alt_fd_list[old].priv;
  80f574:	e43ff917 	ldw	r16,-28(fp)
  80f578:	04402074 	movhi	r17,129
  80f57c:	8c438004 	addi	r17,r17,3584
  80f580:	e13ffd17 	ldw	r4,-12(fp)
  80f584:	01400304 	movi	r5,12
  80f588:	08006ec0 	call	8006ec <__mulsi3>
  80f58c:	1445883a 	add	r2,r2,r17
  80f590:	10800104 	addi	r2,r2,4
  80f594:	10800017 	ldw	r2,0(r2)
  80f598:	80800115 	stw	r2,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80f59c:	e43ff917 	ldw	r16,-28(fp)
  80f5a0:	04402074 	movhi	r17,129
  80f5a4:	8c438004 	addi	r17,r17,3584
  80f5a8:	e13ffd17 	ldw	r4,-12(fp)
  80f5ac:	01400304 	movi	r5,12
  80f5b0:	08006ec0 	call	8006ec <__mulsi3>
  80f5b4:	1445883a 	add	r2,r2,r17
  80f5b8:	10800204 	addi	r2,r2,8
  80f5bc:	10800017 	ldw	r2,0(r2)
  80f5c0:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
  80f5c4:	e13ffd17 	ldw	r4,-12(fp)
  80f5c8:	0809c2c0 	call	809c2c <alt_release_fd>
  }
} 
  80f5cc:	dfc00817 	ldw	ra,32(sp)
  80f5d0:	df000717 	ldw	fp,28(sp)
  80f5d4:	dc000617 	ldw	r16,24(sp)
  80f5d8:	dc400517 	ldw	r17,20(sp)
  80f5dc:	dec00904 	addi	sp,sp,36
  80f5e0:	f800283a 	ret

0080f5e4 <alt_io_redirect>:

/*
 * alt_io_redirect() is called once the device/filesystem lists have been 
 * initialised, but before main(). Its function is to redirect standard in,
 * standard out and standard error so that they point to the devices selected by
 * the user (as defined in system.h).
 *
 * Prior to the call to this function, io is directed towards /dev/null. If
 * i/o can not be redirected to the requested device, for example if the device 
 * does not exist, then it remains directed at /dev/null. 
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80f5e4:	defffb04 	addi	sp,sp,-20
  80f5e8:	dfc00415 	stw	ra,16(sp)
  80f5ec:	df000315 	stw	fp,12(sp)
  80f5f0:	df000304 	addi	fp,sp,12
  80f5f4:	e13ffd15 	stw	r4,-12(fp)
  80f5f8:	e17ffe15 	stw	r5,-8(fp)
  80f5fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80f600:	01002074 	movhi	r4,129
  80f604:	21038304 	addi	r4,r4,3596
  80f608:	e17ffd17 	ldw	r5,-12(fp)
  80f60c:	01800044 	movi	r6,1
  80f610:	01c07fc4 	movi	r7,511
  80f614:	080f5080 	call	80f508 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80f618:	01002074 	movhi	r4,129
  80f61c:	21038004 	addi	r4,r4,3584
  80f620:	e17ffe17 	ldw	r5,-8(fp)
  80f624:	000d883a 	mov	r6,zero
  80f628:	01c07fc4 	movi	r7,511
  80f62c:	080f5080 	call	80f508 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80f630:	01002074 	movhi	r4,129
  80f634:	21038604 	addi	r4,r4,3608
  80f638:	e17fff17 	ldw	r5,-4(fp)
  80f63c:	01800044 	movi	r6,1
  80f640:	01c07fc4 	movi	r7,511
  80f644:	080f5080 	call	80f508 <alt_open_fd>
}  
  80f648:	dfc00417 	ldw	ra,16(sp)
  80f64c:	df000317 	ldw	fp,12(sp)
  80f650:	dec00504 	addi	sp,sp,20
  80f654:	f800283a 	ret

0080f658 <alt_irq_register>:
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80f658:	defff304 	addi	sp,sp,-52
  80f65c:	df000c15 	stw	fp,48(sp)
  80f660:	df000c04 	addi	fp,sp,48
  80f664:	e13ff415 	stw	r4,-48(fp)
  80f668:	e17ff515 	stw	r5,-44(fp)
  80f66c:	e1bff615 	stw	r6,-40(fp)
  int rc = -EINVAL;  
  80f670:	00bffa84 	movi	r2,-22
  80f674:	e0bff715 	stw	r2,-36(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80f678:	e0bff417 	ldw	r2,-48(fp)
  80f67c:	10800828 	cmpgeui	r2,r2,32
  80f680:	10005a1e 	bne	r2,zero,80f7ec <alt_irq_register+0x194>
  80f684:	0005303a 	rdctl	r2,status
  80f688:	e0bffa15 	stw	r2,-24(fp)
  80f68c:	e0fffa17 	ldw	r3,-24(fp)
  80f690:	00bfff84 	movi	r2,-2
  80f694:	1884703a 	and	r2,r3,r2
  80f698:	1001703a 	wrctl	status,r2
  80f69c:	e0bffa17 	ldw	r2,-24(fp)
  80f6a0:	e0bff915 	stw	r2,-28(fp)
  80f6a4:	e0bff917 	ldw	r2,-28(fp)
  80f6a8:	e0bff815 	stw	r2,-32(fp)
  {
    /* 
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  80f6ac:	00c02074 	movhi	r3,129
  80f6b0:	18c9b704 	addi	r3,r3,9948
  80f6b4:	e0bff417 	ldw	r2,-48(fp)
  80f6b8:	100490fa 	slli	r2,r2,3
  80f6bc:	10c7883a 	add	r3,r2,r3
  80f6c0:	e0bff617 	ldw	r2,-40(fp)
  80f6c4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
  80f6c8:	00c02074 	movhi	r3,129
  80f6cc:	18c9b704 	addi	r3,r3,9948
  80f6d0:	e0bff417 	ldw	r2,-48(fp)
  80f6d4:	100490fa 	slli	r2,r2,3
  80f6d8:	10c5883a 	add	r2,r2,r3
  80f6dc:	10c00104 	addi	r3,r2,4
  80f6e0:	e0bff517 	ldw	r2,-44(fp)
  80f6e4:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80f6e8:	e0bff617 	ldw	r2,-40(fp)
  80f6ec:	1005003a 	cmpeq	r2,r2,zero
  80f6f0:	10001c1e 	bne	r2,zero,80f764 <alt_irq_register+0x10c>
  80f6f4:	e0bff417 	ldw	r2,-48(fp)
  80f6f8:	e0bffa15 	stw	r2,-24(fp)
  80f6fc:	0005303a 	rdctl	r2,status
  80f700:	e0bffd15 	stw	r2,-12(fp)
  80f704:	e0fffd17 	ldw	r3,-12(fp)
  80f708:	00bfff84 	movi	r2,-2
  80f70c:	1884703a 	and	r2,r3,r2
  80f710:	1001703a 	wrctl	status,r2
  80f714:	e0bffd17 	ldw	r2,-12(fp)
  80f718:	e0bffc15 	stw	r2,-16(fp)
  80f71c:	e0bffc17 	ldw	r2,-16(fp)
  80f720:	e0bffb15 	stw	r2,-20(fp)
  80f724:	00c00044 	movi	r3,1
  80f728:	e0bffa17 	ldw	r2,-24(fp)
  80f72c:	1886983a 	sll	r3,r3,r2
  80f730:	d0a02717 	ldw	r2,-32612(gp)
  80f734:	10c4b03a 	or	r2,r2,r3
  80f738:	d0a02715 	stw	r2,-32612(gp)
  80f73c:	d0a02717 	ldw	r2,-32612(gp)
  80f740:	100170fa 	wrctl	ienable,r2
  80f744:	e0bffb17 	ldw	r2,-20(fp)
  80f748:	e0bffd15 	stw	r2,-12(fp)
  80f74c:	e0bffd17 	ldw	r2,-12(fp)
  80f750:	1001703a 	wrctl	status,r2
  80f754:	e03ff915 	stw	zero,-28(fp)
  80f758:	e0bff917 	ldw	r2,-28(fp)
  80f75c:	e0bfff15 	stw	r2,-4(fp)
  80f760:	00001c06 	br	80f7d4 <alt_irq_register+0x17c>
  80f764:	e0bff417 	ldw	r2,-48(fp)
  80f768:	e0bffd15 	stw	r2,-12(fp)
  80f76c:	0005303a 	rdctl	r2,status
  80f770:	e0bffe15 	stw	r2,-8(fp)
  80f774:	e0fffe17 	ldw	r3,-8(fp)
  80f778:	00bfff84 	movi	r2,-2
  80f77c:	1884703a 	and	r2,r3,r2
  80f780:	1001703a 	wrctl	status,r2
  80f784:	e0bffe17 	ldw	r2,-8(fp)
  80f788:	e0bffa15 	stw	r2,-24(fp)
  80f78c:	e0bffa17 	ldw	r2,-24(fp)
  80f790:	e0bffb15 	stw	r2,-20(fp)
  80f794:	00c00044 	movi	r3,1
  80f798:	e0bffd17 	ldw	r2,-12(fp)
  80f79c:	1884983a 	sll	r2,r3,r2
  80f7a0:	0086303a 	nor	r3,zero,r2
  80f7a4:	d0a02717 	ldw	r2,-32612(gp)
  80f7a8:	10c4703a 	and	r2,r2,r3
  80f7ac:	d0a02715 	stw	r2,-32612(gp)
  80f7b0:	d0a02717 	ldw	r2,-32612(gp)
  80f7b4:	100170fa 	wrctl	ienable,r2
  80f7b8:	e0bffb17 	ldw	r2,-20(fp)
  80f7bc:	e0bffe15 	stw	r2,-8(fp)
  80f7c0:	e0bffe17 	ldw	r2,-8(fp)
  80f7c4:	1001703a 	wrctl	status,r2
  80f7c8:	e03ffc15 	stw	zero,-16(fp)
  80f7cc:	e0bffc17 	ldw	r2,-16(fp)
  80f7d0:	e0bfff15 	stw	r2,-4(fp)
  80f7d4:	e0bfff17 	ldw	r2,-4(fp)
  80f7d8:	e0bff715 	stw	r2,-36(fp)
  80f7dc:	e0bff817 	ldw	r2,-32(fp)
  80f7e0:	e0bffe15 	stw	r2,-8(fp)
  80f7e4:	e0bffe17 	ldw	r2,-8(fp)
  80f7e8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80f7ec:	e0bff717 	ldw	r2,-36(fp)
}
  80f7f0:	df000c17 	ldw	fp,48(sp)
  80f7f4:	dec00d04 	addi	sp,sp,52
  80f7f8:	f800283a 	ret

0080f7fc <alt_file_locked>:
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f7fc:	defffa04 	addi	sp,sp,-24
  80f800:	dfc00515 	stw	ra,20(sp)
  80f804:	df000415 	stw	fp,16(sp)
  80f808:	dc000315 	stw	r16,12(sp)
  80f80c:	df000404 	addi	fp,sp,16
  80f810:	e13ffc15 	stw	r4,-16(fp)
  alt_u32 i;

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f814:	e0fffc17 	ldw	r3,-16(fp)
  80f818:	e0bffc17 	ldw	r2,-16(fp)
  80f81c:	10800217 	ldw	r2,8(r2)
  80f820:	10900034 	orhi	r2,r2,16384
  80f824:	18800215 	stw	r2,8(r3)

  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f828:	e03ffd15 	stw	zero,-12(fp)
  80f82c:	d0e01417 	ldw	r3,-32688(gp)
  80f830:	e0bffd17 	ldw	r2,-12(fp)
  80f834:	18802436 	bltu	r3,r2,80f8c8 <alt_file_locked+0xcc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f838:	04002074 	movhi	r16,129
  80f83c:	84038004 	addi	r16,r16,3584
  80f840:	e13ffd17 	ldw	r4,-12(fp)
  80f844:	01400304 	movi	r5,12
  80f848:	08006ec0 	call	8006ec <__mulsi3>
  80f84c:	1405883a 	add	r2,r2,r16
  80f850:	e0fffc17 	ldw	r3,-16(fp)
  80f854:	11000017 	ldw	r4,0(r2)
  80f858:	18800017 	ldw	r2,0(r3)
  80f85c:	2080161e 	bne	r4,r2,80f8b8 <alt_file_locked+0xbc>
  80f860:	04002074 	movhi	r16,129
  80f864:	84038004 	addi	r16,r16,3584
  80f868:	e13ffd17 	ldw	r4,-12(fp)
  80f86c:	01400304 	movi	r5,12
  80f870:	08006ec0 	call	8006ec <__mulsi3>
  80f874:	1405883a 	add	r2,r2,r16
  80f878:	10800204 	addi	r2,r2,8
  80f87c:	10800017 	ldw	r2,0(r2)
  80f880:	1004403a 	cmpge	r2,r2,zero
  80f884:	10000c1e 	bne	r2,zero,80f8b8 <alt_file_locked+0xbc>
  80f888:	e13ffd17 	ldw	r4,-12(fp)
  80f88c:	01400304 	movi	r5,12
  80f890:	08006ec0 	call	8006ec <__mulsi3>
  80f894:	1007883a 	mov	r3,r2
  80f898:	00802074 	movhi	r2,129
  80f89c:	10838004 	addi	r2,r2,3584
  80f8a0:	1887883a 	add	r3,r3,r2
  80f8a4:	e0bffc17 	ldw	r2,-16(fp)
  80f8a8:	18800326 	beq	r3,r2,80f8b8 <alt_file_locked+0xbc>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f8ac:	00bffcc4 	movi	r2,-13
  80f8b0:	e0bffe15 	stw	r2,-8(fp)
  80f8b4:	00000506 	br	80f8cc <alt_file_locked+0xd0>
  80f8b8:	e0bffd17 	ldw	r2,-12(fp)
  80f8bc:	10800044 	addi	r2,r2,1
  80f8c0:	e0bffd15 	stw	r2,-12(fp)
  80f8c4:	003fd906 	br	80f82c <alt_file_locked+0x30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f8c8:	e03ffe15 	stw	zero,-8(fp)
}
  80f8cc:	e0bffe17 	ldw	r2,-8(fp)
  80f8d0:	dfc00517 	ldw	ra,20(sp)
  80f8d4:	df000417 	ldw	fp,16(sp)
  80f8d8:	dc000317 	ldw	r16,12(sp)
  80f8dc:	dec00604 	addi	sp,sp,24
  80f8e0:	f800283a 	ret

0080f8e4 <open>:

/*
 * open() is called in order to get a file descriptor that reference the file
 * or device named "name". This descriptor can then be used to manipulate the
 * file/device using the standard system calls, e.g. write(), read(), ioctl()
 * etc.
 *
 * This is equivalent to the standard open() system call.
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f8e4:	defff404 	addi	sp,sp,-48
  80f8e8:	dfc00b15 	stw	ra,44(sp)
  80f8ec:	df000a15 	stw	fp,40(sp)
  80f8f0:	df000a04 	addi	fp,sp,40
  80f8f4:	e13ff615 	stw	r4,-40(fp)
  80f8f8:	e17ff715 	stw	r5,-36(fp)
  80f8fc:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f900:	00bfffc4 	movi	r2,-1
  80f904:	e0bffb15 	stw	r2,-20(fp)
  int status = -ENODEV;
  80f908:	00bffb44 	movi	r2,-19
  80f90c:	e0bffc15 	stw	r2,-16(fp)
  int isafs = 0;
  80f910:	e03ffd15 	stw	zero,-12(fp)

  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f914:	e13ff617 	ldw	r4,-40(fp)
  80f918:	d1601204 	addi	r5,gp,-32696
  80f91c:	080f4600 	call	80f460 <alt_find_dev>
  80f920:	e0bff915 	stw	r2,-28(fp)
  80f924:	e0bff917 	ldw	r2,-28(fp)
  80f928:	1004c03a 	cmpne	r2,r2,zero
  80f92c:	1000051e 	bne	r2,zero,80f944 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f930:	e13ff617 	ldw	r4,-40(fp)
  80f934:	080fc6c0 	call	80fc6c <alt_find_file>
  80f938:	e0bff915 	stw	r2,-28(fp)
    isafs = 1;
  80f93c:	00800044 	movi	r2,1
  80f940:	e0bffd15 	stw	r2,-12(fp)
  }

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f944:	e0bff917 	ldw	r2,-28(fp)
  80f948:	1005003a 	cmpeq	r2,r2,zero
  80f94c:	1000321e 	bne	r2,zero,80fa18 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f950:	e13ff917 	ldw	r4,-28(fp)
  80f954:	080fd500 	call	80fd50 <alt_get_fd>
  80f958:	e0bffb15 	stw	r2,-20(fp)
  80f95c:	e0bffb17 	ldw	r2,-20(fp)
  80f960:	1004403a 	cmpge	r2,r2,zero
  80f964:	1000031e 	bne	r2,zero,80f974 <open+0x90>
    {
      status = index;
  80f968:	e0bffb17 	ldw	r2,-20(fp)
  80f96c:	e0bffc15 	stw	r2,-16(fp)
  80f970:	00002b06 	br	80fa20 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f974:	e13ffb17 	ldw	r4,-20(fp)
  80f978:	01400304 	movi	r5,12
  80f97c:	08006ec0 	call	8006ec <__mulsi3>
  80f980:	1007883a 	mov	r3,r2
  80f984:	00802074 	movhi	r2,129
  80f988:	10838004 	addi	r2,r2,3584
  80f98c:	1885883a 	add	r2,r3,r2
  80f990:	e0bffa15 	stw	r2,-24(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f994:	e13ffa17 	ldw	r4,-24(fp)
  80f998:	e0fff717 	ldw	r3,-36(fp)
  80f99c:	00900034 	movhi	r2,16384
  80f9a0:	10bfffc4 	addi	r2,r2,-1
  80f9a4:	1884703a 	and	r2,r3,r2
  80f9a8:	20800215 	stw	r2,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f9ac:	e0bffd17 	ldw	r2,-12(fp)
  80f9b0:	1004c03a 	cmpne	r2,r2,zero
  80f9b4:	1000071e 	bne	r2,zero,80f9d4 <open+0xf0>
  80f9b8:	e13ffa17 	ldw	r4,-24(fp)
  80f9bc:	080f7fc0 	call	80f7fc <alt_file_locked>
  80f9c0:	e0bffc15 	stw	r2,-16(fp)
  80f9c4:	e0bffc17 	ldw	r2,-16(fp)
  80f9c8:	1004403a 	cmpge	r2,r2,zero
  80f9cc:	1000011e 	bne	r2,zero,80f9d4 <open+0xf0>
  80f9d0:	00001306 	br	80fa20 <open+0x13c>
      {
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f9d4:	e0bff917 	ldw	r2,-28(fp)
  80f9d8:	10800317 	ldw	r2,12(r2)
  80f9dc:	1005003a 	cmpeq	r2,r2,zero
  80f9e0:	1000091e 	bne	r2,zero,80fa08 <open+0x124>
  80f9e4:	e0bff917 	ldw	r2,-28(fp)
  80f9e8:	10800317 	ldw	r2,12(r2)
  80f9ec:	e13ffa17 	ldw	r4,-24(fp)
  80f9f0:	e17ff617 	ldw	r5,-40(fp)
  80f9f4:	e1bff717 	ldw	r6,-36(fp)
  80f9f8:	e1fff817 	ldw	r7,-32(fp)
  80f9fc:	103ee83a 	callr	r2
  80fa00:	e0bfff15 	stw	r2,-4(fp)
  80fa04:	00000106 	br	80fa0c <open+0x128>
  80fa08:	e03fff15 	stw	zero,-4(fp)
  80fa0c:	e0bfff17 	ldw	r2,-4(fp)
  80fa10:	e0bffc15 	stw	r2,-16(fp)
  80fa14:	00000206 	br	80fa20 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80fa18:	00bffb44 	movi	r2,-19
  80fa1c:	e0bffc15 	stw	r2,-16(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80fa20:	e0bffc17 	ldw	r2,-16(fp)
  80fa24:	1004403a 	cmpge	r2,r2,zero
  80fa28:	1000091e 	bne	r2,zero,80fa50 <open+0x16c>
  {
    alt_release_fd (index);  
  80fa2c:	e13ffb17 	ldw	r4,-20(fp)
  80fa30:	0809c2c0 	call	809c2c <alt_release_fd>
    ALT_ERRNO = -status;
  80fa34:	080fa6c0 	call	80fa6c <alt_get_errno>
  80fa38:	e0fffc17 	ldw	r3,-16(fp)
  80fa3c:	00c7c83a 	sub	r3,zero,r3
  80fa40:	10c00015 	stw	r3,0(r2)
    return -1;
  80fa44:	00bfffc4 	movi	r2,-1
  80fa48:	e0bffe15 	stw	r2,-8(fp)
  80fa4c:	00000206 	br	80fa58 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  80fa50:	e0bffb17 	ldw	r2,-20(fp)
  80fa54:	e0bffe15 	stw	r2,-8(fp)
}
  80fa58:	e0bffe17 	ldw	r2,-8(fp)
  80fa5c:	dfc00b17 	ldw	ra,44(sp)
  80fa60:	df000a17 	ldw	fp,40(sp)
  80fa64:	dec00c04 	addi	sp,sp,48
  80fa68:	f800283a 	ret

0080fa6c <alt_get_errno>:
  80fa6c:	defffd04 	addi	sp,sp,-12
  80fa70:	dfc00215 	stw	ra,8(sp)
  80fa74:	df000115 	stw	fp,4(sp)
  80fa78:	df000104 	addi	fp,sp,4
  80fa7c:	d0a01517 	ldw	r2,-32684(gp)
  80fa80:	1005003a 	cmpeq	r2,r2,zero
  80fa84:	1000041e 	bne	r2,zero,80fa98 <alt_get_errno+0x2c>
  80fa88:	d0a01517 	ldw	r2,-32684(gp)
  80fa8c:	103ee83a 	callr	r2
  80fa90:	e0bfff15 	stw	r2,-4(fp)
  80fa94:	00000206 	br	80faa0 <alt_get_errno+0x34>
  80fa98:	d0a03004 	addi	r2,gp,-32576
  80fa9c:	e0bfff15 	stw	r2,-4(fp)
  80faa0:	e0bfff17 	ldw	r2,-4(fp)
  80faa4:	dfc00217 	ldw	ra,8(sp)
  80faa8:	df000117 	ldw	fp,4(sp)
  80faac:	dec00304 	addi	sp,sp,12
  80fab0:	f800283a 	ret

0080fab4 <alt_alarm_stop>:
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80fab4:	defffb04 	addi	sp,sp,-20
  80fab8:	df000415 	stw	fp,16(sp)
  80fabc:	df000404 	addi	fp,sp,16
  80fac0:	e13ffc15 	stw	r4,-16(fp)
  80fac4:	0005303a 	rdctl	r2,status
  80fac8:	e0bfff15 	stw	r2,-4(fp)
  80facc:	e0ffff17 	ldw	r3,-4(fp)
  80fad0:	00bfff84 	movi	r2,-2
  80fad4:	1884703a 	and	r2,r3,r2
  80fad8:	1001703a 	wrctl	status,r2
  80fadc:	e0bfff17 	ldw	r2,-4(fp)
  80fae0:	e0bffe15 	stw	r2,-8(fp)
  80fae4:	e0bffe17 	ldw	r2,-8(fp)
  80fae8:	e0bffd15 	stw	r2,-12(fp)
  80faec:	e0bffc17 	ldw	r2,-16(fp)
  80faf0:	e0bfff15 	stw	r2,-4(fp)
  80faf4:	e0bfff17 	ldw	r2,-4(fp)
  80faf8:	10c00017 	ldw	r3,0(r2)
  80fafc:	e0bfff17 	ldw	r2,-4(fp)
  80fb00:	10800117 	ldw	r2,4(r2)
  80fb04:	18800115 	stw	r2,4(r3)
  80fb08:	e0bfff17 	ldw	r2,-4(fp)
  80fb0c:	10c00117 	ldw	r3,4(r2)
  80fb10:	e0bfff17 	ldw	r2,-4(fp)
  80fb14:	10800017 	ldw	r2,0(r2)
  80fb18:	18800015 	stw	r2,0(r3)
  80fb1c:	e0ffff17 	ldw	r3,-4(fp)
  80fb20:	e0bfff17 	ldw	r2,-4(fp)
  80fb24:	18800115 	stw	r2,4(r3)
  80fb28:	e0ffff17 	ldw	r3,-4(fp)
  80fb2c:	e0bfff17 	ldw	r2,-4(fp)
  80fb30:	18800015 	stw	r2,0(r3)
  80fb34:	e0bffd17 	ldw	r2,-12(fp)
  80fb38:	e0bfff15 	stw	r2,-4(fp)
  80fb3c:	e0bfff17 	ldw	r2,-4(fp)
  80fb40:	1001703a 	wrctl	status,r2
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  80fb44:	df000417 	ldw	fp,16(sp)
  80fb48:	dec00504 	addi	sp,sp,20
  80fb4c:	f800283a 	ret

0080fb50 <alt_tick>:

/*
 * alt_tick() is periodically called by the system clock driver in order to
 * process the registered list of alarms. Each alarm is registed with a
 * callback interval, and a callback function, "callback". 
 *
 * The return value of the callback function indicates how many ticks are to
 * elapse until the next callback. A return value of zero indicates that the
 * alarm should be deactivated. 
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80fb50:	defffb04 	addi	sp,sp,-20
  80fb54:	dfc00415 	stw	ra,16(sp)
  80fb58:	df000315 	stw	fp,12(sp)
  80fb5c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80fb60:	d0a02b17 	ldw	r2,-32596(gp)
  80fb64:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80fb68:	d0a02a17 	ldw	r2,-32600(gp)
  80fb6c:	10800044 	addi	r2,r2,1
  80fb70:	d0a02a15 	stw	r2,-32600(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fb74:	e0fffe17 	ldw	r3,-8(fp)
  80fb78:	d0a02b04 	addi	r2,gp,-32596
  80fb7c:	18803026 	beq	r3,r2,80fc40 <alt_tick+0xf0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80fb80:	e0bffe17 	ldw	r2,-8(fp)
  80fb84:	10800017 	ldw	r2,0(r2)
  80fb88:	e0bffd15 	stw	r2,-12(fp)

    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80fb8c:	e0bffe17 	ldw	r2,-8(fp)
  80fb90:	10800403 	ldbu	r2,16(r2)
  80fb94:	1005003a 	cmpeq	r2,r2,zero
  80fb98:	1000051e 	bne	r2,zero,80fbb0 <alt_tick+0x60>
  80fb9c:	d0a02a17 	ldw	r2,-32600(gp)
  80fba0:	1004c03a 	cmpne	r2,r2,zero
  80fba4:	1000021e 	bne	r2,zero,80fbb0 <alt_tick+0x60>
    {
      alarm->rollover = 0;
  80fba8:	e0bffe17 	ldw	r2,-8(fp)
  80fbac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80fbb0:	e0bffe17 	ldw	r2,-8(fp)
  80fbb4:	10c00217 	ldw	r3,8(r2)
  80fbb8:	d0a02a17 	ldw	r2,-32600(gp)
  80fbbc:	10c01d36 	bltu	r2,r3,80fc34 <alt_tick+0xe4>
  80fbc0:	e0bffe17 	ldw	r2,-8(fp)
  80fbc4:	10800403 	ldbu	r2,16(r2)
  80fbc8:	1004c03a 	cmpne	r2,r2,zero
  80fbcc:	1000191e 	bne	r2,zero,80fc34 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  80fbd0:	e0bffe17 	ldw	r2,-8(fp)
  80fbd4:	e0fffe17 	ldw	r3,-8(fp)
  80fbd8:	10800317 	ldw	r2,12(r2)
  80fbdc:	19000517 	ldw	r4,20(r3)
  80fbe0:	103ee83a 	callr	r2
  80fbe4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80fbe8:	e0bfff17 	ldw	r2,-4(fp)
  80fbec:	1004c03a 	cmpne	r2,r2,zero
  80fbf0:	1000031e 	bne	r2,zero,80fc00 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  80fbf4:	e13ffe17 	ldw	r4,-8(fp)
  80fbf8:	080fab40 	call	80fab4 <alt_alarm_stop>
  80fbfc:	00000d06 	br	80fc34 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  80fc00:	e13ffe17 	ldw	r4,-8(fp)
  80fc04:	e0bffe17 	ldw	r2,-8(fp)
  80fc08:	10c00217 	ldw	r3,8(r2)
  80fc0c:	e0bfff17 	ldw	r2,-4(fp)
  80fc10:	1885883a 	add	r2,r3,r2
  80fc14:	20800215 	stw	r2,8(r4)
        
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80fc18:	e0bffe17 	ldw	r2,-8(fp)
  80fc1c:	10c00217 	ldw	r3,8(r2)
  80fc20:	d0a02a17 	ldw	r2,-32600(gp)
  80fc24:	1880032e 	bgeu	r3,r2,80fc34 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  80fc28:	e0fffe17 	ldw	r3,-8(fp)
  80fc2c:	00800044 	movi	r2,1
  80fc30:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  80fc34:	e0bffd17 	ldw	r2,-12(fp)
  80fc38:	e0bffe15 	stw	r2,-8(fp)
  80fc3c:	003fcd06 	br	80fb74 <alt_tick+0x24>
  }

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  80fc40:	dfc00417 	ldw	ra,16(sp)
  80fc44:	df000317 	ldw	fp,12(sp)
  80fc48:	dec00504 	addi	sp,sp,20
  80fc4c:	f800283a 	ret

0080fc50 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
  80fc50:	deffff04 	addi	sp,sp,-4
  80fc54:	df000015 	stw	fp,0(sp)
  80fc58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80fc5c:	000170fa 	wrctl	ienable,zero
}
  80fc60:	df000017 	ldw	fp,0(sp)
  80fc64:	dec00104 	addi	sp,sp,4
  80fc68:	f800283a 	ret

0080fc6c <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80fc6c:	defffa04 	addi	sp,sp,-24
  80fc70:	dfc00515 	stw	ra,20(sp)
  80fc74:	df000415 	stw	fp,16(sp)
  80fc78:	df000404 	addi	fp,sp,16
  80fc7c:	e13ffc15 	stw	r4,-16(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80fc80:	d0a01017 	ldw	r2,-32704(gp)
  80fc84:	e0bffd15 	stw	r2,-12(fp)

  alt_32 len;
 
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80fc88:	e0fffd17 	ldw	r3,-12(fp)
  80fc8c:	d0a01004 	addi	r2,gp,-32704
  80fc90:	18802926 	beq	r3,r2,80fd38 <alt_find_file+0xcc>
  {
    len = strlen(next->name);
  80fc94:	e0bffd17 	ldw	r2,-12(fp)
  80fc98:	11000217 	ldw	r4,8(r2)
  80fc9c:	08070040 	call	807004 <strlen>
  80fca0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80fca4:	e0bffd17 	ldw	r2,-12(fp)
  80fca8:	10c00217 	ldw	r3,8(r2)
  80fcac:	e0bffe17 	ldw	r2,-8(fp)
  80fcb0:	1885883a 	add	r2,r3,r2
  80fcb4:	10bfffc4 	addi	r2,r2,-1
  80fcb8:	10800007 	ldb	r2,0(r2)
  80fcbc:	10800bd8 	cmpnei	r2,r2,47
  80fcc0:	1000031e 	bne	r2,zero,80fcd0 <alt_find_file+0x64>
    {
      len -= 1;
  80fcc4:	e0bffe17 	ldw	r2,-8(fp)
  80fcc8:	10bfffc4 	addi	r2,r2,-1
  80fccc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80fcd0:	e0fffc17 	ldw	r3,-16(fp)
  80fcd4:	e0bffe17 	ldw	r2,-8(fp)
  80fcd8:	1885883a 	add	r2,r3,r2
  80fcdc:	10800007 	ldb	r2,0(r2)
  80fce0:	10800be0 	cmpeqi	r2,r2,47
  80fce4:	1000061e 	bne	r2,zero,80fd00 <alt_find_file+0x94>
  80fce8:	e0fffc17 	ldw	r3,-16(fp)
  80fcec:	e0bffe17 	ldw	r2,-8(fp)
  80fcf0:	1885883a 	add	r2,r3,r2
  80fcf4:	10800007 	ldb	r2,0(r2)
  80fcf8:	1004c03a 	cmpne	r2,r2,zero
  80fcfc:	10000a1e 	bne	r2,zero,80fd28 <alt_find_file+0xbc>
  80fd00:	e0bffd17 	ldw	r2,-12(fp)
  80fd04:	11000217 	ldw	r4,8(r2)
  80fd08:	e17ffc17 	ldw	r5,-16(fp)
  80fd0c:	e1bffe17 	ldw	r6,-8(fp)
  80fd10:	080ff940 	call	80ff94 <memcmp>
  80fd14:	1004c03a 	cmpne	r2,r2,zero
  80fd18:	1000031e 	bne	r2,zero,80fd28 <alt_find_file+0xbc>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80fd1c:	e0bffd17 	ldw	r2,-12(fp)
  80fd20:	e0bfff15 	stw	r2,-4(fp)
  80fd24:	00000506 	br	80fd3c <alt_find_file+0xd0>
    }
    next = (alt_dev*) next->llist.next;
  80fd28:	e0bffd17 	ldw	r2,-12(fp)
  80fd2c:	10800017 	ldw	r2,0(r2)
  80fd30:	e0bffd15 	stw	r2,-12(fp)
  80fd34:	003fd406 	br	80fc88 <alt_find_file+0x1c>
  }
  
  /* No match found */
  
  return NULL;     
  80fd38:	e03fff15 	stw	zero,-4(fp)
}
  80fd3c:	e0bfff17 	ldw	r2,-4(fp)
  80fd40:	dfc00517 	ldw	ra,20(sp)
  80fd44:	df000417 	ldw	fp,16(sp)
  80fd48:	dec00604 	addi	sp,sp,24
  80fd4c:	f800283a 	ret

0080fd50 <alt_get_fd>:
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80fd50:	defff804 	addi	sp,sp,-32
  80fd54:	dfc00715 	stw	ra,28(sp)
  80fd58:	df000615 	stw	fp,24(sp)
  80fd5c:	dc000515 	stw	r16,20(sp)
  80fd60:	df000604 	addi	fp,sp,24
  80fd64:	e13ffa15 	stw	r4,-24(fp)
  alt_32 i;
  int rc = -EMFILE;
  80fd68:	00bffa04 	movi	r2,-24
  80fd6c:	e0bffc15 	stw	r2,-16(fp)
  80fd70:	e03ffd15 	stw	zero,-12(fp)
  
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  
  /* 
   * Search through the list of file descriptors, and allocate the first
   * free descriptor that's found. 
   *
   * If a free descriptor is found, then the value of "alt_max_fd" is 
   * updated accordingly. "alt_max_fd" is a 'highwater mark' which 
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80fd74:	e03ffb15 	stw	zero,-20(fp)
  80fd78:	e0bffb17 	ldw	r2,-20(fp)
  80fd7c:	10800808 	cmpgei	r2,r2,32
  80fd80:	10001d1e 	bne	r2,zero,80fdf8 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
  80fd84:	04002074 	movhi	r16,129
  80fd88:	84038004 	addi	r16,r16,3584
  80fd8c:	e13ffb17 	ldw	r4,-20(fp)
  80fd90:	01400304 	movi	r5,12
  80fd94:	08006ec0 	call	8006ec <__mulsi3>
  80fd98:	1405883a 	add	r2,r2,r16
  80fd9c:	10800017 	ldw	r2,0(r2)
  80fda0:	1004c03a 	cmpne	r2,r2,zero
  80fda4:	1000101e 	bne	r2,zero,80fde8 <alt_get_fd+0x98>
    {
      alt_fd_list[i].dev = dev;
  80fda8:	04002074 	movhi	r16,129
  80fdac:	84038004 	addi	r16,r16,3584
  80fdb0:	e13ffb17 	ldw	r4,-20(fp)
  80fdb4:	01400304 	movi	r5,12
  80fdb8:	08006ec0 	call	8006ec <__mulsi3>
  80fdbc:	1407883a 	add	r3,r2,r16
  80fdc0:	e0bffa17 	ldw	r2,-24(fp)
  80fdc4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  80fdc8:	e0fffb17 	ldw	r3,-20(fp)
  80fdcc:	d0a01417 	ldw	r2,-32688(gp)
  80fdd0:	10c0020e 	bge	r2,r3,80fddc <alt_get_fd+0x8c>
      {
        alt_max_fd = i;
  80fdd4:	e0bffb17 	ldw	r2,-20(fp)
  80fdd8:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
  80fddc:	e0bffb17 	ldw	r2,-20(fp)
  80fde0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  80fde4:	00000406 	br	80fdf8 <alt_get_fd+0xa8>
  80fde8:	e0bffb17 	ldw	r2,-20(fp)
  80fdec:	10800044 	addi	r2,r2,1
  80fdf0:	e0bffb15 	stw	r2,-20(fp)
  80fdf4:	003fe006 	br	80fd78 <alt_get_fd+0x28>
  80fdf8:	e03ffe15 	stw	zero,-8(fp)
    }
  }

 alt_get_fd_exit:

  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80fdfc:	e0bffc17 	ldw	r2,-16(fp)
}
  80fe00:	dfc00717 	ldw	ra,28(sp)
  80fe04:	df000617 	ldw	fp,24(sp)
  80fe08:	dc000517 	ldw	r16,20(sp)
  80fe0c:	dec00804 	addi	sp,sp,32
  80fe10:	f800283a 	ret

0080fe14 <atexit>:
  80fe14:	d0a00a17 	ldw	r2,-32728(gp)
  80fe18:	defffe04 	addi	sp,sp,-8
  80fe1c:	dc000015 	stw	r16,0(sp)
  80fe20:	dfc00115 	stw	ra,4(sp)
  80fe24:	11405217 	ldw	r5,328(r2)
  80fe28:	2021883a 	mov	r16,r4
  80fe2c:	01004304 	movi	r4,268
  80fe30:	28001b26 	beq	r5,zero,80fea0 <atexit+0x8c>
  80fe34:	28c00117 	ldw	r3,4(r5)
  80fe38:	008007c4 	movi	r2,31
  80fe3c:	10c00d16 	blt	r2,r3,80fe74 <atexit+0x60>
  80fe40:	28800104 	addi	r2,r5,4
  80fe44:	10c00017 	ldw	r3,0(r2)
  80fe48:	000d883a 	mov	r6,zero
  80fe4c:	180890ba 	slli	r4,r3,2
  80fe50:	18c00044 	addi	r3,r3,1
  80fe54:	10c00015 	stw	r3,0(r2)
  80fe58:	2149883a 	add	r4,r4,r5
  80fe5c:	24000215 	stw	r16,8(r4)
  80fe60:	3005883a 	mov	r2,r6
  80fe64:	dfc00117 	ldw	ra,4(sp)
  80fe68:	dc000017 	ldw	r16,0(sp)
  80fe6c:	dec00204 	addi	sp,sp,8
  80fe70:	f800283a 	ret
  80fe74:	08007140 	call	800714 <malloc>
  80fe78:	100b883a 	mov	r5,r2
  80fe7c:	01bfffc4 	movi	r6,-1
  80fe80:	103ff726 	beq	r2,zero,80fe60 <atexit+0x4c>
  80fe84:	d0e00a17 	ldw	r3,-32728(gp)
  80fe88:	10004215 	stw	zero,264(r2)
  80fe8c:	10000115 	stw	zero,4(r2)
  80fe90:	18805217 	ldw	r2,328(r3)
  80fe94:	28800015 	stw	r2,0(r5)
  80fe98:	19405215 	stw	r5,328(r3)
  80fe9c:	003fe806 	br	80fe40 <atexit+0x2c>
  80fea0:	01402074 	movhi	r5,129
  80fea4:	2949f704 	addi	r5,r5,10204
  80fea8:	11405215 	stw	r5,328(r2)
  80feac:	003fe106 	br	80fe34 <atexit+0x20>

0080feb0 <exit>:
  80feb0:	d0a00a17 	ldw	r2,-32728(gp)
  80feb4:	defff804 	addi	sp,sp,-32
  80feb8:	dd800015 	stw	r22,0(sp)
  80febc:	dfc00715 	stw	ra,28(sp)
  80fec0:	dc000615 	stw	r16,24(sp)
  80fec4:	dc400515 	stw	r17,20(sp)
  80fec8:	dc800415 	stw	r18,16(sp)
  80fecc:	dcc00315 	stw	r19,12(sp)
  80fed0:	dd000215 	stw	r20,8(sp)
  80fed4:	dd400115 	stw	r21,4(sp)
  80fed8:	15005217 	ldw	r20,328(r2)
  80fedc:	202d883a 	mov	r22,r4
  80fee0:	a0002526 	beq	r20,zero,80ff78 <exit+0xc8>
  80fee4:	a0800117 	ldw	r2,4(r20)
  80fee8:	a5402204 	addi	r21,r20,136
  80feec:	0027883a 	mov	r19,zero
  80fef0:	14bfffc4 	addi	r18,r2,-1
  80fef4:	9006803a 	cmplt	r3,r18,zero
  80fef8:	1800021e 	bne	r3,zero,80ff04 <exit+0x54>
  80fefc:	00800044 	movi	r2,1
  80ff00:	14a6983a 	sll	r19,r2,r18
  80ff04:	1800191e 	bne	r3,zero,80ff6c <exit+0xbc>
  80ff08:	900690ba 	slli	r3,r18,2
  80ff0c:	1d05883a 	add	r2,r3,r20
  80ff10:	14400204 	addi	r17,r2,8
  80ff14:	1821883a 	mov	r16,r3
  80ff18:	00000806 	br	80ff3c <exit+0x8c>
  80ff1c:	88800017 	ldw	r2,0(r17)
  80ff20:	29400017 	ldw	r5,0(r5)
  80ff24:	94bfffc4 	addi	r18,r18,-1
  80ff28:	843fff04 	addi	r16,r16,-4
  80ff2c:	103ee83a 	callr	r2
  80ff30:	8c7fff04 	addi	r17,r17,-4
  80ff34:	9827d07a 	srai	r19,r19,1
  80ff38:	90000c16 	blt	r18,zero,80ff6c <exit+0xbc>
  80ff3c:	a8802017 	ldw	r2,128(r21)
  80ff40:	854b883a 	add	r5,r16,r21
  80ff44:	b009883a 	mov	r4,r22
  80ff48:	14c4703a 	and	r2,r2,r19
  80ff4c:	103ff31e 	bne	r2,zero,80ff1c <exit+0x6c>
  80ff50:	88800017 	ldw	r2,0(r17)
  80ff54:	94bfffc4 	addi	r18,r18,-1
  80ff58:	843fff04 	addi	r16,r16,-4
  80ff5c:	103ee83a 	callr	r2
  80ff60:	8c7fff04 	addi	r17,r17,-4
  80ff64:	9827d07a 	srai	r19,r19,1
  80ff68:	903ff40e 	bge	r18,zero,80ff3c <exit+0x8c>
  80ff6c:	a5000017 	ldw	r20,0(r20)
  80ff70:	a03fdc1e 	bne	r20,zero,80fee4 <exit+0x34>
  80ff74:	d0a00a17 	ldw	r2,-32728(gp)
  80ff78:	10c00f17 	ldw	r3,60(r2)
  80ff7c:	1800021e 	bne	r3,zero,80ff88 <exit+0xd8>
  80ff80:	b009883a 	mov	r4,r22
  80ff84:	08100340 	call	810034 <_exit>
  80ff88:	1009883a 	mov	r4,r2
  80ff8c:	183ee83a 	callr	r3
  80ff90:	003ffb06 	br	80ff80 <exit+0xd0>

0080ff94 <memcmp>:
  80ff94:	01c000c4 	movi	r7,3
  80ff98:	3980032e 	bgeu	r7,r6,80ffa8 <memcmp+0x14>
  80ff9c:	2144b03a 	or	r2,r4,r5
  80ffa0:	11c4703a 	and	r2,r2,r7
  80ffa4:	10000d26 	beq	r2,zero,80ffdc <memcmp+0x48>
  80ffa8:	31bfffc4 	addi	r6,r6,-1
  80ffac:	00bfffc4 	movi	r2,-1
  80ffb0:	30800826 	beq	r6,r2,80ffd4 <memcmp+0x40>
  80ffb4:	100f883a 	mov	r7,r2
  80ffb8:	20c00003 	ldbu	r3,0(r4)
  80ffbc:	28800003 	ldbu	r2,0(r5)
  80ffc0:	31bfffc4 	addi	r6,r6,-1
  80ffc4:	21000044 	addi	r4,r4,1
  80ffc8:	29400044 	addi	r5,r5,1
  80ffcc:	18800b1e 	bne	r3,r2,80fffc <memcmp+0x68>
  80ffd0:	31fff91e 	bne	r6,r7,80ffb8 <memcmp+0x24>
  80ffd4:	0005883a 	mov	r2,zero
  80ffd8:	f800283a 	ret
  80ffdc:	20c00017 	ldw	r3,0(r4)
  80ffe0:	28800017 	ldw	r2,0(r5)
  80ffe4:	18bff01e 	bne	r3,r2,80ffa8 <memcmp+0x14>
  80ffe8:	31bfff04 	addi	r6,r6,-4
  80ffec:	21000104 	addi	r4,r4,4
  80fff0:	29400104 	addi	r5,r5,4
  80fff4:	39bff936 	bltu	r7,r6,80ffdc <memcmp+0x48>
  80fff8:	003feb06 	br	80ffa8 <memcmp+0x14>
  80fffc:	1885c83a 	sub	r2,r3,r2
  810000:	f800283a 	ret

00810004 <alt_sim_halt>:
  810004:	defffd04 	addi	sp,sp,-12
  810008:	df000215 	stw	fp,8(sp)
  81000c:	df000204 	addi	fp,sp,8
  810010:	e13ffe15 	stw	r4,-8(fp)
  810014:	e0bffe17 	ldw	r2,-8(fp)
  810018:	e0bfff15 	stw	r2,-4(fp)
  81001c:	00c00044 	movi	r3,1
  810020:	e0bfff17 	ldw	r2,-4(fp)
  810024:	180171ba 	wrctl	ctl6,r3
  810028:	df000217 	ldw	fp,8(sp)
  81002c:	dec00304 	addi	sp,sp,12
  810030:	f800283a 	ret

00810034 <_exit>:
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  810034:	defffd04 	addi	sp,sp,-12
  810038:	dfc00215 	stw	ra,8(sp)
  81003c:	df000115 	stw	fp,4(sp)
  810040:	df000104 	addi	fp,sp,4
  810044:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  810048:	e13fff17 	ldw	r4,-4(fp)
  81004c:	08100040 	call	810004 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  810050:	003fff06 	br	810050 <_exit+0x1c>
